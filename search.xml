<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue 的响应式/模版解析/渲染</title>
      <link href="/2019/01/03/vuesc.html"/>
      <url>/2019/01/03/vuesc.html</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于使用 vue 的同学来说，响应式、模版解析/渲染应该都很熟悉，vue 开发离不开这些特性。用了 vue 挺长时间了，写写总结。</p><h3 id="响应式"><a href="#响应式" class="headerlink" title="响应式"></a>响应式</h3><p>创建一个普通的对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> t = &#123;</span><br><span class="line">    name: <span class="string">'t1'</span></span><br><span class="line">    age: <span class="number">19</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(t.age) <span class="comment">// 19 那么如何监听age属性的访问与设置呢？</span></span><br></pre></td></tr></table></figure><p>在es5中加入了一个api叫 Object.defineProperty,该api允许 …</p><a id="more"></a><p>创建对象的属性自定义 get/set 函数。修改上面代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> t = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> name = <span class="string">'t1'</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">'name'</span>, &#123;</span><br><span class="line">get() &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'get'</span>)</span><br><span class="line"><span class="keyword">return</span> name</span><br><span class="line">&#125;,</span><br><span class="line">set(newVal) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'set'</span>)</span><br><span class="line">name = newVal</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(obj.name)</span><br><span class="line"><span class="comment">// get</span></span><br><span class="line"><span class="comment">// t1</span></span><br><span class="line">obj.name = <span class="string">'george'</span></span><br><span class="line"><span class="comment">// set</span></span><br></pre></td></tr></table></figure><p>在vue中我们可以模拟一下，大概过程如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> vm = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">    name: <span class="string">'lyn'</span>,</span><br><span class="line">    age: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">in</span> data) &#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(vm, v, &#123;</span><br><span class="line">            get() &#123;</span><br><span class="line">        <span class="keyword">return</span> data[v]</span><br><span class="line">        &#125;,</span><br><span class="line">        set(newVal) &#123;</span><br><span class="line">        data[v] = newVal</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)(v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么要将data的值全部代理至vm对象上？vue中就是这么写的 …，而且模版解析的时候会用到。</p><h3 id="模板解析"><a href="#模板解析" class="headerlink" title="模板解析"></a>模板解析</h3><p>我们经常在vue中使用vue模板，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">  &lt;input v-model=<span class="string">"title"</span>&gt;</span><br><span class="line">  &lt;button @click=<span class="string">"add"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;ul&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li v-for="v in list"&gt;&#123;&#123; v &#125;&#125;&lt;/</span>li&gt;</span><br><span class="line">&lt;<span class="regexp">/ul&gt;</span></span><br></pre></td></tr></table></figure><p>模板的本质是字符串，其特点有：</p><ul><li>包含 if/for 等逻辑指令</li><li>动态的（动态生成 dom ）</li><li>最终转换为 html</li></ul><p>综上，要将模板转换为 html ，只能使用 js 来操作。在 html/css/js 中，只有js能处理逻辑和渲染页面。</p><p>在当前文件引入vue文件，打开控制台，在源码中搜索code.render 在 return 前打印 code.render，观察模板被解析后生成的render函数，render函数最终返回vnode。如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span>(<span class="keyword">this</span>)&#123;  <span class="comment">// this 就是 vm</span></span><br><span class="line">    <span class="keyword">return</span> _c(</span><br><span class="line">        <span class="string">'div'</span>,</span><br><span class="line">        &#123;</span><br><span class="line">            attrs:&#123;<span class="string">"id"</span>:<span class="string">"app"</span>&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        [_c(</span><br><span class="line">            <span class="string">'div'</span>,</span><br><span class="line">            [</span><br><span class="line">                _c(</span><br><span class="line">                    <span class="string">'input'</span>,</span><br><span class="line">                    &#123;</span><br><span class="line">                        directives:[</span><br><span class="line">                        &#123;</span><br><span class="line">                       name:<span class="string">"model"</span>,</span><br><span class="line">                       rawName:<span class="string">"v-model"</span>,</span><br><span class="line">                       value:(title),  <span class="comment">// vm.title 在这里就将model中的的值通过vm与view中的input数据联系了起来</span></span><br><span class="line">                       expression:<span class="string">"title"</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        ],</span><br><span class="line">                        domProps:&#123;</span><br><span class="line">                            <span class="string">"value"</span>:(title)</span><br><span class="line">                        &#125;,</span><br><span class="line">                        on:&#123;</span><br><span class="line">                            <span class="string">"input"</span>:<span class="function"><span class="keyword">function</span>(<span class="params">$event</span>)</span>&#123;</span><br><span class="line">                          <span class="comment">// 在这里可以发现v-model 其实在vue模版内被封装了进去</span></span><br><span class="line">                                <span class="keyword">if</span>($event.target.composing)<span class="keyword">return</span>;</span><br><span class="line">                                title=$event.target.value</span><br><span class="line">                                在这里就将view中的input中的值通过vm与model中的数据联系了起来与上面相对应实现双向绑定</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ),</span><br><span class="line">                _v(<span class="string">" "</span>),</span><br><span class="line">                <span class="comment">// 因为html中俩个标签间我们换行所以这里是空</span></span><br><span class="line">                _c(</span><br><span class="line">                    <span class="string">'button'</span>,</span><br><span class="line">                    &#123;</span><br><span class="line">                        on:&#123;</span><br><span class="line">                            <span class="string">"click"</span>:add</span><br><span class="line">                            <span class="comment">// 相当于 vm.add这里直接调用methods中定义的add函数</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    [_v(<span class="string">"submit"</span>)]</span><br><span class="line">                )</span><br><span class="line">            ]),</span><br><span class="line">        _v(<span class="string">" "</span>),</span><br><span class="line">        _c(<span class="string">'div'</span>,</span><br><span class="line">            [</span><br><span class="line">                _c(</span><br><span class="line">                    <span class="string">'ul'</span>,</span><br><span class="line">                   <span class="comment">//v-for这里使用内部定义的 _l函数来处理</span></span><br><span class="line">                    _l((list),<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;<span class="keyword">return</span> _c(<span class="string">'li'</span>,[_v(_s(item))])&#125;)</span><br><span class="line">                )</span><br><span class="line">            ]</span><br><span class="line">        )]</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>_c 创建标签，_v创建文本元素，_s toString()，这个_c 和 snabbdom 中的 h 函数很像，那vue中更新的操作会不会和 snabbdom 中的逻辑页相似呢？<br>vue 中的更新函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vm._update(vnode) &#123;</span><br><span class="line">    <span class="keyword">const</span> prevNode = vm._vnode</span><br><span class="line">    vm._node = vnode</span><br><span class="line">    <span class="keyword">if</span>(!prevNode) &#123;</span><br><span class="line">        vm.$el = vm.__patch___(vm.$el, vnode)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        vm.$el = vm.__patch__(prevNode, vnode)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateComponent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    vm._update(vm._render())</span><br><span class="line">    <span class="comment">// vm._render 即生成上面包含 _c/_v/_s的模板解析函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说每次改变data，通过Object.defineProperty监听修改操作，一旦修改就调用 updateComponent 函数，利用vm._render方法生成新的 vnode。通过 vm._patch_ 将vnode转化为html并更新至原生dom中。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>解析模板生成render函数</li><li>响应式开始监听</li><li>首次渲染，显示页面且绑定依赖</li><li>data属性变化，再次渲染</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vuejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模版解析 </tag>
            
            <tag> render 函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nuxt.js踩坑实录</title>
      <link href="/2018/05/01/Nuxt.js%E8%B8%A9%E5%9D%91%E5%AE%9E%E5%BD%95.html"/>
      <url>/2018/05/01/Nuxt.js%E8%B8%A9%E5%9D%91%E5%AE%9E%E5%BD%95.html</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前一阵子接触一个新项目，用了vue中的ssr解决方案 — Nuxt.js。也算是小有感受，记录一些经验留后备用。</p><h3 id="CSR-amp-SSR"><a href="#CSR-amp-SSR" class="headerlink" title="CSR &amp; SSR"></a>CSR &amp; SSR</h3><h4 id="什么是-CSR"><a href="#什么是-CSR" class="headerlink" title="什么是 CSR ?"></a>什么是 CSR ?</h4><p>CSR =&gt; client-side-reder，即客户端渲染。具体过程如下：</p><ul><li>用户请求页面，返回页面。此时页面只是模版页面</li><li>浏览器解析页面代码，读到js代码时，会根据我们所写的接口去请求数据</li><li>得到返回数据后使用模版（vue/react/ng/art-template）进行渲染<h4 id="什么是-SSR"><a href="#什么是-SSR" class="headerlink" title="什么是 SSR ?"></a>什么是 SSR ?</h4></li></ul><a id="more"></a><p>SSR =&gt; server-side-render，即服务器端渲染。具体过程如下：</p><ul><li>用户请求页面</li><li>后端取到准备好的数据，渲染到我们自己写的服务器模版（next/nuxt/ejs）中，准备好html结构与相应数据后返回给浏览器</li></ul><h4 id="CSR-amp-SSR-优缺点对比"><a href="#CSR-amp-SSR-优缺点对比" class="headerlink" title="CSR &amp; SSR 优缺点对比"></a>CSR &amp; SSR 优缺点对比</h4><table><thead><tr><th style="text-align:left"></th><th style="text-align:left">优点</th><th style="text-align:left">缺点</th></tr></thead><tbody><tr><td style="text-align:left">CSR</td><td style="text-align:left">减轻服务器压力，前后端分离</td><td style="text-align:left">对seo不友（不利于爬虫爬取），首页渲染存在白屏问题</td></tr><tr><td style="text-align:left">SSR</td><td style="text-align:left">对seo友好，首页渲染完美无白屏问题</td><td style="text-align:left">对服务器性能有一定要求，不利于前后端分离</td></tr></tbody></table><p>其实在真正开发中通常是 csr 与 ssr 相结合使用，前端使用cdn缓存，后端使用nginx缓存。这样是最优的解决方案。上两张图大家对比理解：</p><p><img src="/2018/05/01/Nuxt.js踩坑实录/i7eo_1687e50bff1dbae80b0211d67d9dbde4.png" alt="csr"></p><p><img src="/2018/05/01/Nuxt.js踩坑实录/i7eo_910d2d75c2c87a237bfa316a4ed5ea26.png" alt="ssr"></p><h3 id="Nuxt-js"><a href="#Nuxt-js" class="headerlink" title="Nuxt.js"></a>Nuxt.js</h3><h4 id="什么是-Nuxt"><a href="#什么是-Nuxt" class="headerlink" title="什么是 Nuxt ?"></a>什么是 Nuxt ?</h4><p>Nuxt.js 是一个基于 Vue.js 的通用应用框架。通过对客户端/服务端基础架构的抽象组织，Nuxt.js 主要关注的是应用的 UI渲染。</p><h4 id="Nuxt-流程"><a href="#Nuxt-流程" class="headerlink" title="Nuxt 流程"></a>Nuxt 流程</h4><p><img src="/2018/05/01/Nuxt.js踩坑实录/i7eo_0667f547016c7ce4a49e09b07b9b68fa.png" alt="Nuxt流程图"></p><h5 id="nuxtServerInit"><a href="#nuxtServerInit" class="headerlink" title="nuxtServerInit"></a>nuxtServerInit</h5><p>请求先到达 nuxtServerInit 方法，图中也表明了适用场景是对 store 的 action 操作即（vuex）：</p><p><img src="/2018/05/01/Nuxt.js踩坑实录/i7eo_702484477e28e35d0d7057ad05916493.png" alt=""></p><h5 id="middleware"><a href="#middleware" class="headerlink" title="middleware"></a>middleware</h5><p>下来请求到达 middleware 属性，虽然这里叫做中间件属性，但还是做着同中间件一样的事。官方给出的定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">中间件允许您定义一个自定义函数运行在一个页面或一组页面渲染之前。</span><br></pre></td></tr></table></figure></p><p>也就是说，定义 middleware 属性后你可以在 匹配布局（layout 组件）前执行某种操作，也可以在解析完 layout 之后，解析 page 组件前 执行某种操作。</p><h5 id="validate"><a href="#validate" class="headerlink" title="validate"></a>validate</h5><p>下来请求到达 validate 方法，在这里可以对 page 组件或者 page 中的子组件 component 进行动态路由对应的页面组件中动态路由参数的有效性。</p><h5 id="asyncData-amp-fetch"><a href="#asyncData-amp-fetch" class="headerlink" title="asyncData &amp; fetch"></a>asyncData &amp; fetch</h5><p>接下来达到 asyncData &amp; fetch 方法，asyncData() 适用于在渲染组件前获取异步数据，fetch() 适用于在渲染页面前填充 vuex 中维护的数据。</p><h5 id="render"><a href="#render" class="headerlink" title="render"></a>render</h5><p>最后进行渲染。将渲染后的页面返回给浏览器，用户在页面进行操作，<strong>如果再次请求新的页面，此时只会回到生命周期中的 middlerware 中，而非 nuxtServerInit ，所以如果不同页面间需要操作相同的数据请用 vuex 来维护</strong>。</p><h3 id="Nuxt-笔记"><a href="#Nuxt-笔记" class="headerlink" title="Nuxt 笔记"></a>Nuxt 笔记</h3><h4 id="Nuxt-项目结构"><a href="#Nuxt-项目结构" class="headerlink" title="Nuxt 项目结构"></a>Nuxt 项目结构</h4><p><img src="/2018/05/01/Nuxt.js踩坑实录/i7eo_2b5a004471f261f8a5a2b7af246c6c39.png" alt=""></p><p>通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install npx</span><br><span class="line">npx create-nuxt-app xxx</span><br></pre></td></tr></table></figure><p>生成如上结构，布局组件（layout）用来存放页面整体布局，在 layout 中我们可以放入一些每个页面都会以用到的组件，比如 header &amp; footer。当然如果你不想使用已生成的 layout 组件，你可以重新创建一个，比如 blank.vue 一般不需要引入 header&amp;footer 的页面可以使用 blank.vue 这个 layout 组件。代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">layout: &apos;blank&apos;</span><br></pre></td></tr></table></figure><p><strong>在 nuxt 中引入 layout 不用写路径，nuxt 已经帮我们做了映射，同理在 nuxt 中不用写路由，pages 中文件名映射为了路由</strong>。</p><h4 id="nuxt-中的钩子函数"><a href="#nuxt-中的钩子函数" class="headerlink" title="nuxt 中的钩子函数"></a>nuxt 中的钩子函数</h4><p>nuxt 中提供很多钩子函数，参考文档：<a href="https://zh.nuxtjs.org/api/internals/" target="_blank" rel="noopener">nuxt hooks</a></p><p>这里我们主要来看 vue 组件生命周期中钩子函数，服务器端的 vue 组件也是有生命周期的，只不过只有 beforeCreate 和 created 俩个。<strong>也就是说，我们把服务器端创建的 .vue 文件全部理解成组件，在服务器端环境（node）通过 beforeCreate 和 created 这俩个生命周期节点后服务器端 vue 组件生命周期结束。返回页面给浏览器，在客户端环境（v8）中这个 vue 组件实例创建后会在客户端再次拥有生命周期，此时生命周期中有 mounted 等钩子函数</strong>。</p><p><strong>需要特别注意的是 nuxt 中没有 mounted 钩子函数也没有组件实例，只有 beforeCreate/created 钩子与 context 对象</strong>。</p><h4 id="asyncData-传递服务器数据至客户端"><a href="#asyncData-传递服务器数据至客户端" class="headerlink" title="asyncData() 传递服务器数据至客户端"></a>asyncData() 传递服务器数据至客户端</h4><p><strong>在 asyncData() 中可以处理请求得来的数据，通过 return 将处理后的数据返回给当前 vue 组件的 data 。再次强调这里不能使用 this ，因为没有组件实例，asyncData() 默认的参数是 ctx 即 content 对象</strong>。</p><p>对于打开网页要立即显示的内容，如首页中的 geo 组件（显示当前位置）来说有俩种方式实现，如下：</p><ul><li>ssr<ul><li>nuxtServerInit 方法</li><li>middleware 属性</li></ul></li><li>vue 组件 mounted 函数发送请求</li></ul><p>no-ssr 即 mounted 函数方式实现相信大家都很熟悉。主要来说说 ssr 对应的俩种实现方式。</p><p>nuxtServerInit() 前面也说过，搭配 vuex 使用，所以顾名思义，在 nuxtServerInit 函数中准备好首页 geo 组件需要的数据存入 vuex，<strong>这样 vuex 实例化后的 store 会贯穿整个服务器端与客户端的生命周期</strong>。可能有的同学会问这是怎么传过去的？文末会截图说明。所以在首页返回客户端时数据存在 store 实例中可直接获取即可。获取方式如下：</p><ul><li>服务器端：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctx.store.state.xxx.xxx.xxx</span><br><span class="line"><span class="comment">// eg: ctx.store.state.home.position.city</span></span><br></pre></td></tr></table></figure><ul><li>客户端：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$store.state.xxx.xxx.xxx</span><br><span class="line"><span class="comment">// eg: this.$store.state.home.position.city</span></span><br></pre></td></tr></table></figure><p>middleware 属性是在 vue 组件中直接定义即可，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">middleware: async (ctx) =&gt; &#123;</span><br><span class="line">    let &#123;status, data: &#123;province, city&#125;&#125; = await ctx.$axios.get(&apos;/geo/getPosition&apos;)</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>问题来了，如何将获取的 data 赋值给组件中的 data 呢？上面在 nuxt流程图 部分我们分析过，渲染前的最后一步是 asyncData&amp;fetch ，这里我们还是需要用 asyncData 方法把 data 给组件 return 即可。具体做法见官方给出的 issue &amp; 例子：</p><p><a href="https://github.com/nuxt/nuxt.js/issues/1738" target="_blank" rel="noopener">issue：#1738</a></p><p><a href="https://github.com/nuxt/nuxt.js/blob/dev/test/fixtures/basic/pages/fn-midd.vue" target="_blank" rel="noopener">nuxt/fn-midd.vue</a></p><p>解答上面遗留的问题，ssr 生成的页面如何把 vuex 实例后的 store 传给客户端？</p><p>其实在服务器返回页面给浏览器时会传一个名为 __NUXT__ 的对象挂载在 window 上，这里面存储了 store 。如下：</p><p><img src="/2018/05/01/Nuxt.js踩坑实录/i7eo_728311f61451d0611502442c08197ff6.png" alt=""></p><p>如图可以找到 $store.state.home.position.city 这个数据。</p><p>参考文章：</p><p><a href="https://w3ctech.com/topic/2005" target="_blank" rel="noopener">The Benefits of Server Side Rendering Over Client Side Rendering</a></p><p><a href="https://nuxtjs.org/" target="_blank" rel="noopener">NUXT-Universal Vue.js Applications</a></p>]]></content>
      
      
      <categories>
          
          <category> Vue SSR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nuxt.js </tag>
            
            <tag> SSR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript面向对象笔记</title>
      <link href="/2018/03/25/Javascript%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AC%94%E8%AE%B0.html"/>
      <url>/2018/03/25/Javascript%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AC%94%E8%AE%B0.html</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;说到面向对象，大多数人都想到的是高级语言：c++、java，但是我认为对于一名coder来说不论什么语言，一定要有面向对象这种思想（封装、继承、多态），我们只需要用语言这个工具把思想表达出来即可。本文只讨论继承。</p><h3 id="Javascript-中创建对象"><a href="#Javascript-中创建对象" class="headerlink" title="Javascript 中创建对象"></a>Javascript 中创建对象</h3><h4 id="new-关键字做了什么？"><a href="#new-关键字做了什么？" class="headerlink" title="new 关键字做了什么？"></a>new 关键字做了什么？</h4><p>利用 new &amp; 构造函数 创建新的对象。这个创建新对象的过程分为三步：</p><ul><li>声明新的变量 basketball</li></ul><a id="more"></a><ul><li>new 将新变量的 _proto_ 属性指向了构造函数（Ball）的 prototype 属性，这时内存为 basketball 分配了内存，其成为了对象。<code>basketball._proto_ = ball.prototype</code></li><li>利用 call 函数将新产生的对象 basketball 的 this 指向 ball。即绑定 this。</li></ul><h4 id="prototype-proto-是什么？"><a href="#prototype-proto-是什么？" class="headerlink" title="prototype/_proto_ 是什么？"></a>prototype/_proto_ 是什么？</h4><p>有的书上别别用显示原型/隐示原型来分别代 prototype/_proto_ 还有的用原型对象/对象原型。其实不论哪一种说法，代表的东西都是一样的。这里我们使用第二种说法。俩者区别如下表：</p><table><thead><tr><th style="text-align:left"></th><th style="text-align:left">解释</th><th style="text-align:left">备注</th></tr></thead><tbody><tr><td style="text-align:left">prototype</td><td style="text-align:left">指向函数的原型对象（包括拥有的变量与方法，constructor ，_proto_）</td><td style="text-align:left">只有函数拥有此属性</td></tr><tr><td style="text-align:left">_proto_</td><td style="text-align:left">指向构造器的原型对象</td><td style="text-align:left">不论对象或者函数都有此属性</td></tr></tbody></table><p>来看下面代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ball</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">　　<span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> basketball = <span class="keyword">new</span> Ball(<span class="string">'basketball'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(basketball.__proto__);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  输出</span></span><br><span class="line"><span class="comment">    constructor: ƒ ball(name)</span></span><br><span class="line"><span class="comment">    arguments: null</span></span><br><span class="line"><span class="comment">    caller: null</span></span><br><span class="line"><span class="comment">    length: 1</span></span><br><span class="line"><span class="comment">    name: "ball"</span></span><br><span class="line"><span class="comment">    prototype: &#123;constructor: ƒ&#125;</span></span><br><span class="line"><span class="comment">    __proto__: ƒ ()</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(ball.prototype)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  输出</span></span><br><span class="line"><span class="comment">    constructor: ƒ ball(name)</span></span><br><span class="line"><span class="comment">    arguments: null</span></span><br><span class="line"><span class="comment">    caller: null</span></span><br><span class="line"><span class="comment">    length: 1</span></span><br><span class="line"><span class="comment">    name: "ball"</span></span><br><span class="line"><span class="comment">    prototype: &#123;constructor: ƒ&#125;</span></span><br><span class="line"><span class="comment">    __proto__: ƒ ()</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(basketball.__proto__ === ball.prototype)</span><br><span class="line"></span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>从结果来看确实跟我们上述的 new 创建对象过程一致。</p><h3 id="面向对象-—-继承"><a href="#面向对象-—-继承" class="headerlink" title="面向对象 — 继承"></a>面向对象 — 继承</h3><h4 id="1、call-apply"><a href="#1、call-apply" class="headerlink" title="1、call/apply"></a>1、call/apply</h4><p>该方式采取的办法是将父对象的构造函数绑定在子对象上。具体如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ball</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.general = <span class="string">"球类运动"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Basketball</span>(<span class="params">name, space</span>) </span>&#123;</span><br><span class="line">    Ball.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.space = space;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bb = <span class="keyword">new</span> Basketball(<span class="string">'耐克7号球'</span>, <span class="string">'室内'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bb.general)</span><br><span class="line"><span class="comment">// 球类运动</span></span><br></pre></td></tr></table></figure><h4 id="2、原型链继承"><a href="#2、原型链继承" class="headerlink" title="2、原型链继承"></a>2、原型链继承</h4><p>使子类原型对象指向父类的原型对象以实现继承。具体如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ball</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.general = <span class="string">"球类运动"</span>;</span><br><span class="line">    <span class="keyword">this</span>.ballprint = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ball'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Basketball</span>(<span class="params">name, space</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.space = space;</span><br><span class="line">    <span class="keyword">this</span>.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'basketball'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Basketball.prototype = <span class="keyword">new</span> Ball();</span><br><span class="line"><span class="keyword">let</span> bb = <span class="keyword">new</span> Basketball(<span class="string">'耐克7号球'</span>, <span class="string">'室内'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bb.general) <span class="comment">// 1、球类运动</span></span><br><span class="line"><span class="built_in">console</span>.log(bb.ballprint()) <span class="comment">// 2、ball</span></span><br><span class="line"><span class="built_in">console</span>.log(bb.name) <span class="comment">// 3、耐克7号球</span></span><br><span class="line"><span class="built_in">console</span>.log(bb.print()) <span class="comment">// 4、basketball</span></span><br><span class="line"><span class="built_in">console</span>.log(Basketball.prototype == Ball.prototype) <span class="comment">// 5、true</span></span><br><span class="line"><span class="built_in">console</span>.log(Basketball.prototype.__proto__ == Ball.prototype) <span class="comment">// 6、true</span></span><br></pre></td></tr></table></figure><p>调试语句5更深层次的意思是说:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Basketball.prototype.constuctor = Ball.prototype.constuctor</span><br></pre></td></tr></table></figure></p><p>因为前面说过每个函数特有 prototype 这个原型对象属性，而在这个原型对象中存有 constuctor ，所以<strong>要使俩函数的 prototype 相等，那么其中的 constuctor 必定也想等</strong>。所以 bb 作为子类才可以访问到 ball 中的属性与方法。语句1&amp;2证明了这一点。</p><p>语句6结果符合 new 操作符的操作。</p><p>如果子类与父类中的属性、方法同名那么结果怎样呢？结果如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ball</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">"球类运动"</span>;</span><br><span class="line">    <span class="keyword">this</span>.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ball'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Basketball</span>(<span class="params">name, space</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.space = space;</span><br><span class="line">    <span class="keyword">this</span>.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'basketball'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Basketball.prototype = <span class="keyword">new</span> Ball();</span><br><span class="line"><span class="keyword">let</span> bb = <span class="keyword">new</span> Basketball(<span class="string">'耐克7号球'</span>, <span class="string">'室内'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bb.name) <span class="comment">// 1、耐克7号球</span></span><br><span class="line"><span class="built_in">console</span>.log(bb.print()) <span class="comment">// 2、basketball</span></span><br><span class="line"><span class="built_in">console</span>.log(Basketball.prototype == Ball.prototype) <span class="comment">// 3、true</span></span><br><span class="line"><span class="built_in">console</span>.log(Basketball.prototype.__proto__ == Ball.prototype) <span class="comment">// 4、true</span></span><br></pre></td></tr></table></figure><p>此时虽然 <code>bb._proto_ = Basketball.prototype = Ball.prototype</code> 但是同名采取的<strong>就近访问的原则</strong>，所以执行 Basketball 中的语句。<strong>而不会通过 _proto_ 原型链去去上级父类寻找变量与方法</strong>。</p><h4 id="3、改进后的原型继承"><a href="#3、改进后的原型继承" class="headerlink" title="3、改进后的原型继承"></a>3、改进后的原型继承</h4><p>因为上述2中的方法会修改构造函数，所以我们应该手动置回。具体如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ball</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">"球类运动"</span>;</span><br><span class="line">    <span class="keyword">this</span>.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ball'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Basketball</span>(<span class="params">name, space</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.space = space;</span><br><span class="line">    <span class="keyword">this</span>.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'basketball'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Basketball.prototype = <span class="keyword">new</span> Ball();</span><br><span class="line">Basketball.prototype.constructor = Basketball;</span><br><span class="line"><span class="keyword">let</span> bb = <span class="keyword">new</span> Basketball(<span class="string">'耐克7号球'</span>, <span class="string">'室内'</span>);</span><br></pre></td></tr></table></figure><p>这样即可。当然这样的继承方式是多占用了些内存，<code>Basketball.prototype = new Ball();</code> ，<strong>当然还有不占内存的方式，比如利用空对象作为中介的方式</strong>。创建了一个临时的对象，理解起来不难。具体请参考：</p><p><a href="http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html" target="_blank" rel="noopener">Javascript面向对象编程（二）：构造函数的继承</a></p><p>阮老师这里介绍的空对象方法，没什么问题。但是我觉得没有把临时对象使用完后手动置空的操作，自己加上即可。</p><h4 id="4、class-extends-关键字实现继承"><a href="#4、class-extends-关键字实现继承" class="headerlink" title="4、class/extends 关键字实现继承"></a>4、class/extends 关键字实现继承</h4><p>es6中引入了类的概念，用 class 关键字声明的函数作为对象模版。具体如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ball</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(name) &#123;</span><br><span class="line"><span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line">play() &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Ball is: '</span>, <span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Basketball</span> <span class="keyword">extends</span> <span class="title">Ball</span> </span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(name) &#123;</span><br><span class="line"><span class="keyword">super</span>(name)</span><br><span class="line"><span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line">playb() &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Basketball is: '</span>, <span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bb = <span class="keyword">new</span> Basketball(<span class="string">'nikeball'</span>)</span><br><span class="line">bb.play(); <span class="comment">// Ball is: nikeball</span></span><br><span class="line">bb.playb(); <span class="comment">// Basketball is: nikeball</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> Ball) <span class="comment">// 1、function</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> Basketball) <span class="comment">// 2、function</span></span><br><span class="line"><span class="built_in">console</span>.log(bb.__proto__ == Basketball.prototype) <span class="comment">// 3、true</span></span><br><span class="line"><span class="built_in">console</span>.log(Basketball.prototype)</span><br><span class="line"><span class="comment">/* 4、</span></span><br><span class="line"><span class="comment">constructor: class Basketball</span></span><br><span class="line"><span class="comment">playb: ƒ playb()</span></span><br><span class="line"><span class="comment">__proto__: Object</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>由打印出的结果1&amp;2我们可以看出，class 好像是包在 function 上的语法糖；由3慢慢确定了这一点；由4我们更加确定了这一点，而且<strong>结合前面说的改进原型继承的方式，还可以尝试分析 class 继承的关键步骤</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Basketball.prototype = <span class="keyword">new</span> Ball()</span><br><span class="line"></span><br><span class="line">Basketball.prototype.constructor = Basketball</span><br><span class="line"></span><br><span class="line"><span class="comment">// playb() &#123;...&#125; 相当于:</span></span><br><span class="line">Basketball.prototype.playb = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;...&#125;</span><br></pre></td></tr></table></figure><p>使用 class 时一定要注意在使用 this 或者子类构造函数返回前，一定要在子类中使用 super 关键字调用父类的构造函数。说白了就是在子类中一定要使用 super 。</p><p>参考资料：</p><p><a href="http://www.cnblogs.com/cshi/p/5476416.html" target="_blank" rel="noopener">JS当中的new关键字都干了些什么？</a></p><p><a href="http://www.cnblogs.com/pssp/p/5204324.html" target="_blank" rel="noopener">作用域链与原型链</a></p><p><a href="http://louiszhai.github.io/2015/12/17/prototype/" target="_blank" rel="noopener">详解prototype与_proto_</a></p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> prototype/_proto_ </tag>
            
            <tag> 面向对象 </tag>
            
            <tag> 继承 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Event Loop总结</title>
      <link href="/2018/03/08/Event-Loop%E6%80%BB%E7%BB%93.html"/>
      <url>/2018/03/08/Event-Loop%E6%80%BB%E7%BB%93.html</url>
      
        <content type="html"><![CDATA[<p>之前也有 event loop 的概念，但一直都是琐碎的。直到阅读以下三篇文章后，琐碎的点串在了一起。</p><blockquote><p><a href="https://www.cnblogs.com/cangqinglang/p/8963557.html" target="_blank" rel="noopener">从浏览器多进程到JS单线程，JS运行机制最全面的一次梳理</a></p></blockquote><blockquote><p><a href="https://juejin.im/post/59e85eebf265da430d571f89" target="_blank" rel="noopener">这一次，彻底弄懂 JavaScript 执行机制</a></p></blockquote><blockquote><p><a href="https://zhuanlan.zhihu.com/p/33087629" target="_blank" rel="noopener">Event Loop的规范和实现</a></p></blockquote><p>为了印象深刻，还是决定自己写一写。总结如下：</p><h3 id="1、进程与线程的区别"><a href="#1、进程与线程的区别" class="headerlink" title="1、进程与线程的区别"></a>1、进程与线程的区别</h3><h4 id="1、什么是进程？"><a href="#1、什么是进程？" class="headerlink" title="1、什么是进程？"></a>1、什么是进程？</h4><p>在计算机操作系统中，只有进程才能在系统中运行。所以要使程序运行就必须为其创建进程。当我们打开浏览器时就已经创建了进程。创建进程之后，系统会为其分配资源(内存等)供其使用。</p><p><a href="https://zh.wikipedia.org/wiki/%E8%A1%8C%E7%A8%8B" target="_blank" rel="noopener">进程</a>是程序（指令和数据）的真正运行实例。若干<a href="https://zh.wikipedia.org/wiki/%E8%A1%8C%E7%A8%8B" target="_blank" rel="noopener">进程</a>有可能 …</p><a id="more"></a><p>与同一个程序相关系，且每个<a href="https://zh.wikipedia.org/wiki/%E8%A1%8C%E7%A8%8B" target="_blank" rel="noopener">进程</a>皆可以同步（循序）或异步（平行）的方式独立运行。</p><h4 id="2、什么是线程？"><a href="#2、什么是线程？" class="headerlink" title="2、什么是线程？"></a>2、什么是线程？</h4><p><a href="https://zh.wikipedia.org/wiki/%E7%BA%BF%E7%A8%8B" target="_blank" rel="noopener">线程</a>是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条<a href="https://zh.wikipedia.org/wiki/%E7%BA%BF%E7%A8%8B" target="_blank" rel="noopener">线程</a>指的是进程中一个单一顺序的控制流，一个进程中可以并发多个<a href="https://zh.wikipedia.org/wiki/%E7%BA%BF%E7%A8%8B" target="_blank" rel="noopener">线程</a>，每条<a href="https://zh.wikipedia.org/wiki/%E7%BA%BF%E7%A8%8B" target="_blank" rel="noopener">线程</a>并行执行不同的任务。</p><p><strong>总的来说进程是资源分配的最小单位，线程是计算机系统调度和分派的基本单位。线程基本上不拥有资源（也有一点必不可少的资源）它只专注于调度和分派，提高系统并发程度，但是它可以访问其隶属进程的资源。</strong></p><h3 id="2、浏览器是多进程"><a href="#2、浏览器是多进程" class="headerlink" title="2、浏览器是多进程"></a>2、浏览器是多进程</h3><p>上图来阐述，进入浏览器（chrome等）打开多个标签页，然后打开浏览器的 task manager。如下图：</p><p><img src="/2018/03/08/Event-Loop总结/i7eo_6e8f969201c7cd42ae589fe20d2fd558.png" alt=""></p><p>从图上来看，我们首先可以确定的是我打开的4个页面都是进程，因为它们有不同的 process id（进程标识符），这个是存在 PCB 中的，系统分配且唯一的数字标识符。PCB 是进程控制块，具体可搜索计算机操作系统-进程。</p><p>浏览器的主要进程有四个，分别为：主进程、GPU进程、浏览器渲染（render）进程（每个标签页都会一个渲染进程）、第三方插件进程。</p><p>主要来说说这四个进程的职责：</p><h4 id="1-主进程："><a href="#1-主进程：" class="headerlink" title="1. 主进程："></a>1. 主进程：</h4><ul><li>用户的前进、后退操作</li><li>每个标签页的创建与销毁</li><li>将渲染进程执行后生成的位图（bitmap）绘制在对应标签页上，呈现给用户</li><li>书签、下载等功能的管理</li></ul><h4 id="2-浏览器渲染进程"><a href="#2-浏览器渲染进程" class="headerlink" title="2. 浏览器渲染进程"></a>2. 浏览器渲染进程</h4><ul><li>页面渲染</li><li>脚本执行（事件、task）</li></ul><h4 id="3-GPU进程：用于3D绘制等"><a href="#3-GPU进程：用于3D绘制等" class="headerlink" title="3. GPU进程：用于3D绘制等"></a>3. GPU进程：用于3D绘制等</h4><h4 id="4-第三方插件进程：使用插件时创建"><a href="#4-第三方插件进程：使用插件时创建" class="headerlink" title="4. 第三方插件进程：使用插件时创建"></a>4. 第三方插件进程：使用插件时创建</h4><p>主要来说下浏览器渲染进程，这个进程是当前标签的控制者。js 代码的执行、事件的触发、页面的展示等都由它负责。那么这一个进程可以同时干这么多事情吗？它一个当然是可以的，但是如果一个人来做就会浪费资源而且一旦执行脚本文件后会不断阻塞页面执行。至此，引入了线程来解决这个问题。</p><h3 id="3、Javascript-的单线程"><a href="#3、Javascript-的单线程" class="headerlink" title="3、Javascript 的单线程"></a>3、Javascript 的单线程</h3><p>在渲染进程中划分了很多个线程，这里介绍一些常驻线程：</p><h5 id="1-JS-线程（引擎线程，即常说的那个js单线程）"><a href="#1-JS-线程（引擎线程，即常说的那个js单线程）" class="headerlink" title="1. JS 线程（引擎线程，即常说的那个js单线程）"></a>1. JS 线程（引擎线程，即常说的那个js单线程）</h5><ul><li>运行环境（v8），负责处理 js 脚本</li><li>每个标签页只有一个 js 线程在执行代码</li><li>js 线程与 Gui 渲染线程互斥，js 执行时间过长会导致页面渲染的阻塞（互斥原因下面阐述</li></ul><h5 id="2-GUI-渲染线程"><a href="#2-GUI-渲染线程" class="headerlink" title="2. GUI 渲染线程"></a>2. GUI 渲染线程</h5><ul><li>负责渲染页面（构建dom 树 &amp; cssparser 树 &amp; renderobject 树）</li><li>当页面出现重绘或回流（repaint/reflow）时，会调用该线程</li><li>与 js 线程互斥</li></ul><h5 id="3-事件触发线程：遵循先进先出的原则在异步队列中等待-js-线程处理。（异步队列下面会解释）"><a href="#3-事件触发线程：遵循先进先出的原则在异步队列中等待-js-线程处理。（异步队列下面会解释）" class="headerlink" title="3. 事件触发线程：遵循先进先出的原则在异步队列中等待 js 线程处理。（异步队列下面会解释）"></a>3. 事件触发线程：遵循先进先出的原则在异步队列中等待 js 线程处理。（异步队列下面会解释）</h5><h5 id="4-定时器触发线程"><a href="#4-定时器触发线程" class="headerlink" title="4. 定时器触发线程"></a>4. 定时器触发线程</h5><ul><li>定时器并不是在某段时间后执行，而是在某时间后被添加至异步队列，等 js 线程空闲后执行</li><li>W3C在HTML标准中规定，规定要求setTimeout中低于4ms的时间间隔算为4ms</li></ul><h5 id="5-http-请求线程：请求成功后会把回调放入异步队列中。"><a href="#5-http-请求线程：请求成功后会把回调放入异步队列中。" class="headerlink" title="5. http 请求线程：请求成功后会把回调放入异步队列中。"></a>5. http 请求线程：请求成功后会把回调放入异步队列中。</h5><h5 id="6-备注：上述执行环境是在浏览器中，如果执行环境换为-node-的话，还有-I-O-线程与-setImmediate"><a href="#6-备注：上述执行环境是在浏览器中，如果执行环境换为-node-的话，还有-I-O-线程与-setImmediate" class="headerlink" title="6. 备注：上述执行环境是在浏览器中，如果执行环境换为 node 的话，还有 I/O 线程与 setImmediate"></a>6. 备注：上述执行环境是在浏览器中，如果执行环境换为 node 的话，还有 I/O 线程与 setImmediate</h5><h3 id="3、为什么说-JS-线程与-GUI-渲染线程互斥（js-代码会阻塞渲染）？"><a href="#3、为什么说-JS-线程与-GUI-渲染线程互斥（js-代码会阻塞渲染）？" class="headerlink" title="3、为什么说 JS 线程与 GUI 渲染线程互斥（js 代码会阻塞渲染）？"></a>3、为什么说 JS 线程与 GUI 渲染线程互斥（js 代码会阻塞渲染）？</h3><p>GUI 渲染线程第一个构建的是 dom 树，js 代码也有可能会修改 dom 结构，一旦修改就会引起 重绘或回流，这就会导致 GUI 线程的再次从头开始。为了避免这样的事情发生所以采用了这种互斥的策略。俩者并不能在同一时间进行。</p><h3 id="4、异步的实现方案-event-loop"><a href="#4、异步的实现方案-event-loop" class="headerlink" title="4、异步的实现方案 - event loop"></a>4、异步的实现方案 - event loop</h3><p>针对于 js 引擎单线程这种情况，为了不让程序（被 http 请求、定时器等）阻塞，所以有了异步的概念。但是在现代 web 程序开发中，代码量越来越大。为了能让越来越多的定时器、事件、请求有序且规范的执行，event loop 方案出现了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'1'</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'2'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'3'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'4'</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'5'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'6'</span>);</span><br></pre></td></tr></table></figure><p>上述代码的执行结果是：1 3 6 4 5 2</p><p>首先介绍 task &amp; microtask：</p><ul><li>task 主要包括：setTimeout、setInterval、setImmediate、I/O、UI交互事件</li><li>microtask 主要包括：Promise、<a href="https://nodejs.org/api/process.html" target="_blank" rel="noopener">process.nextTick</a>、<a href="https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver/observe" target="_blank" rel="noopener">MutationObserver</a>（在node中 process.nextTick 的优先级高于 promise）</li></ul><p>task &amp; microtask 在当前标签页中拥有俩个队列来分别存储 task &amp; microtask除了 js &amp; gui 线程，其他每个线程执行时都会按照 task都有一个异步队列来控制顺序。如下图</p><p><img src="/2018/03/08/Event-Loop总结/i7eo_b879476dd053c59cfd42b8fe4cdfa137.png" alt="Event Loop"></p><p>Event Loop 过程如下：</p><ol><li>整个script代码作为 task 执行时先判断是同步任务还是异步任务</li><li>同步任务依次进入 js 线程，依次执行</li><li>异步任务<strong>先在 table 中注册</strong>，然后<strong>当任务完成时</strong>按照 task/microtask 区分开来，依次进入不同的异步队列</li><li>js 线程执行完毕后（执行栈为空）先读取 microtask 的异步队列，全部执行完毕（队列为空后），再去读取 task 的异步队列，<strong>task 异步队列中的任务若包含 microtask 则再次去读取 microtask 异步队列</strong>。</li><li>上述过程不断重复，直至 task 异步队列为空。整个过程即为 Event Loop。</li></ol><p>还是直接来看代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'1'</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'2'</span>);</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'4'</span>);</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'5'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'7'</span>);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'8'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'9'</span>);</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'11'</span>);</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'12'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>详细过程请参考：</p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/33087629" target="_blank" rel="noopener">Event Loop的规范和实现</a></p></blockquote><p>输出：1 7 8 2 4 5 9 11 12</p><p>那如果执行环境切换为 node，node 的 Event loop的实现与浏览器稍有差异。具体如下：</p><p><img src="/2018/03/08/Event-Loop总结/i7eo_6474957a85872c82bdf475ba406ffe10.png" alt="node - event loop"></p><p>需要注意的是：</p><ul><li>expired timers and intervals queue 这个异步队列专门来存储所有的 setTimeout/setInterval</li><li>immediates queue 这个异步队列专门来存储所有的 setImmediate</li><li>next tick queue 专门来存储所有的 process.nextTick</li><li>node 清空 queue 时会执行所有 task（不论时 task 还是 microtask）</li></ul><p>那么以下代码的结果呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">        resolve()</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">5</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    process.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">7</span>)</span><br><span class="line">    resolve()</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">8</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">process.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">6</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">9</span>)</span><br><span class="line">    process.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">10</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">11</span>)</span><br><span class="line">        resolve()</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">12</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>js 执行栈为空，microtask queue 为空时，去检查 task queue，发现俩个 settimeout 这时<strong>依次执行</strong>。这里与浏览器环境不同，浏览器环境是从 task queue 读出一个 task 先执行，执行完后去检查 microtask queue，而 node 中是一次性执行完 task queue，再去检查 micrtask queue（比如 process.nextTick、promise 等）</p><p>输出：1 7 6 8 2 4 9 11 3 10 5 12</p><p>分析过程请参考：</p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/33087629" target="_blank" rel="noopener">Event Loop的规范和实现</a></p></blockquote><h3 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h3><ul><li>js 是一门单线程语言</li><li>event loop 是 js 的执行机制</li></ul><p>参考资料：</p><ul><li><a href="https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/" target="_blank" rel="noopener">Tasks, microtasks, queues and schedules</a></li><li><a href="https://medium.com/the-node-js-collection/what-you-should-know-to-really-understand-the-node-js-event-loop-and-its-metrics-c4907b19da4c" target="_blank" rel="noopener">What you should know to really understand the Node.js Event Loop</a></li><li><a href="https://jsblog.insiderattack.net/timers-immediates-and-process-nexttick-nodejs-event-loop-part-2-2c53fd511bb3?gi=d90233a38d18" target="_blank" rel="noopener">Timers, Immediates and Process.nextTick</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EventLoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟 Dom 到底是什么？</title>
      <link href="/2018/01/03/vdom.html"/>
      <url>/2018/01/03/vdom.html</url>
      
        <content type="html"><![CDATA[<p>本文为译文，原文地址：</p><blockquote><p><a href="https://bitsofco.de/understanding-the-virtual-dom/" target="_blank" rel="noopener">Understanding the Virtual DOM</a></p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我最近在写一些如何正确区分 dom 与 shadow dom 的文章。总的来说，dom 是HTML文档的基于对象的表示，以及操作该对象的接口。shadow dom 可以被认为是轻量级版本的 dom。它同样是以原生对象为基础的 html document，但是它并不是完整的。可能有些难懂，换一种说法来看，shadow dom 允许我们去将我们的 dom 划分的更小，更轻，可以跨文档使用。（这里作者想表达的意思是我们可以根据需要截取部分 dom 生成 vdom，而不用每次从 html 标签开始写 vdom 直到 html 标签闭合）</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;另一个你可能遇到过的相似说法称 “shadow dom” 为 “virtual DOM”。尽管 …</p><a id="more"></a><p>这个说法已经存在了很多年，但是它真正的流行是在 react 使用它之后。在这篇文章中我将尽力阐述什么是虚拟 dom ，它与原生 dom 又什么不同以及如何使用它。</p><h3 id="我们为什么需要虚拟-dom-？"><a href="#我们为什么需要虚拟-dom-？" class="headerlink" title="我们为什么需要虚拟 dom ？"></a>我们为什么需要虚拟 dom ？</h3><p>想要了解虚拟dom为什么会出现，让我们先回顾以下原生dom。正如我所提到的，dom 是HTML文档的基于对象的表示，以及操作该对象的接口。举个例子看看：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list__item"</span>&gt;</span>List item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以用如下 dom 树来表示：</p><p><img src="/2018/01/03/vdom/i7eo_854852a0e956219a4a2a016470fe6c6c.png" alt=""></p><p>让我们来进行以下操作：</p><ul><li>修改第一个 li 的内容为 list item one</li><li>加上一个 li</li></ul><p>要完成上述操作需要创建新节点，添加新属性与内容，最终完成更新：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> listItemOne = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"list__item"</span>)[<span class="number">0</span>];</span><br><span class="line">listItemOne.textContent = <span class="string">"List item one"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> list = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"list"</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">const</span> listItemTwo = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</span><br><span class="line">listItemTwo.classList.add(<span class="string">"list__item"</span>);</span><br><span class="line">listItemTwo.textContent = <span class="string">"List item two"</span>;</span><br><span class="line">list.appendChild(listItemTwo);</span><br></pre></td></tr></table></figure><h3 id="Dom-并不是为此而生的"><a href="#Dom-并不是为此而生的" class="headerlink" title="Dom 并不是为此而生的"></a>Dom 并不是为此而生的</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当1998年发布DOM的第一个规范时，我们以非常不同的方式构建和管理web页面。很少像今天这样依赖DOM api来创建和更新页面内容。</p><p>像 <code>document.getElementsByClassName()</code> 这个方法小规模使用没有问题，但是如果在同一页面间隔很短的情况下去更新多个元素，就会使对于 dom 的查询与更新操作变得很昂贵。此外，更新文档中较大一部分比更新特定元素的开销会小一些。回到我们列表例子中，从某种程度上来说用新元素替换整个无序列表比修改某个特定元素要简单一些。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"list"</span>)[<span class="number">0</span>];</span><br><span class="line">list.innerHTML = <span class="string">`</span></span><br><span class="line"><span class="string">&lt;li class="list__item"&gt;List item one&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li class="list__item"&gt;List item two&lt;/li&gt;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><p>在这俩个例子中，性能差异并不大。但是随着页面数量的增加，选择、更新我们需要的代码会显得尤为重要。</p><h3 id="虚拟-Dom-因此而出现"><a href="#虚拟-Dom-因此而出现" class="headerlink" title="虚拟 Dom 因此而出现"></a>虚拟 Dom 因此而出现</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;虚拟 Dom 的出现是为了用更加高效的方式来处理频繁更新 dom 所产生的问题。与 dom 和 shadow dom 不同的是，虚拟 dom 不是一种正式的规范，它更像一种与 dom 交互的新方法。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;虚拟 dom 可以被认为是原生 dom 的一个复制品。在这个复制品上我们可以不通过 dom api 就能频繁更新数据。一旦对虚拟DOM进行了所有更新，我们就可以查看需要对原始DOM进行哪些特定更改，并且使这些改变更加具体与优化。</p><h3 id="虚拟-Dom-张什么样呢？"><a href="#虚拟-Dom-张什么样呢？" class="headerlink" title="虚拟 Dom 张什么样呢？"></a>虚拟 Dom 张什么样呢？</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一听到虚拟，可能会觉得有些神秘感。其实虚拟 dom 就是 js 对象。让我们再来回顾先前创建的 dom 树：</p><p><img src="/2018/01/03/vdom/i7eo_854852a0e956219a4a2a016470fe6c6c.png" alt=""></p><p>这个树可以表示为如下 js 对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vdom = &#123;</span><br><span class="line">    tagName: <span class="string">"html"</span>,</span><br><span class="line">    children: [</span><br><span class="line">        &#123; <span class="attr">tagName</span>: <span class="string">"head"</span> &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            tagName: <span class="string">"body"</span>,</span><br><span class="line">            children: [</span><br><span class="line">                &#123;</span><br><span class="line">                    tagName: <span class="string">"ul"</span>,</span><br><span class="line">                    attributes: &#123; <span class="string">"class"</span>: <span class="string">"list"</span> &#125;,</span><br><span class="line">                    children: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            tagName: <span class="string">"li"</span>,</span><br><span class="line">                            attributes: &#123; <span class="string">"class"</span>: <span class="string">"list__item"</span> &#125;,</span><br><span class="line">                            textContent: <span class="string">"List item"</span></span><br><span class="line">                        &#125; <span class="comment">// end li</span></span><br><span class="line">                    ]</span><br><span class="line">                &#125; <span class="comment">// end ul</span></span><br><span class="line">            ]</span><br><span class="line">        &#125; <span class="comment">// end body</span></span><br><span class="line">    ]</span><br><span class="line">&#125; <span class="comment">// end html</span></span><br></pre></td></tr></table></figure><p>我们完全可以把这个 js 对象当作虚拟 dom 。我们可以根据需要自由的频繁操作它而不改变原生 dom。</p><p>相比于使用整个对象，我们通常的做法是使用部分虚拟 dom。举个例子，我们要操作一个 list 组件，这个组件与我们的无序列表元素相关联。具体如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = &#123;</span><br><span class="line">    tagName: <span class="string">"ul"</span>,</span><br><span class="line">    attributes: &#123; <span class="string">"class"</span>: <span class="string">"list"</span> &#125;,</span><br><span class="line">    children: [</span><br><span class="line">        &#123;</span><br><span class="line">            tagName: <span class="string">"li"</span>,</span><br><span class="line">            attributes: &#123; <span class="string">"class"</span>: <span class="string">"list__item"</span> &#125;,</span><br><span class="line">            textContent: <span class="string">"List item"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="虚拟-Dom-如何使用？"><a href="#虚拟-Dom-如何使用？" class="headerlink" title="虚拟 Dom 如何使用？"></a>虚拟 Dom 如何使用？</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;现在我们见识过了虚拟dom的样子，那么它是如何处理dom操作的性能问题？</p><p>正如我所提到的，虚拟 dom 可以专门用来对你需要改变的元素进行操作。（不影响没有改变的元素）让我们重回无序列表的例子。</p><p>第一件事我们应该复制dom来产生虚拟dom，然后对需要改变的元素在虚拟dom中进行改变操作。如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> copy = &#123;</span><br><span class="line">    tagName: <span class="string">"ul"</span>,</span><br><span class="line">    attributes: &#123; <span class="string">"class"</span>: <span class="string">"list"</span> &#125;,</span><br><span class="line">    children: [</span><br><span class="line">        &#123;</span><br><span class="line">            tagName: <span class="string">"li"</span>,</span><br><span class="line">            attributes: &#123; <span class="string">"class"</span>: <span class="string">"list__item"</span> &#125;,</span><br><span class="line">            textContent: <span class="string">"List item one"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            tagName: <span class="string">"li"</span>,</span><br><span class="line">            attributes: &#123; <span class="string">"class"</span>: <span class="string">"list__item"</span> &#125;,</span><br><span class="line">            textContent: <span class="string">"List item two"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个复制出来的虚拟 dom 用来和原生 dom 进行比较，从而把比较出来的差异用创建的 diff 来保存。 diff 是像这个样子的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> diffs = [</span><br><span class="line">    &#123;</span><br><span class="line">        newNode: &#123; <span class="comment">/* new version of list item one */</span> &#125;,</span><br><span class="line">        oldNode: &#123; <span class="comment">/* original version of list item one */</span> &#125;,</span><br><span class="line">        index: <span class="comment">/* index of element in parent's list of child nodes */</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        newNode: &#123; <span class="comment">/* list item two */</span> &#125;,</span><br><span class="line">        index: &#123; <span class="comment">/* */</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这个 diff 提供了一个结构，这个结构可以用来更新原生的 dom。一旦所有的 diff 检测完毕，我们可以对原生 dom 只进行一次更新操作即可。</p><p>在下面的例子中，我们对 diff 进行循环，不论是添加新的元素还是更新旧的元素，我们都可以像下面这样做：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> domElement = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"list"</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">diffs.forEach(<span class="function">(<span class="params">diff</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> newElement = <span class="built_in">document</span>.createElement(diff.newNode.tagName);</span><br><span class="line">    <span class="comment">/* Add attributes ... */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (diff.oldNode) &#123;</span><br><span class="line">        <span class="comment">// If there is an old version, replace it with the new version</span></span><br><span class="line">        domElement.replaceChild(diff.newNode, diff.index);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// If no old version exists, create a new node</span></span><br><span class="line">        domElement.appendChild(diff.newNode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>虚拟dom是让我们与dom交互更加高效的且性能更好一种方法</li><li>虚拟dom是一个js对象，它允许我们对js对象进行频繁的修改</li><li>所有的修改在虚拟dom中结束后，我们可以一次性对原生dom中需要改变的地方进行更新</li></ul><h3 id="附录：snabbdom"><a href="#附录：snabbdom" class="headerlink" title="附录：snabbdom"></a>附录：snabbdom</h3><p>实现 vdom 的库不多，snabbdom 算是佼佼者。vue 中集成了它的核心代码，在每次修改数据后，都会执行函数进行 diff。下面总结一下非框架下vdom的使用方法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn-submit"</span>&gt;</span>change<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.3/snabbdom.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.3/snabbdom-class.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.3/snabbdom-props.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.3/snabbdom-style.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.3/snabbdom-eventlisteners.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.3/h.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上是html结构，引入不同的snabbdom文件是对应解析绑定的事件、属性等。首先使用 <code>patch(c, vnode)</code> 创建无序列表如下：</p><p><img src="/2018/01/03/vdom/i7eo_e5b8b50c2235d093133d181540a27ca4.png" alt=""></p><p>单击按钮再次调用 <code>patch</code> 函数即可生成：</p><p><img src="/2018/01/03/vdom/i7eo_f5991aaaa93507781a69bbf70d507739.png" alt=""></p><p>具体代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> snabbdom = <span class="built_in">window</span>.snabbdom</span><br><span class="line"></span><br><span class="line">      <span class="comment">// init snabbdom</span></span><br><span class="line">      <span class="keyword">let</span> patch = snabbdom.init([</span><br><span class="line">        snabbdom_class,</span><br><span class="line">        snabbdom_props,</span><br><span class="line">        snabbdom_style,</span><br><span class="line">        snabbdom_eventlisteners</span><br><span class="line">      ])</span><br><span class="line"></span><br><span class="line">      <span class="comment">//define h()</span></span><br><span class="line">      <span class="keyword">let</span> h = snabbdom.h</span><br><span class="line">      <span class="keyword">let</span> c = <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>)</span><br><span class="line">      <span class="keyword">let</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn-submit'</span>)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// create vnode</span></span><br><span class="line">      <span class="keyword">let</span> vnode = h(<span class="string">'ul#list'</span>, &#123;&#125;, [</span><br><span class="line">        h(<span class="string">'li.item'</span>, &#123;&#125;, <span class="string">'item1'</span>),</span><br><span class="line">        h(<span class="string">'li.item'</span>, &#123;&#125;, <span class="string">'item2'</span>)</span><br><span class="line">      ])</span><br><span class="line"></span><br><span class="line">      <span class="comment">// first time create vdom and transform it to dom</span></span><br><span class="line">      patch(c, vnode)</span><br><span class="line"></span><br><span class="line">      btn.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</span><br><span class="line">        <span class="comment">// define new node</span></span><br><span class="line">        <span class="keyword">let</span> newNode = h(<span class="string">'ul#list'</span>, &#123;&#125;, [</span><br><span class="line">          h(<span class="string">'li.item'</span>, &#123;&#125;, <span class="string">'item1'</span>),</span><br><span class="line">          h(<span class="string">'li.item'</span>, &#123;&#125;, <span class="string">'item22'</span>),</span><br><span class="line">          h(<span class="string">'li.item'</span>, &#123;&#125;, <span class="string">'item3'</span>)</span><br><span class="line">        ])</span><br><span class="line">        <span class="comment">// find diffs , update diffs into original DOM</span></span><br><span class="line">        patch(vnode, newNode)</span><br><span class="line">        vnode = newNode</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure><p>h 函数的作用是将传入的数据转化为vnode（vnode具体格式参照上述译文中的 copy），patch 函数先判断是否存在 vnode，不存在的话直接将 vnode，生成 dom，插入目标中；若存在进行 diff 算法，找出差异后对原生 dom 进行更新。</p><h3 id="动手模拟-patch-实现过程"><a href="#动手模拟-patch-实现过程" class="headerlink" title="动手模拟 patch 实现过程"></a>动手模拟 patch 实现过程</h3><p>patch 函数有俩种用法：</p><ul><li><code>patch(container, vnode)</code></li><li><code>patch(vnode, newNode)</code></li></ul><p>先来看第一种：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    tag: <span class="string">'ul'</span>,</span><br><span class="line">    attrs: &#123;</span><br><span class="line">        id: <span class="string">'list'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    children: [</span><br><span class="line">        &#123;</span><br><span class="line">            tag: <span class="string">'li'</span>,</span><br><span class="line">            attrs: &#123;</span><br><span class="line">                classname: <span class="string">'item'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            children: [<span class="string">'item1'</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>首先得将vnode转化为html结构，才能加入到container种，那么如何将上述js对象（vnode）转化为 html 呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createEl</span>(<span class="params">vnode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> tag = vnode.tag</span><br><span class="line">    <span class="keyword">let</span> attrs = vnode.attrs || &#123;&#125;</span><br><span class="line">    <span class="keyword">let</span> children = vnode.children || []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!tag) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> el = <span class="built_in">document</span>.createElement(tag)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> attrName <span class="keyword">in</span> attrs) &#123;</span><br><span class="line">        <span class="keyword">if</span>(attrs.hasOwnProperty(attrName))&#123;</span><br><span class="line">            el.setAttribute(attrName, attrs[attrName])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    children.forEach(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">        el.append(createElement(v))</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> el;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大概就是这样，利用递归循环遍历 children，设置 <code>!tag</code> 为终止条件。</p><p>第二种：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    tag: <span class="string">'ul'</span>,</span><br><span class="line">    attrs: &#123;</span><br><span class="line">        id: <span class="string">'list'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    children: [</span><br><span class="line">        &#123;</span><br><span class="line">            tag: <span class="string">'li'</span>,</span><br><span class="line">            attrs: &#123;</span><br><span class="line">                classname: <span class="string">'item'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            children: [<span class="string">'item12'</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            tag: <span class="string">'li'</span>,</span><br><span class="line">            attrs: &#123;</span><br><span class="line">                classname: <span class="string">'item'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            children: [<span class="string">'item2'</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>item 12<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里我们想要将列表更新为上述结构，使用 <code>patch(vnode, newNode)</code> 方法，这个方法中肯定是要不断的去对比，不断的对比children肯定还会用到递归，模拟代码（只考虑最简单的情况）如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateEl</span>(<span class="params">vnode, newNode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> children = vnode.children || []</span><br><span class="line">    <span class="keyword">let</span> newChildren = newNode.children || []</span><br><span class="line"></span><br><span class="line">    children.forEach(<span class="function">(<span class="params">child, idx</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> newChild = newChildren[idx]</span><br><span class="line">        <span class="keyword">if</span>(newChild === <span class="literal">null</span>) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">if</span>(child.tag === newChild.tag) &#123;</span><br><span class="line">            <span class="comment">// the same tag</span></span><br><span class="line">            updateEl(child, newChild)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// the different tag</span></span><br><span class="line">            replaceNode(child, newChild)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟Dom </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac下利用Alfred与七牛搭建markdown图床</title>
      <link href="/2017/11/03/Mac%E4%B8%8B%E5%88%A9%E7%94%A8Alfred%E4%B8%8E%E4%B8%83%E7%89%9B%E6%90%AD%E5%BB%BAmarkdown%E5%9B%BE%E5%BA%8A.html"/>
      <url>/2017/11/03/Mac%E4%B8%8B%E5%88%A9%E7%94%A8Alfred%E4%B8%8E%E4%B8%83%E7%89%9B%E6%90%AD%E5%BB%BAmarkdown%E5%9B%BE%E5%BA%8A.html</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在使用hexo与gitpage完成个人博客搭建后，在写博客时想插入图片总是需要外链，感觉很繁琐。刚好在利用alfred的workflow后觉得能不能把整套手动获取图片外链的动作变成自动化的动作，来用热键触发。搜了下相关的文章自己踩了不少坑最终还是完成了，总结出来避免大家后面踩坑。</p><h3 id="前期准备："><a href="#前期准备：" class="headerlink" title="前期准备："></a>前期准备：</h3><ul><li>可以使用workflow的alfred（能支持正版最好不过我还是准备了链接，位置在文章最后）</li></ul><a id="more"></a><ul><li>七牛账号&amp;七牛自动化工具qshell</li><li>截图工具（这个也可以没有，可以利用电脑自带的截图功能，只要保证截图动作后的结果处于剪切板中即可）</li></ul><h3 id="第一部分：（七牛操作）"><a href="#第一部分：（七牛操作）" class="headerlink" title="第一部分：（七牛操作）"></a>第一部分：（七牛操作）</h3><h4 id="第一步："><a href="#第一步：" class="headerlink" title="第一步："></a>第一步：</h4><p>注册成功登陆后，单击 管理控制台 -&gt; 对象存储 -&gt; 内容管理 找到外链默认域名，复制并保存。</p><h4 id="第二步："><a href="#第二步：" class="headerlink" title="第二步："></a>第二步：</h4><p>返回首页，单击 服务与支持 -&gt; 开发者中心 -&gt; sdk与工具 -&gt; 开发者工具 -&gt; qshell 进入后按照提示下载并安装。</p><h4 id="第三步："><a href="#第三步：" class="headerlink" title="第三步："></a>第三步：</h4><p>创建账户时，除了ak&amp;sk 现在还需要输入七牛账户名；配置upload.conf文件时需要注意如果本地新增文件七牛默认不会自动检查，你需要设置 rescan_local: true ;如果你在七牛空间（web页）中手动删除某个文件，再次上传该文件的时候七牛默认该文件已经存在空间中，不会再上传该文件，你需要配置 check_exists: true 。</p><h3 id="第二部分：（alfred-workflow操作）"><a href="#第二部分：（alfred-workflow操作）" class="headerlink" title="第二部分：（alfred workflow操作）"></a>第二部分：（alfred workflow操作）</h3><h4 id="第一步：-1"><a href="#第一步：-1" class="headerlink" title="第一步："></a>第一步：</h4><p><img src="/2017/11/03/Mac下利用Alfred与七牛搭建markdown图床/i7eo_6ae05412c45cd93d76aee7dfc829ee6d.png" alt=""></p><p>点击 + ，创建blank workflow即可，注意bundle id必填一个唯一值，能够在alfred中标示你这个workflow即可，其余选项正常填写，category默认选项即可。</p><h4 id="第二步：-1"><a href="#第二步：-1" class="headerlink" title="第二步："></a>第二步：</h4><p><img src="/2017/11/03/Mac下利用Alfred与七牛搭建markdown图床/i7eo_67ef692bcaa2e05863e0aed092834efd.png" alt=""></p><p>创建热键hotkey，其余默认选项不变，完成后save。</p><p><img src="/2017/11/03/Mac下利用Alfred与七牛搭建markdown图床/i7eo_959e803647132d100867bf95fd3f2b97.png" alt=""></p><p>创建热键触发后需要执行的脚本文件，当然run script创建的脚本是后台运行不需要先调出terminal（控制台），如果需要调出terminal（控制台），选择terminal command。<br>根据脚本语言对应选择language，这里提供一个as版本代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">property fileTypes : &#123;¬</span><br><span class="line">    &#123;«class PNGf», ".png"&#125;, ¬</span><br><span class="line">    &#123;JPEG picture, <span class="string">".jpg"</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">on getType() --判断剪贴板中的数据类型，暂时只支持png和jpg，优先用png</span><br><span class="line">    repeat <span class="keyword">with</span> aType <span class="keyword">in</span> fileTypes</span><br><span class="line">        repeat <span class="keyword">with</span> theInfo <span class="keyword">in</span> (clipboard info)</span><br><span class="line">            <span class="keyword">if</span> (first item <span class="keyword">of</span> theInfo) is equal to (first item <span class="keyword">of</span> aType) then <span class="keyword">return</span> aType</span><br><span class="line">        end repeat</span><br><span class="line">    end repeat</span><br><span class="line">    <span class="keyword">return</span> missing value</span><br><span class="line">end getType</span><br><span class="line"></span><br><span class="line">set theType to getType()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> theType is not missing value then</span><br><span class="line">    set filePath to <span class="string">"/Users/xxx/Documents/screenCaptures/"</span> --这里换成你自己放置图片的路径</span><br><span class="line">    set fileName to <span class="keyword">do</span> shell script <span class="string">"date \"+%Y%m%d%H%M%S\" | md5"</span> --用当前时间的md5值做文件名</span><br><span class="line">set prefix to <span class="string">"i7eo_"</span> -- 改成自己的前缀</span><br><span class="line">    <span class="keyword">if</span> fileName does not end <span class="keyword">with</span> (second item <span class="keyword">of</span> theType) then set fileName to (fileName &amp; second item <span class="keyword">of</span> theType <span class="keyword">as</span> text)</span><br><span class="line">    set markdownUrl to <span class="string">"![截图](http://xxx.com/i7eo_"</span> &amp; fileName &amp; <span class="string">")"</span> --这里如果没有用到图床，就把前面前缀去掉，用到的话换成你自己图床的url</span><br><span class="line">    set filePath to filePath &amp; prefix &amp; fileName</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">        set imageFile to (open <span class="keyword">for</span> access filePath <span class="keyword">with</span> write permission)</span><br><span class="line">        set eof imageFile to <span class="number">0</span></span><br><span class="line">        write (the clipboard <span class="keyword">as</span> (first item <span class="keyword">of</span> theType)) to imageFile -- <span class="keyword">as</span> whatever</span><br><span class="line">        close access imageFile</span><br><span class="line">        set the clipboard to markdownUrl</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">            tell application <span class="string">"System Events"</span></span><br><span class="line">                keystroke <span class="string">"v"</span> using command down</span><br><span class="line">            end tell</span><br><span class="line">        end <span class="keyword">try</span></span><br><span class="line">    on error</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">            close access imageFile</span><br><span class="line">        end <span class="keyword">try</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">    end <span class="keyword">try</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">end <span class="keyword">if</span></span><br></pre></td></tr></table></figure></p><p>把 <code>http://xxx.com/</code><br>改为之前从七牛默认外链处复制出来的地址。</p><h4 id="第三步：-1"><a href="#第三步：-1" class="headerlink" title="第三步："></a>第三步：</h4><p>再次创建一个blank workflow，热键自己设置；再次创建一个as脚本，具体代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> shell script <span class="string">"/usr/local/bin/qshell qupload ~/.qshell/upload.conf"</span></span><br></pre></td></tr></table></figure></p><p>把qupload前的路径换成自己存放七牛qshell文件的位置。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个方法适合写博客时，把该篇博客需要的图片都存放在同一个文件下，写完后一次性上传至七牛空间。然后在把博客推至gitpage即可。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果想每次插入一张图片就上传，可以使用插件 <a href="https://github.com/jiwenxing/qimage-mac" target="_blank" rel="noopener">Mac 版本的 Markdown 一键贴图工具</a></p><p><a href="https://www.jianshu.com/p/5b3f98b1f7b6" target="_blank" rel="noopener">alfred3 Powerpack</a></p>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Alfred3 workflow </tag>
            
            <tag> 图床 </tag>
            
            <tag> qshell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为git page开通https踩坑实录</title>
      <link href="/2017/10/01/%E4%B8%BAgitPages%E5%BC%80%E9%80%9Ahttps%E8%B8%A9%E5%9D%91%E5%AE%9E%E5%BD%95.html"/>
      <url>/2017/10/01/%E4%B8%BAgitPages%E5%BC%80%E9%80%9Ahttps%E8%B8%A9%E5%9D%91%E5%AE%9E%E5%BD%95.html</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;利用hexo与gitpage开通博客后，无论是pc&amp;mobile登陆时总会发现地址栏前有个感叹号。强迫症表示真的看不下去，所以就去了解了下https。</p><h3 id="HTTPS的优点"><a href="#HTTPS的优点" class="headerlink" title="HTTPS的优点"></a>HTTPS的优点</h3><ul><li>了解到https是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。</li><li>最重要的一点，https可以避免dns挟持，就是可以避免在浏览网页时出现一些小广告弹窗！</li></ul><a id="more"></a><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;结合自己的代码发现引用的图片全是http协议下的，而且在input（即使type≠keyword）输入内容时感叹号变成了红字叉。我所用的是阿里的域名所以去网站查询https的信息，发现有免费的赛门铁克（Symantec）证书试用。果断申请后，发现：</p><h3 id="gitPages注意事项"><a href="#gitPages注意事项" class="headerlink" title="gitPages注意事项"></a>gitPages注意事项</h3><ul><li>git page自带https，在对应rep的设置中，点击 Enforce HTTPS 即可。</li><li>git page绑定自定义域名后无法添加ssl证书。<br>这个时候有点懵了，不过检索多次相关关键字后，发现了cloudflare这个好东西。大概了解了下后就确定用它了，好处如下：</li></ul><h3 id="安利cloudflare的原因"><a href="#安利cloudflare的原因" class="headerlink" title="安利cloudflare的原因"></a>安利cloudflare的原因</h3><ul><li>有免费套</li><li>cloudflare的dns服务器风评还是不错的<br>-cloudflare提供 Universal SSL 服务，简单来说就是让任意http站点支持https。<br>  （具体原理指的是，用cloudflare的dns服务器，当你访问网页时，网页 -&gt; cloudflare 这个过程是加密的，而 cloudflare -&gt; git page这个过程是非加密（http））</li></ul><p>具体可参考官方文档：<a href="https://support.cloudflare.com/hc/en-us/articles/200170416" target="_blank" rel="noopener"> how Cloudflare’s servers connect to your origin for HTTPS requests</a></p><h3 id="cloudflare配置的具体步骤"><a href="#cloudflare配置的具体步骤" class="headerlink" title="cloudflare配置的具体步骤"></a>cloudflare配置的具体步骤</h3><h4 id="第一步：设置dns"><a href="#第一步：设置dns" class="headerlink" title="第一步：设置dns"></a>第一步：设置dns</h4><p>把自己对应的dns服务器改为cloudflare的，下面以阿里来举例。阿里云 -&gt; 域名 -&gt; 管理 -&gt; 修改dns，出现一下界面：</p><p><img src="为gitPages开通https踩坑实录/i7eo_4436910aa5b1e131037aa2f6007f7d23.png" alt=""></p><p>这是我已经修改后的，单击右边的修改dns服务器即可，把cloudflare给出的俩个dns地址换上来就好。cloudflare给出的dns地址位于：cloudflare -&gt; dns -&gt; Cloudflare Nameservers。</p><p>如何判断更换dns成功？<br>回到cloudflare后，单击overview，如果成功会出现：</p><p><img src="为gitPages开通https踩坑实录/i7eo_be5528c7b4f28ce887136746b5de2d03.png" alt=""></p><h4 id="第二步：设置dns信息"><a href="#第二步：设置dns信息" class="headerlink" title="第二步：设置dns信息"></a>第二步：设置dns信息</h4><p>cloudflare -&gt; dns -&gt; DNS Records 如果这里没设置时有记录先删除，新增一条记录:</p><p><img src="为gitPages开通https踩坑实录/i7eo_a726bae253f790060294d739a7ea706f.png" alt=""></p><h4 id="第三步：设置ssl-amp-强制跳转"><a href="#第三步：设置ssl-amp-强制跳转" class="headerlink" title="第三步：设置ssl&amp;强制跳转"></a>第三步：设置ssl&amp;强制跳转</h4><p>cloudflare -&gt; crypto -&gt; SSL 勾选flexible</p><p>cloudflare -&gt; crypto -&gt; Always Use HTTPS 勾选on</p><h4 id="第四步：坐等-amp-排错"><a href="#第四步：坐等-amp-排错" class="headerlink" title="第四步：坐等&amp;排错"></a>第四步：坐等&amp;排错</h4><p>大概10mins - 30mins左右就会生效，可以在等待的时候使用ping命令来ping个人的域名查看ip。</p><p>如果你的博客出现以下情况：</p><p><img src="为gitPages开通https踩坑实录/i7eo_65772c9053e1e9b5a941fa515bc3c3f5.png" alt=""></p><p>检查gitpage的设置，取消掉勾选的Enforce HTTPS选项，这个设置是有缓存的</p><p><img src="为gitPages开通https踩坑实录/i7eo_ee6b38aa59be590bd6736c90911683a4.png" alt=""></p><p>可以切换source或者theme chooser这样可以清理掉缓存的Enforce HTTPS选项信息。</p><p>参考文章：</p><p><a href="https://steffan.cn/2017/03/22/use-cloudflare-to-implement-HTTPS-for-GithubPages-with-custom-domain-names/" target="_blank" rel="noopener">使用Cloudflare为自定义域名的GithubPages实现HTTPS化</a></p><p><a href="https://www.heartnn.com/2018/11/17/resolve-err-too-many-redirects-on-cloudflare/" target="_blank" rel="noopener">解决Cloudflare产生的“ERR_TOO_MANY_REDIRECTS”错误</a></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cloudflare </tag>
            
            <tag> https </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
