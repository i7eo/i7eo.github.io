<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue 的响应式/模版解析/渲染</title>
      <link href="/2019/01/03/vuesc.html"/>
      <url>/2019/01/03/vuesc.html</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于使用 vue 的同学来说，响应式、模版解析/渲染应该都很熟悉，vue 开发离不开这些特性。用了 vue 挺长时间了，写写总结。</p><h3 id="响应式"><a href="#响应式" class="headerlink" title="响应式"></a>响应式</h3><p>创建一个普通的对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> t = &#123;</span><br><span class="line">    name: <span class="string">'t1'</span></span><br><span class="line">    age: <span class="number">19</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(t.age) <span class="comment">// 19 那么如何监听age属性的访问与设置呢？</span></span><br></pre></td></tr></table></figure><p>在es5中加入了一个api叫 Object.defineProperty,该api允许</p><a id="more"></a><p>创建对象的属性自定义 get/set 函数。修改上面代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> t = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> name = <span class="string">'t1'</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">'name'</span>, &#123;</span><br><span class="line">get() &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'get'</span>)</span><br><span class="line"><span class="keyword">return</span> name</span><br><span class="line">&#125;,</span><br><span class="line">set(newVal) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'set'</span>)</span><br><span class="line">name = newVal</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(obj.name)</span><br><span class="line"><span class="comment">// get</span></span><br><span class="line"><span class="comment">// t1</span></span><br><span class="line">obj.name = <span class="string">'george'</span></span><br><span class="line"><span class="comment">// set</span></span><br></pre></td></tr></table></figure><p>在vue中我们可以模拟一下，大概过程如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> vm = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">    name: <span class="string">'lyn'</span>,</span><br><span class="line">    age: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">in</span> data) &#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(vm, v, &#123;</span><br><span class="line">            get() &#123;</span><br><span class="line">        <span class="keyword">return</span> data[v]</span><br><span class="line">        &#125;,</span><br><span class="line">        set(newVal) &#123;</span><br><span class="line">        data[v] = newVal</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)(v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么要将data的值全部代理至vm对象上？vue中就是这么写的 …，而且模版解析的时候会用到。</p><h3 id="模板解析"><a href="#模板解析" class="headerlink" title="模板解析"></a>模板解析</h3><p>我们经常在vue中使用vue模板，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">  &lt;input v-model=<span class="string">"title"</span>&gt;</span><br><span class="line">  &lt;button @click=<span class="string">"add"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;ul&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li v-for="v in list"&gt;&#123;&#123; v &#125;&#125;&lt;/</span>li&gt;</span><br><span class="line">&lt;<span class="regexp">/ul&gt;</span></span><br></pre></td></tr></table></figure><p>模板的本质是字符串，其特点有：</p><ul><li>包含 if/for 等逻辑指令</li><li>动态的（动态生成 dom ）</li><li>最终转换为 html</li></ul><p>综上，要将模板转换为 html ，只能使用 js 来操作。在 html/css/js 中，只有js能处理逻辑和渲染页面。</p><p>在当前文件引入vue文件，打开控制台，在源码中搜索code.render 在 return 前打印 code.render，观察模板被解析后生成的render函数，render函数最终返回vnode。如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span>(<span class="keyword">this</span>)&#123;  <span class="comment">// this 就是 vm</span></span><br><span class="line">    <span class="keyword">return</span> _c(</span><br><span class="line">        <span class="string">'div'</span>,</span><br><span class="line">        &#123;</span><br><span class="line">            attrs:&#123;<span class="string">"id"</span>:<span class="string">"app"</span>&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        [_c(</span><br><span class="line">            <span class="string">'div'</span>,</span><br><span class="line">            [</span><br><span class="line">                _c(</span><br><span class="line">                    <span class="string">'input'</span>,</span><br><span class="line">                    &#123;</span><br><span class="line">                        directives:[</span><br><span class="line">                        &#123;</span><br><span class="line">                       name:<span class="string">"model"</span>,</span><br><span class="line">                       rawName:<span class="string">"v-model"</span>,</span><br><span class="line">                       value:(title),  <span class="comment">// vm.title 在这里就将model中的的值通过vm与view中的input数据联系了起来</span></span><br><span class="line">                       expression:<span class="string">"title"</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        ],</span><br><span class="line">                        domProps:&#123;</span><br><span class="line">                            <span class="string">"value"</span>:(title)</span><br><span class="line">                        &#125;,</span><br><span class="line">                        on:&#123;</span><br><span class="line">                            <span class="string">"input"</span>:<span class="function"><span class="keyword">function</span>(<span class="params">$event</span>)</span>&#123;</span><br><span class="line">                          <span class="comment">// 在这里可以发现v-model 其实在vue模版内被封装了进去</span></span><br><span class="line">                                <span class="keyword">if</span>($event.target.composing)<span class="keyword">return</span>;</span><br><span class="line">                                title=$event.target.value</span><br><span class="line">                                在这里就将view中的input中的值通过vm与model中的数据联系了起来与上面相对应实现双向绑定</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ),</span><br><span class="line">                _v(<span class="string">" "</span>),</span><br><span class="line">                <span class="comment">// 因为html中俩个标签间我们换行所以这里是空</span></span><br><span class="line">                _c(</span><br><span class="line">                    <span class="string">'button'</span>,</span><br><span class="line">                    &#123;</span><br><span class="line">                        on:&#123;</span><br><span class="line">                            <span class="string">"click"</span>:add</span><br><span class="line">                            <span class="comment">// 相当于 vm.add这里直接调用methods中定义的add函数</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    [_v(<span class="string">"submit"</span>)]</span><br><span class="line">                )</span><br><span class="line">            ]),</span><br><span class="line">        _v(<span class="string">" "</span>),</span><br><span class="line">        _c(<span class="string">'div'</span>,</span><br><span class="line">            [</span><br><span class="line">                _c(</span><br><span class="line">                    <span class="string">'ul'</span>,</span><br><span class="line">                   <span class="comment">//v-for这里使用内部定义的 _l函数来处理</span></span><br><span class="line">                    _l((list),<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;<span class="keyword">return</span> _c(<span class="string">'li'</span>,[_v(_s(item))])&#125;)</span><br><span class="line">                )</span><br><span class="line">            ]</span><br><span class="line">        )]</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>_c 创建标签，_v创建文本元素，_s toString()，这个_c 和 snabbdom 中的 h 函数很像，那vue中更新的操作会不会和 snabbdom 中的逻辑页相似呢？<br>vue 中的更新函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vm._update(vnode) &#123;</span><br><span class="line">    <span class="keyword">const</span> prevNode = vm._vnode</span><br><span class="line">    vm._node = vnode</span><br><span class="line">    <span class="keyword">if</span>(!prevNode) &#123;</span><br><span class="line">        vm.$el = vm.__patch___(vm.$el, vnode)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        vm.$el = vm.__patch__(prevNode, vnode)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateComponent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    vm._update(vm._render())</span><br><span class="line">    <span class="comment">// vm._render 即生成上面包含 _c/_v/_s的模板解析函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说每次改变data，通过Object.defineProperty监听修改操作，一旦修改就调用 updateComponent 函数，利用vm._render方法生成新的 vnode。通过 vm._patch_ 将vnode转化为html并更新至原生dom中。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>解析模板生成render函数</li><li>响应式开始监听</li><li>首次渲染，显示页面且绑定依赖</li><li>data属性变化，再次渲染</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vuejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模版解析 </tag>
            
            <tag> render 函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>译文：Understanding the Virtual DOM</title>
      <link href="/2019/01/01/vdom.html"/>
      <url>/2019/01/01/vdom.html</url>
      
        <content type="html"><![CDATA[<p>本文为译文，原文地址：</p><blockquote><p><a href="https://bitsofco.de/understanding-the-virtual-dom/" target="_blank" rel="noopener">Understanding the Virtual DOM</a></p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我最近在写一些如何正确区分 dom 与 shadow dom 的文章。总的来说，dom 是HTML文档的基于对象的表示，以及操作该对象的接口。shadow dom 可以被认为是轻量级版本的 dom。它同样是以原生对象为基础的 html document，但是它并不是完整的。可能有些难懂，换一种说法来看，shadow dom 允许我们去将我们的 dom 划分的更小，更轻，可以跨文档使用。（这里作者想表达的意思是我们可以根据需要截取部分 dom 生成 vdom，而不用每次从 html 标签开始写 vdom 直到 html 标签闭合）</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;另一个你可能遇到过的相似说法称 “shadow dom” 为 “virtual DOM”。尽管</p><a id="more"></a><p>这个说法已经存在了很多年，但是它真正的流行是在 react 使用它之后。在这篇文章中我将尽力阐述什么是虚拟 dom ，它与原生 dom 又什么不同以及如何使用它。</p><h3 id="我们为什么需要虚拟-dom-？"><a href="#我们为什么需要虚拟-dom-？" class="headerlink" title="我们为什么需要虚拟 dom ？"></a>我们为什么需要虚拟 dom ？</h3><p>想要了解虚拟dom为什么会出现，让我们先回顾以下原生dom。正如我所提到的，dom 是HTML文档的基于对象的表示，以及操作该对象的接口。举个例子看看：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list__item"</span>&gt;</span>List item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以用如下 dom 树来表示：</p><p><img src="/2019/01/01/vdom/i7eo_854852a0e956219a4a2a016470fe6c6c.png" alt=""></p><p>让我们来进行以下操作：</p><ul><li>修改第一个 li 的内容为 list item one</li><li>加上一个 li</li></ul><p>要完成上述操作需要创建新节点，添加新属性与内容，最终完成更新：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> listItemOne = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"list__item"</span>)[<span class="number">0</span>];</span><br><span class="line">listItemOne.textContent = <span class="string">"List item one"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> list = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"list"</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">const</span> listItemTwo = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</span><br><span class="line">listItemTwo.classList.add(<span class="string">"list__item"</span>);</span><br><span class="line">listItemTwo.textContent = <span class="string">"List item two"</span>;</span><br><span class="line">list.appendChild(listItemTwo);</span><br></pre></td></tr></table></figure><h3 id="Dom-并不是为此而生的"><a href="#Dom-并不是为此而生的" class="headerlink" title="Dom 并不是为此而生的"></a>Dom 并不是为此而生的</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当1998年发布DOM的第一个规范时，我们以非常不同的方式构建和管理web页面。很少像今天这样依赖DOM api来创建和更新页面内容。</p><p>像 <code>document.getElementsByClassName()</code> 这个方法小规模使用没有问题，但是如果在同一页面间隔很短的情况下去更新多个元素，就会使对于 dom 的查询与更新操作变得很昂贵。此外，更新文档中较大一部分比更新特定元素的开销会小一些。回到我们列表例子中，从某种程度上来说用新元素替换整个无序列表比修改某个特定元素要简单一些。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"list"</span>)[<span class="number">0</span>];</span><br><span class="line">list.innerHTML = <span class="string">`</span></span><br><span class="line"><span class="string">&lt;li class="list__item"&gt;List item one&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li class="list__item"&gt;List item two&lt;/li&gt;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><p>在这俩个例子中，性能差异并不大。但是随着页面数量的增加，选择、更新我们需要的代码会显得尤为重要。</p><h3 id="虚拟-Dom-因此而出现"><a href="#虚拟-Dom-因此而出现" class="headerlink" title="虚拟 Dom 因此而出现"></a>虚拟 Dom 因此而出现</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;虚拟 Dom 的出现是为了用更加高效的方式来处理频繁更新 dom 所产生的问题。与 dom 和 shadow dom 不同的是，虚拟 dom 不是一种正式的规范，它更像一种与 dom 交互的新方法。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;虚拟 dom 可以被认为是原生 dom 的一个复制品。在这个复制品上我们可以不通过 dom api 就能频繁更新数据。一旦对虚拟DOM进行了所有更新，我们就可以查看需要对原始DOM进行哪些特定更改，并且使这些改变更加具体与优化。</p><h3 id="虚拟-Dom-张什么样呢？"><a href="#虚拟-Dom-张什么样呢？" class="headerlink" title="虚拟 Dom 张什么样呢？"></a>虚拟 Dom 张什么样呢？</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一听到虚拟，可能会觉得有些神秘感。其实虚拟 dom 就是 js 对象。让我们再来回顾先前创建的 dom 树：</p><p><img src="/2019/01/01/vdom/i7eo_854852a0e956219a4a2a016470fe6c6c.png" alt=""></p><p>这个树可以表示为如下 js 对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vdom = &#123;</span><br><span class="line">    tagName: <span class="string">"html"</span>,</span><br><span class="line">    children: [</span><br><span class="line">        &#123; <span class="attr">tagName</span>: <span class="string">"head"</span> &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            tagName: <span class="string">"body"</span>,</span><br><span class="line">            children: [</span><br><span class="line">                &#123;</span><br><span class="line">                    tagName: <span class="string">"ul"</span>,</span><br><span class="line">                    attributes: &#123; <span class="string">"class"</span>: <span class="string">"list"</span> &#125;,</span><br><span class="line">                    children: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            tagName: <span class="string">"li"</span>,</span><br><span class="line">                            attributes: &#123; <span class="string">"class"</span>: <span class="string">"list__item"</span> &#125;,</span><br><span class="line">                            textContent: <span class="string">"List item"</span></span><br><span class="line">                        &#125; <span class="comment">// end li</span></span><br><span class="line">                    ]</span><br><span class="line">                &#125; <span class="comment">// end ul</span></span><br><span class="line">            ]</span><br><span class="line">        &#125; <span class="comment">// end body</span></span><br><span class="line">    ]</span><br><span class="line">&#125; <span class="comment">// end html</span></span><br></pre></td></tr></table></figure><p>我们完全可以把这个 js 对象当作虚拟 dom 。我们可以根据需要自由的频繁操作它而不改变原生 dom。</p><p>相比于使用整个对象，我们通常的做法是使用部分虚拟 dom。举个例子，我们要操作一个 list 组件，这个组件与我们的无序列表元素相关联。具体如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = &#123;</span><br><span class="line">    tagName: <span class="string">"ul"</span>,</span><br><span class="line">    attributes: &#123; <span class="string">"class"</span>: <span class="string">"list"</span> &#125;,</span><br><span class="line">    children: [</span><br><span class="line">        &#123;</span><br><span class="line">            tagName: <span class="string">"li"</span>,</span><br><span class="line">            attributes: &#123; <span class="string">"class"</span>: <span class="string">"list__item"</span> &#125;,</span><br><span class="line">            textContent: <span class="string">"List item"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="虚拟-Dom-如何使用？"><a href="#虚拟-Dom-如何使用？" class="headerlink" title="虚拟 Dom 如何使用？"></a>虚拟 Dom 如何使用？</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;现在我们见识过了虚拟dom的样子，那么它是如何处理dom操作的性能问题？</p><p>正如我所提到的，虚拟 dom 可以专门用来对你需要改变的元素进行操作。（不影响没有改变的元素）让我们重回无序列表的例子。</p><p>第一件事我们应该复制dom来产生虚拟dom，然后对需要改变的元素在虚拟dom中进行改变操作。如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> copy = &#123;</span><br><span class="line">    tagName: <span class="string">"ul"</span>,</span><br><span class="line">    attributes: &#123; <span class="string">"class"</span>: <span class="string">"list"</span> &#125;,</span><br><span class="line">    children: [</span><br><span class="line">        &#123;</span><br><span class="line">            tagName: <span class="string">"li"</span>,</span><br><span class="line">            attributes: &#123; <span class="string">"class"</span>: <span class="string">"list__item"</span> &#125;,</span><br><span class="line">            textContent: <span class="string">"List item one"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            tagName: <span class="string">"li"</span>,</span><br><span class="line">            attributes: &#123; <span class="string">"class"</span>: <span class="string">"list__item"</span> &#125;,</span><br><span class="line">            textContent: <span class="string">"List item two"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个复制出来的虚拟 dom 用来和原生 dom 进行比较，从而把比较出来的差异用创建的 diff 来保存。 diff 是像这个样子的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> diffs = [</span><br><span class="line">    &#123;</span><br><span class="line">        newNode: &#123; <span class="comment">/* new version of list item one */</span> &#125;,</span><br><span class="line">        oldNode: &#123; <span class="comment">/* original version of list item one */</span> &#125;,</span><br><span class="line">        index: <span class="comment">/* index of element in parent's list of child nodes */</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        newNode: &#123; <span class="comment">/* list item two */</span> &#125;,</span><br><span class="line">        index: &#123; <span class="comment">/* */</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这个 diff 提供了一个结构，这个结构可以用来更新原生的 dom。一旦所有的 diff 检测完毕，我们可以对原生 dom 只进行一次更新操作即可。</p><p>在下面的例子中，我们对 diff 进行循环，不论是添加新的元素还是更新旧的元素，我们都可以像下面这样做：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> domElement = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"list"</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">diffs.forEach(<span class="function">(<span class="params">diff</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> newElement = <span class="built_in">document</span>.createElement(diff.newNode.tagName);</span><br><span class="line">    <span class="comment">/* Add attributes ... */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (diff.oldNode) &#123;</span><br><span class="line">        <span class="comment">// If there is an old version, replace it with the new version</span></span><br><span class="line">        domElement.replaceChild(diff.newNode, diff.index);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// If no old version exists, create a new node</span></span><br><span class="line">        domElement.appendChild(diff.newNode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>虚拟dom是让我们与dom交互更加高效的且性能更好一种方法</li><li>虚拟dom是一个js对象，它允许我们对js对象进行频繁的修改</li><li>所有的修改在虚拟dom中结束后，我们可以一次性对原生dom中需要改变的地方进行更新</li></ul><h3 id="附录：snabbdom"><a href="#附录：snabbdom" class="headerlink" title="附录：snabbdom"></a>附录：snabbdom</h3><p>实现 vdom 的库不多，snabbdom 算是佼佼者。vue 中集成了它的核心代码，在每次修改数据后，都会执行函数进行 diff。下面总结一下非框架下vdom的使用方法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn-submit"</span>&gt;</span>change<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.3/snabbdom.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.3/snabbdom-class.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.3/snabbdom-props.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.3/snabbdom-style.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.3/snabbdom-eventlisteners.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.3/h.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上是html结构，引入不同的snabbdom文件是对应解析绑定的事件、属性等。首先使用 <code>patch(c, vnode)</code> 创建无序列表如下：</p><p><img src="/2019/01/01/vdom/i7eo_e5b8b50c2235d093133d181540a27ca4.png" alt=""></p><p>单击按钮再次调用 <code>patch</code> 函数即可生成：</p><p><img src="/2019/01/01/vdom/i7eo_f5991aaaa93507781a69bbf70d507739.png" alt=""></p><p>具体代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> snabbdom = <span class="built_in">window</span>.snabbdom</span><br><span class="line"></span><br><span class="line">      <span class="comment">// init snabbdom</span></span><br><span class="line">      <span class="keyword">let</span> patch = snabbdom.init([</span><br><span class="line">        snabbdom_class,</span><br><span class="line">        snabbdom_props,</span><br><span class="line">        snabbdom_style,</span><br><span class="line">        snabbdom_eventlisteners</span><br><span class="line">      ])</span><br><span class="line"></span><br><span class="line">      <span class="comment">//define h()</span></span><br><span class="line">      <span class="keyword">let</span> h = snabbdom.h</span><br><span class="line">      <span class="keyword">let</span> c = <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>)</span><br><span class="line">      <span class="keyword">let</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn-submit'</span>)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// create vnode</span></span><br><span class="line">      <span class="keyword">let</span> vnode = h(<span class="string">'ul#list'</span>, &#123;&#125;, [</span><br><span class="line">        h(<span class="string">'li.item'</span>, &#123;&#125;, <span class="string">'item1'</span>),</span><br><span class="line">        h(<span class="string">'li.item'</span>, &#123;&#125;, <span class="string">'item2'</span>)</span><br><span class="line">      ])</span><br><span class="line"></span><br><span class="line">      <span class="comment">// first time create vdom and transform it to dom</span></span><br><span class="line">      patch(c, vnode)</span><br><span class="line"></span><br><span class="line">      btn.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</span><br><span class="line">        <span class="comment">// define new node</span></span><br><span class="line">        <span class="keyword">let</span> newNode = h(<span class="string">'ul#list'</span>, &#123;&#125;, [</span><br><span class="line">          h(<span class="string">'li.item'</span>, &#123;&#125;, <span class="string">'item1'</span>),</span><br><span class="line">          h(<span class="string">'li.item'</span>, &#123;&#125;, <span class="string">'item22'</span>),</span><br><span class="line">          h(<span class="string">'li.item'</span>, &#123;&#125;, <span class="string">'item3'</span>)</span><br><span class="line">        ])</span><br><span class="line">        <span class="comment">// find diffs , update diffs into original DOM</span></span><br><span class="line">        patch(vnode, newNode)</span><br><span class="line">        vnode = newNode</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure><p>h 函数的作用是将传入的数据转化为vnode（vnode具体格式参照上述译文中的 copy），patch 函数先判断是否存在 vnode，不存在的话直接将 vnode，生成 dom，插入目标中；若存在进行 diff 算法，找出差异后对原生 dom 进行更新。</p><h3 id="动手模拟-patch-实现过程"><a href="#动手模拟-patch-实现过程" class="headerlink" title="动手模拟 patch 实现过程"></a>动手模拟 patch 实现过程</h3><p>patch 函数有俩种用法：</p><ul><li><code>patch(container, vnode)</code></li><li><code>patch(vnode, newNode)</code></li></ul><p>先来看第一种：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    tag: <span class="string">'ul'</span>,</span><br><span class="line">    attrs: &#123;</span><br><span class="line">        id: <span class="string">'list'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    children: [</span><br><span class="line">        &#123;</span><br><span class="line">            tag: <span class="string">'li'</span>,</span><br><span class="line">            attrs: &#123;</span><br><span class="line">                classname: <span class="string">'item'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            children: [<span class="string">'item1'</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>首先得将vnode转化为html结构，才能加入到container种，那么如何将上述js对象（vnode）转化为 html 呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createEl</span>(<span class="params">vnode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> tag = vnode.tag</span><br><span class="line">    <span class="keyword">let</span> attrs = vnode.attrs || &#123;&#125;</span><br><span class="line">    <span class="keyword">let</span> children = vnode.children || []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!tag) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> el = <span class="built_in">document</span>.createElement(tag)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> attrName <span class="keyword">in</span> attrs) &#123;</span><br><span class="line">        <span class="keyword">if</span>(attrs.hasOwnProperty(attrName))&#123;</span><br><span class="line">            el.setAttribute(attrName, attrs[attrName])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    children.forEach(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">        el.append(createElement(v))</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> el;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大概就是这样，利用递归循环遍历 children，设置 <code>!tag</code> 为终止条件。</p><p>第二种：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    tag: <span class="string">'ul'</span>,</span><br><span class="line">    attrs: &#123;</span><br><span class="line">        id: <span class="string">'list'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    children: [</span><br><span class="line">        &#123;</span><br><span class="line">            tag: <span class="string">'li'</span>,</span><br><span class="line">            attrs: &#123;</span><br><span class="line">                classname: <span class="string">'item'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            children: [<span class="string">'item12'</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            tag: <span class="string">'li'</span>,</span><br><span class="line">            attrs: &#123;</span><br><span class="line">                classname: <span class="string">'item'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            children: [<span class="string">'item2'</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>item 12<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里我们想要将列表更新为上述结构，使用 <code>patch(vnode, newNode)</code> 方法，这个方法中肯定是要不断的去对比，不断的对比children肯定还会用到递归，模拟代码（只考虑最简单的情况）如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateEl</span>(<span class="params">vnode, newNode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> children = vnode.children || []</span><br><span class="line">    <span class="keyword">let</span> newChildren = newNode.children || []</span><br><span class="line"></span><br><span class="line">    children.forEach(<span class="function">(<span class="params">child, idx</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> newChild = newChildren[idx]</span><br><span class="line">        <span class="keyword">if</span>(newChild === <span class="literal">null</span>) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">if</span>(child.tag === newChild.tag) &#123;</span><br><span class="line">            <span class="comment">// the same tag</span></span><br><span class="line">            updateEl(child, newChild)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// the different tag</span></span><br><span class="line">            replaceNode(child, newChild)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟Dom </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Event Loop总结</title>
      <link href="/2018/11/11/Event-Loop%E6%80%BB%E7%BB%93.html"/>
      <url>/2018/11/11/Event-Loop%E6%80%BB%E7%BB%93.html</url>
      
        <content type="html"><![CDATA[<p>之前也有 event loop 的概念，但一直都是琐碎的。直到阅读以下三篇文章后，琐碎的点串在了一起。</p><blockquote><p><a href="https://www.cnblogs.com/cangqinglang/p/8963557.html" target="_blank" rel="noopener">从浏览器多进程到JS单线程，JS运行机制最全面的一次梳理</a></p></blockquote><blockquote><p><a href="https://juejin.im/post/59e85eebf265da430d571f89" target="_blank" rel="noopener">这一次，彻底弄懂 JavaScript 执行机制</a></p></blockquote><blockquote><p><a href="https://zhuanlan.zhihu.com/p/33087629" target="_blank" rel="noopener">Event Loop的规范和实现</a></p></blockquote><p>为了印象深刻，还是决定自己写一写。总结如下：</p><h3 id="1、进程与线程的区别"><a href="#1、进程与线程的区别" class="headerlink" title="1、进程与线程的区别"></a>1、进程与线程的区别</h3><h4 id="1、什么是进程？"><a href="#1、什么是进程？" class="headerlink" title="1、什么是进程？"></a>1、什么是进程？</h4><p>在计算机操作系统中，只有进程才能在系统中运行。所以要使程序运行就必须为其创建进程。当我们打开浏览器时就已经创建了进程。创建进程之后，系统会为其分配资源(内存等)供其使用。</p><p><a href="https://zh.wikipedia.org/wiki/%E8%A1%8C%E7%A8%8B" target="_blank" rel="noopener">进程</a>是程序（指令和数据）的真正运行实例。若干<a href="https://zh.wikipedia.org/wiki/%E8%A1%8C%E7%A8%8B" target="_blank" rel="noopener">进程</a>有可能 …</p><a id="more"></a><p>与同一个程序相关系，且每个<a href="https://zh.wikipedia.org/wiki/%E8%A1%8C%E7%A8%8B" target="_blank" rel="noopener">进程</a>皆可以同步（循序）或异步（平行）的方式独立运行。</p><h4 id="2、什么是线程？"><a href="#2、什么是线程？" class="headerlink" title="2、什么是线程？"></a>2、什么是线程？</h4><p><a href="https://zh.wikipedia.org/wiki/%E7%BA%BF%E7%A8%8B" target="_blank" rel="noopener">线程</a>是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条<a href="https://zh.wikipedia.org/wiki/%E7%BA%BF%E7%A8%8B" target="_blank" rel="noopener">线程</a>指的是进程中一个单一顺序的控制流，一个进程中可以并发多个<a href="https://zh.wikipedia.org/wiki/%E7%BA%BF%E7%A8%8B" target="_blank" rel="noopener">线程</a>，每条<a href="https://zh.wikipedia.org/wiki/%E7%BA%BF%E7%A8%8B" target="_blank" rel="noopener">线程</a>并行执行不同的任务。</p><p><strong>总的来说进程是资源分配的最小单位，线程是计算机系统调度和分派的基本单位。线程基本上不拥有资源（也有一点必不可少的资源）它只专注于调度和分派，提高系统并发程度，但是它可以访问其隶属进程的资源。</strong></p><h3 id="2、浏览器是多进程"><a href="#2、浏览器是多进程" class="headerlink" title="2、浏览器是多进程"></a>2、浏览器是多进程</h3><p>上图来阐述，进入浏览器（chrome等）打开多个标签页，然后打开浏览器的 task manager。如下图：</p><p><img src="/2018/11/11/Event-Loop总结/i7eo_6e8f969201c7cd42ae589fe20d2fd558.png" alt=""></p><p>从图上来看，我们首先可以确定的是我打开的4个页面都是进程，因为它们有不同的 process id（进程标识符），这个是存在 PCB 中的，系统分配且唯一的数字标识符。PCB 是进程控制块，具体可搜索计算机操作系统-进程。</p><p>浏览器的主要进程有四个，分别为：主进程、GPU进程、浏览器渲染（render）进程（每个标签页都会一个渲染进程）、第三方插件进程。</p><p>主要来说说这四个进程的职责：</p><h4 id="1-主进程："><a href="#1-主进程：" class="headerlink" title="1. 主进程："></a>1. 主进程：</h4><ul><li>用户的前进、后退操作</li><li>每个标签页的创建与销毁</li><li>将渲染进程执行后生成的位图（bitmap）绘制在对应标签页上，呈现给用户</li><li>书签、下载等功能的管理</li></ul><h4 id="2-浏览器渲染进程"><a href="#2-浏览器渲染进程" class="headerlink" title="2. 浏览器渲染进程"></a>2. 浏览器渲染进程</h4><ul><li>页面渲染</li><li>脚本执行（事件、task）</li></ul><h4 id="3-GPU进程：用于3D绘制等"><a href="#3-GPU进程：用于3D绘制等" class="headerlink" title="3. GPU进程：用于3D绘制等"></a>3. GPU进程：用于3D绘制等</h4><h4 id="4-第三方插件进程：使用插件时创建"><a href="#4-第三方插件进程：使用插件时创建" class="headerlink" title="4. 第三方插件进程：使用插件时创建"></a>4. 第三方插件进程：使用插件时创建</h4><p>主要来说下浏览器渲染进程，这个进程是当前标签的控制者。js 代码的执行、事件的触发、页面的展示等都由它负责。那么这一个进程可以同时干这么多事情吗？它一个当然是可以的，但是如果一个人来做就会浪费资源而且一旦执行脚本文件后会不断阻塞页面执行。至此，引入了线程来解决这个问题。</p><h3 id="3、Javascript-的单线程"><a href="#3、Javascript-的单线程" class="headerlink" title="3、Javascript 的单线程"></a>3、Javascript 的单线程</h3><p>在渲染进程中划分了很多个线程，这里介绍一些常驻线程：</p><h5 id="1-JS-线程（引擎线程，即常说的那个js单线程）"><a href="#1-JS-线程（引擎线程，即常说的那个js单线程）" class="headerlink" title="1. JS 线程（引擎线程，即常说的那个js单线程）"></a>1. JS 线程（引擎线程，即常说的那个js单线程）</h5><ul><li>运行环境（v8），负责处理 js 脚本</li><li>每个标签页只有一个 js 线程在执行代码</li><li>js 线程与 Gui 渲染线程互斥，js 执行时间过长会导致页面渲染的阻塞（互斥原因下面阐述</li></ul><h5 id="2-GUI-渲染线程"><a href="#2-GUI-渲染线程" class="headerlink" title="2. GUI 渲染线程"></a>2. GUI 渲染线程</h5><ul><li>负责渲染页面（构建dom 树 &amp; cssparser 树 &amp; renderobject 树）</li><li>当页面出现重绘或回流（repaint/reflow）时，会调用该线程</li><li>与 js 线程互斥</li></ul><h5 id="3-事件触发线程：遵循先进先出的原则在异步队列中等待-js-线程处理。（异步队列下面会解释）"><a href="#3-事件触发线程：遵循先进先出的原则在异步队列中等待-js-线程处理。（异步队列下面会解释）" class="headerlink" title="3. 事件触发线程：遵循先进先出的原则在异步队列中等待 js 线程处理。（异步队列下面会解释）"></a>3. 事件触发线程：遵循先进先出的原则在异步队列中等待 js 线程处理。（异步队列下面会解释）</h5><h5 id="4-定时器触发线程"><a href="#4-定时器触发线程" class="headerlink" title="4. 定时器触发线程"></a>4. 定时器触发线程</h5><ul><li>定时器并不是在某段时间后执行，而是在某时间后被添加至异步队列，等 js 线程空闲后执行</li><li>W3C在HTML标准中规定，规定要求setTimeout中低于4ms的时间间隔算为4ms</li></ul><h5 id="5-http-请求线程：请求成功后会把回调放入异步队列中。"><a href="#5-http-请求线程：请求成功后会把回调放入异步队列中。" class="headerlink" title="5. http 请求线程：请求成功后会把回调放入异步队列中。"></a>5. http 请求线程：请求成功后会把回调放入异步队列中。</h5><h5 id="6-备注：上述执行环境是在浏览器中，如果执行环境换为-node-的话，还有-I-O-线程与-setImmediate"><a href="#6-备注：上述执行环境是在浏览器中，如果执行环境换为-node-的话，还有-I-O-线程与-setImmediate" class="headerlink" title="6. 备注：上述执行环境是在浏览器中，如果执行环境换为 node 的话，还有 I/O 线程与 setImmediate"></a>6. 备注：上述执行环境是在浏览器中，如果执行环境换为 node 的话，还有 I/O 线程与 setImmediate</h5><h3 id="3、为什么说-JS-线程与-GUI-渲染线程互斥（js-代码会阻塞渲染）？"><a href="#3、为什么说-JS-线程与-GUI-渲染线程互斥（js-代码会阻塞渲染）？" class="headerlink" title="3、为什么说 JS 线程与 GUI 渲染线程互斥（js 代码会阻塞渲染）？"></a>3、为什么说 JS 线程与 GUI 渲染线程互斥（js 代码会阻塞渲染）？</h3><p>GUI 渲染线程第一个构建的是 dom 树，js 代码也有可能会修改 dom 结构，一旦修改就会引起 重绘或回流，这就会导致 GUI 线程的再次从头开始。为了避免这样的事情发生所以采用了这种互斥的策略。俩者并不能在同一时间进行。</p><h3 id="4、异步的实现方案-event-loop"><a href="#4、异步的实现方案-event-loop" class="headerlink" title="4、异步的实现方案 - event loop"></a>4、异步的实现方案 - event loop</h3><p>针对于 js 引擎单线程这种情况，为了不让程序（被 http 请求、定时器等）阻塞，所以有了异步的概念。但是在现代 web 程序开发中，代码量越来越大。为了能让越来越多的定时器、事件、请求有序且规范的执行，event loop 方案出现了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'1'</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'2'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'3'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'4'</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'5'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'6'</span>);</span><br></pre></td></tr></table></figure><p>上述代码的执行结果是：1 3 6 4 5 2</p><p>首先介绍 task &amp; microtask：</p><ul><li>task 主要包括：setTimeout、setInterval、setImmediate、I/O、UI交互事件</li><li>microtask 主要包括：Promise、<a href="https://nodejs.org/api/process.html" target="_blank" rel="noopener">process.nextTick</a>、<a href="https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver/observe" target="_blank" rel="noopener">MutationObserver</a>（在node中 process.nextTick 的优先级高于 promise）</li></ul><p>task &amp; microtask 在当前标签页中拥有俩个队列来分别存储 task &amp; microtask除了 js &amp; gui 线程，其他每个线程执行时都会按照 task都有一个异步队列来控制顺序。如下图</p><p><img src="/2018/11/11/Event-Loop总结/i7eo_b879476dd053c59cfd42b8fe4cdfa137.png" alt="Event Loop"></p><p>Event Loop 过程如下：</p><ol><li>整个script代码作为 task 执行时先判断是同步任务还是异步任务</li><li>同步任务依次进入 js 线程，依次执行</li><li>异步任务<strong>先在 table 中注册</strong>，然后<strong>当任务完成时</strong>按照 task/microtask 区分开来，依次进入不同的异步队列</li><li>js 线程执行完毕后（执行栈为空）先读取 microtask 的异步队列，全部执行完毕（队列为空后），再去读取 task 的异步队列，<strong>task 异步队列中的任务若包含 microtask 则再次去读取 microtask 异步队列</strong>。</li><li>上述过程不断重复，直至 task 异步队列为空。整个过程即为 Event Loop。</li></ol><p>还是直接来看代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'1'</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'2'</span>);</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'4'</span>);</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'5'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'7'</span>);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'8'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'9'</span>);</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'11'</span>);</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'12'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>详细过程请参考：</p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/33087629" target="_blank" rel="noopener">Event Loop的规范和实现</a></p></blockquote><p>输出：1 7 8 2 4 5 9 11 12</p><p>那如果执行环境切换为 node，node 的 Event loop的实现与浏览器稍有差异。具体如下：</p><p><img src="/2018/11/11/Event-Loop总结/i7eo_6474957a85872c82bdf475ba406ffe10.png" alt="node - event loop"></p><p>需要注意的是：</p><ul><li>expired timers and intervals queue 这个异步队列专门来存储所有的 setTimeout/setInterval</li><li>immediates queue 这个异步队列专门来存储所有的 setImmediate</li><li>next tick queue 专门来存储所有的 process.nextTick</li><li>node 清空 queue 时会执行所有 task（不论时 task 还是 microtask）</li></ul><p>那么以下代码的结果呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">        resolve()</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">5</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    process.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">7</span>)</span><br><span class="line">    resolve()</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">8</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">process.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">6</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">9</span>)</span><br><span class="line">    process.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">10</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">11</span>)</span><br><span class="line">        resolve()</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">12</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>js 执行栈为空，microtask queue 为空时，去检查 task queue，发现俩个 settimeout 这时<strong>依次执行</strong>。这里与浏览器环境不同，浏览器环境是从 task queue 读出一个 task 先执行，执行完后去检查 microtask queue，而 node 中是一次性执行完 task queue，再去检查 micrtask queue（比如 process.nextTick、promise 等）</p><p>输出：1 7 6 8 2 4 9 11 3 10 5 12</p><p>分析过程请参考：</p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/33087629" target="_blank" rel="noopener">Event Loop的规范和实现</a></p></blockquote><h3 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h3><ul><li>js 是一门单线程语言</li><li>event loop 是 js 的执行机制</li></ul><p>参考资料：</p><ul><li><a href="https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/" target="_blank" rel="noopener">Tasks, microtasks, queues and schedules</a></li><li><a href="https://medium.com/the-node-js-collection/what-you-should-know-to-really-understand-the-node-js-event-loop-and-its-metrics-c4907b19da4c" target="_blank" rel="noopener">What you should know to really understand the Node.js Event Loop</a></li><li><a href="https://jsblog.insiderattack.net/timers-immediates-and-process-nexttick-nodejs-event-loop-part-2-2c53fd511bb3?gi=d90233a38d18" target="_blank" rel="noopener">Timers, Immediates and Process.nextTick</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EventLoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP笔记(上)</title>
      <link href="/2018/11/03/HTTP1-0.html"/>
      <url>/2018/11/03/HTTP1-0.html</url>
      
        <content type="html"><![CDATA[<h3 id="HTTP-基础"><a href="#HTTP-基础" class="headerlink" title="HTTP 基础"></a>HTTP 基础</h3><h4 id="网络间通信的大体流程"><a href="#网络间通信的大体流程" class="headerlink" title="网络间通信的大体流程"></a>网络间通信的大体流程</h4><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">概念</th><th style="text-align:left">常用协议</th></tr></thead><tbody><tr><td style="text-align:left">应用层</td><td style="text-align:left">为应用程序提供服务</td><td style="text-align:left">HTTP/FTP/SMTP</td></tr><tr><td style="text-align:left">表示层</td><td style="text-align:left">定义数据格式及加密</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">会话层</td><td style="text-align:left">定义了如何开始、控制和结束一个会话</td><td style="text-align:left">SSL</td></tr><tr><td style="text-align:left">传输层</td><td style="text-align:left">向用户提供端到端的服务</td><td style="text-align:left">TCP/UDP</td></tr><tr><td style="text-align:left">网络层</td><td style="text-align:left">数据在俩个机器间创建逻辑链路</td><td style="text-align:left">IP(IPV4/IPV6)、ARP</td></tr><tr><td style="text-align:left">数据链路层</td><td style="text-align:left">通信实体间建立数据链路连接</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">物理层</td><td style="text-align:left">定义物理设备间如何传输比特流的规范（网线、光缆等硬件）</td></tr></tbody></table><p>osi 模型较为复杂，一般常说的是五层模型：</p><p>物理层 -&gt; 数据链路层 -&gt; 网络层 -&gt; 传输层 -&gt; 应用层</p><a id="more"></a><p>下面这张图用来简单描述俩台通过路由器联系起来的主机的数据是如何传输的。</p><p><img src="/2018/11/03/HTTP1-0/i7eo_519e65e5e25f00ef5a81add83a0c3d79.png" alt=""></p><p>假设主机1的程序ap1向主机2的程序ap2传送数据。ap1先将数据交给第5层（应用层）。第5层<strong>加上必要的控制信息h5传递给下一层</strong>，以此类推。需要注意的是数据到达第2层（数据链路层）后，控制信息分成俩部分，分别加到本层数据单元的首部（h2）和尾部（t2）；而第1层由于是比特流传送即0101…所以不必加上控制信息，但是物理层是从首部开始传递数据。</p><p>这一串比特流离开主机1后通过物理媒介传递到路由器，从路由器的第1层（物理层）依次上升至第3层（网络层）每一层都会对控制信息进行操作，操作后将控制信息剥去将剩下的数据向上传送，当到达第3层后就会<strong>根据首部的目的地址查找路由器中的路由表，找出转发分组的接口</strong>，然后从第3层向下传递至第1层，转为比特流之后传递给主机2，主机2的过程与上类似，最终程序ap2收到传输的数据。</p><p>在我们平时上网浏览网页时，通常都是我们的电脑与服务器的数据交互，中间过程不是像上述描述的只经过一个路由器这么简单，期间会经过dns服务器、cdn服务器等等。这里着重记录关于 http 部分的知识。</p><h4 id="HTTP-不同版本特点对比"><a href="#HTTP-不同版本特点对比" class="headerlink" title="HTTP 不同版本特点对比"></a>HTTP 不同版本特点对比</h4><p>HTTP/0.9 ：</p><ul><li>只有一个 GET 命令</li><li>没有 header 等描述信息</li><li>服务器发送完毕，tcp连接被关闭</li></ul><p>HTTP/1.0</p><ul><li>增加 POST/PUT 等命令</li><li>增加 header &amp; status code 信息</li><li>支持多字符集、多部分发送，缓存等</li></ul><p>HTTP/1.1</p><ul><li>使tcp连接持久化</li><li>pipeline（客户端可以发送多个http请求，但是服务端必须按顺序返回）</li><li>增加host与其他命令（利用host中的端口判断具体属于node还是java等）</li></ul><p>HTTP/2.0</p><ul><li>数据以二进制传输（2.0之前数据传输是已字符串传输）</li><li>对于客户端发送的多个http请求，服务器返回时不用按照顺序返回，可以并行返回</li><li>头信息压缩，增加了推送等提高效率的功能</li></ul><p>需要注意的是：</p><ul><li>理论上来说一个tcp连接中可以存在多个http请求，但是目前的做法是http1.1中一个tcp链接上同时最多只有一个http请求</li><li>并发量一般指的是tcp连接的并发量</li></ul><p>各个浏览器对应的tcp并发数量详情可查看：<br><a href="https://blog.csdn.net/jueshengtianya/article/details/38271081" target="_blank" rel="noopener">主流浏览器的HTTP最大并发连接数</a></p><h4 id="HTTP-的三次握手"><a href="#HTTP-的三次握手" class="headerlink" title="HTTP 的三次握手"></a>HTTP 的三次握手</h4><p><img src="/2018/11/03/HTTP1-0/i7eo_2aa7ba936cdaf5772435de872d3f18d2.png" alt=""></p><p>具体情况如上图，这里的 syn 代表同步位，seq 代表序号，ack 代表确认号。需要注意的是当首次握手发生时，即客户端进入 SYN-SENT状态前，不能携带数据，当发生二次握手时，即服务器进入SYN-RECV状态前，也是不能携带数据的，当发生第三次握手时即客户端进入ESTAB-LISHED状态前，<strong>可以携带数据。</strong></p><p>为什么需要三次握手？<br>因为tcp要保证传输的数据可靠性，但是信道（数据链路层）传输是不可靠的。如何保证tcp传输的数据是可靠的？只能在tcp连接建立前保证通道畅通。因为在三次握手的过程中有网络延迟、包丢失等原因，所以才有了三次握手，三次握手是理论上的最小值。具体分析请参考：<a href="https://www.zhihu.com/question/24853633" target="_blank" rel="noopener">TCP 为什么是三次握手，而不是两次或四次？</a> 、<a href="https://www.jianshu.com/p/e7f45779008a" target="_blank" rel="noopener">tcp建立连接为什么需要三次握手</a></p><h4 id="补充：套接字（socket）"><a href="#补充：套接字（socket）" class="headerlink" title="补充：套接字（socket）"></a>补充：套接字（socket）</h4><p>平常我们在使用自己电脑测试移动端页面或者是自己在写程序连接某项服务时都会使用 ip + 端口号 来连接，这是为什么呢？</p><p>因为这些做法都使用了tcp连接，而tcp把连接作为最基本的抽象。在tcp的俩端分别有俩个端点，端点叫做套接字。rfc 793 定义：端口号拼接到 ip 地址构成了套接字。如下图：</p><p><img src="/2018/11/03/HTTP1-0/i7eo_c3ad664d8759aeed097490aee8830038.png" alt=""></p><p>同一个ip地址可以有多个tcp连接，而同一个端口号也可以出现在多个不同的tcp连接中。</p><h4 id="HTTP-报文格式"><a href="#HTTP-报文格式" class="headerlink" title="HTTP 报文格式"></a>HTTP 报文格式</h4><p><img src="/2018/11/03/HTTP1-0/i7eo_2635b93238bf4d0760e51199dca77949.png" alt=""></p><p>这是一个很简单的请求与响应报文格式图。需要注意的是响应报文的首部结尾是空行。响应报文中具体的status code 请参考：<a href="https://blog.csdn.net/l_mloveforever/article/details/82892292" target="_blank" rel="noopener">常见的HTTPRequest状态码说明</a></p>]]></content>
      
      
      <categories>
          
          <category> HTTP </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS元素嵌套问题</title>
      <link href="/2018/09/05/CSS%E5%85%83%E7%B4%A0%E5%B5%8C%E5%A5%97%E9%97%AE%E9%A2%98.html"/>
      <url>/2018/09/05/CSS%E5%85%83%E7%B4%A0%E5%B5%8C%E5%A5%97%E9%97%AE%E9%A2%98.html</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;回顾了一下之前的代码，发现一个css中的坑即层叠顺序。什么叫层叠顺序？简单来说就是在屏幕上某一个位置堆积了很多 <code>div</code> 这些块哪个在上哪个在下的关系就是层叠顺序。（下面代码演示了三层堆叠）</p><a id="more"></a><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.test2</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">260px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">130px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.test3</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.test4</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">75px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">75px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: gray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的html结构如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test2"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test4"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2018/09/05/CSS元素嵌套问题/i7eo_a3e3f0589b44e1eb85a387e0b8fa7d38.png" alt=""></p><p>如图所示，都是水平垂直居中的。这里我们主要关注层叠顺序。此时三者均为绝对定位，由test2开始从下到上依次是 test2 -&gt; test3 -&gt; test4 这样的顺序。test4位于最上方，此时想让test3与test4位置颠倒且test2位置不变（由下到上的顺序为test2 -&gt; test4 -&gt; test3），应该怎么做？<br>肯定首先想到使用 z-index：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.test3</span> &#123;</span><br><span class="line">  //...</span><br><span class="line">  <span class="selector-tag">z-index</span>: 3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.test4</span> &#123;</span><br><span class="line">  //..</span><br><span class="line">  <span class="selector-tag">z-index</span>: 2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样修改结果并不会改变。为什么？既然 z-index 不生效那我们肯定先去查 z-index 。</p><blockquote><p>对于一个已经定位的元素（即position属性值是非static的元素），z-index 属性指定：<br>元素在当前堆叠上下文中的堆叠层级。<br>元素是否创建一个新的本地层叠上下文。</p></blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/z-index" target="_blank" rel="noopener">MDN : z-index</a></p><p>根据mdn的介绍来看，我们设定了堆叠层级，这样来说是应该可以的。但是结果却不尽人意。留意一下层叠上下文，是否跟创建的层叠上下文有关呢？<br>常见的创建层叠上下文（stacking context）的方式有：</p><ul><li><p>z-index 值不为 “auto”的 绝对/相对定位</p></li><li><p>一个 z-index 值不为 “auto”的 flex 项目 (flex item)，即：父元素 display: flex|inline-flex</p></li></ul><p>可能你并没有意识，但你确实会常常这样为html标签创建样式并为它创建了层叠上下文。</p><p>层叠上下文的特点：(mdn)</p><ol><li>给一个 HTML 元素定位和 z-index 赋值创建一个层叠上下文，（opacity 值不为 1 的也是相同）。</li><li>层叠上下文可以包含在其他层叠上下文中，并且一起创建一个有层级的层叠上下文。</li><li>每个层叠上下文完全独立于它的兄弟元素：当处理层叠时只考虑子元素。</li><li>每个层叠上下文是自包含的：当元素的内容发生层叠后，整个该元素将会 在父层叠上下文中 按顺序进行层叠。</li></ol><p>具体的层叠关系如下图：</p><p><img src="/2018/09/05/CSS元素嵌套问题/i7eo_5a1d655846a04a4367b22766f24cf0a0.png" alt=""></p><p><a href="https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/" target="_blank" rel="noopener">深入理解CSS中的层叠上下文和层叠顺序</a></p><p>对于当前代码来说，我创建了三个层叠上下文元素并且一一嵌套。当我们设置test3的z-index时，test4是test3的子元素（层叠上下文特点3），会影响到test4。此时test3与test4一同来到了test2上方（其实也就是保持了原位置，因为test2没有设置zindex所以没有层叠上下文）。<br>这个时候再设置test4的z-index，相当于俩个层叠上下文元素在比较z-index，那按照上图所示的比较规则，test3的z-index只要大于test4就能在上面了，那为什么还是不变呢？我们来看看大神的解释：</p><p>层叠上下文元素有如下特性：（<a href="https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/" target="_blank" rel="noopener">理解元素层叠上下文-张鑫旭</a>）</p><blockquote><p>1、层叠上下文的层叠水平要比普通元素高（原因后面会说明）；</p></blockquote><blockquote><p>2、层叠上下文可以阻断元素的混合模式；</p></blockquote><blockquote><p>3、层叠上下文可以嵌套，内部层叠上下文及其所有子元素均受制于外部的层叠上下文。</p></blockquote><blockquote><p>4、每个层叠上下文和兄弟元素独立，也就是当进行层叠变化或渲染的时候，只需要考虑后代元素。</p></blockquote><blockquote><p>5、每个层叠上下文是自成体系的，当元素发生层叠的时候，整个元素被认为是在父层叠上下文的层叠顺序中。</p></blockquote><p>根据上面第3点我们知道了内部层叠受制于外部层叠，结合代码也就是说只要test3设置了z-index，那它就会带着test4一起走。当test4设置z-index时，<strong>首先要判断设置的值和test3的z-index正负是否相同，如果都为正（同为负），无论大小test3与test4的位置永不会变</strong>。既然设置俩个正值作为z-index行不通，那我们试试一正一负行得通吗？</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先设置test4的z-index为-1，此时只有一个层叠上下文test4，并且层叠顺序为：由test4开始从下到上依次是 test4 -&gt; test2 -&gt; test3 这样的顺序。test3位于最上方，此时如果给test3的z-index赋正值会导致test4重回原位置（test3上方），赋负值会导致test3来到了test2之下，不符合要求。既然父级元素没有操作空间了，试试父父级元素test2，根据特点3我们猜想如果test2的z-index设置正值那么会把test3（包括test4）这个整体共同带到test2之上的位置。如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/2763803-ae96de8a5feb15ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="test.png"></p><p>在改变test4的z-index之后（为了看得更清晰我手动改变了长宽）我们发现达到了效果。设置父父级（test2）的z-index为1之后拥有了层叠上下文，test4设置z-index为-1也拥有了层叠上下文。<strong>此时test3作为普通的绝对定位元素保留在原位置（为了方便理解所以这样描述，这里test3其实是bfc发挥了作用），因为test2是父父级符合特点3，所以将位于底下的test4带了上来，但是test4属于test3的子元素，上来后就去和test3比较，因为test3不拥有层叠上下文保留在原位置，而此时test4的z-index为负值，所以在test3之下，test2之上显示</strong>。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里说了三个块级元素，大家还可以试试嵌套行内元素是什么效果。需要注意的是伪元素创建层叠上下文的表现是否和上面一样呢？</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.test</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">260px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">130px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.test1</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.test1</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: gray;</span><br><span class="line">  <span class="attribute">animation</span>: breathe infinite ease-in-out <span class="number">2s</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">keyframes</span> breathe&#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        <span class="attribute">transform</span>:<span class="built_in">scale</span>(.5);</span><br><span class="line">        <span class="attribute">opacity</span>:.<span class="number">9</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    95% &#123;</span><br><span class="line">      <span class="attribute">transform</span>:<span class="built_in">scale</span>(1.5);</span><br><span class="line">      <span class="attribute">opacity</span>:<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    100% &#123;</span><br><span class="line">        <span class="attribute">transform</span>:<span class="built_in">scale</span>(.9);</span><br><span class="line">        <span class="attribute">opacity</span>:<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>html如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个其实就是我遇到的问题，用伪元素创建了层叠上下文，我想让伪元素动画出现在test1的下方test的上方。和上面一样分别设置z-index为-1和1即可达到效果。</p><p>参考资料：</p><ul><li><p><a href="https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/" target="_blank" rel="noopener">深入理解CSS中的层叠上下文和层叠顺序</a></p></li><li><p><a href="https://www.zhangxinxu.com/wordpress/2015/02/css-deep-understand-flow-bfc-column-two-auto-layout/" target="_blank" rel="noopener">CSS深入理解流体特性和BFC特性下多栏自适应布局</a></p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Understanding_z_index/The_stacking_context" target="_blank" rel="noopener">层叠上下文</a></p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Understanding_z_index/Stacking_context_example_2" target="_blank" rel="noopener">Stacking_context_example_2</a></p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Understanding_z_index/Stacking_context_example_3" target="_blank" rel="noopener">Stacking_context_example_3</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> HTML&amp;CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 层叠上下文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nuxt.js踩坑实录</title>
      <link href="/2018/07/04/Nuxt.js%E8%B8%A9%E5%9D%91%E5%AE%9E%E5%BD%95.html"/>
      <url>/2018/07/04/Nuxt.js%E8%B8%A9%E5%9D%91%E5%AE%9E%E5%BD%95.html</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前一阵子接触一个新项目，用了vue中的ssr解决方案 — Nuxt.js。也算是小有感受，记录一些经验留后备用。</p><h3 id="CSR-amp-SSR"><a href="#CSR-amp-SSR" class="headerlink" title="CSR &amp; SSR"></a>CSR &amp; SSR</h3><h4 id="什么是-CSR"><a href="#什么是-CSR" class="headerlink" title="什么是 CSR ?"></a>什么是 CSR ?</h4><p>CSR =&gt; client-side-reder，即客户端渲染。具体过程如下：</p><ul><li>用户请求页面，返回页面。此时页面只是模版页面</li><li>浏览器解析页面代码，读到js代码时，会根据我们所写的接口去请求数据</li><li>得到返回数据后使用模版（vue/react/ng/art-template）进行渲染<h4 id="什么是-SSR"><a href="#什么是-SSR" class="headerlink" title="什么是 SSR ?"></a>什么是 SSR ?</h4></li></ul><a id="more"></a><p>SSR =&gt; server-side-render，即服务器端渲染。具体过程如下：</p><ul><li>用户请求页面</li><li>后端取到准备好的数据，渲染到我们自己写的服务器模版（next/nuxt/ejs）中，准备好html结构与相应数据后返回给浏览器</li></ul><h4 id="CSR-amp-SSR-优缺点对比"><a href="#CSR-amp-SSR-优缺点对比" class="headerlink" title="CSR &amp; SSR 优缺点对比"></a>CSR &amp; SSR 优缺点对比</h4><table><thead><tr><th style="text-align:left"></th><th style="text-align:left">优点</th><th style="text-align:left">缺点</th></tr></thead><tbody><tr><td style="text-align:left">CSR</td><td style="text-align:left">减轻服务器压力，前后端分离</td><td style="text-align:left">对seo不友（不利于爬虫爬取），首页渲染存在白屏问题</td></tr><tr><td style="text-align:left">SSR</td><td style="text-align:left">对seo友好，首页渲染完美无白屏问题</td><td style="text-align:left">对服务器性能有一定要求，不利于前后端分离</td></tr></tbody></table><p>其实在真正开发中通常是 csr 与 ssr 相结合使用，前端使用cdn缓存，后端使用nginx缓存。这样是最优的解决方案。上两张图大家对比理解：</p><p><img src="/2018/07/04/Nuxt.js踩坑实录/i7eo_1687e50bff1dbae80b0211d67d9dbde4.png" alt="csr"></p><p><img src="/2018/07/04/Nuxt.js踩坑实录/i7eo_910d2d75c2c87a237bfa316a4ed5ea26.png" alt="ssr"></p><h3 id="Nuxt-js"><a href="#Nuxt-js" class="headerlink" title="Nuxt.js"></a>Nuxt.js</h3><h4 id="什么是-Nuxt"><a href="#什么是-Nuxt" class="headerlink" title="什么是 Nuxt ?"></a>什么是 Nuxt ?</h4><p>Nuxt.js 是一个基于 Vue.js 的通用应用框架。通过对客户端/服务端基础架构的抽象组织，Nuxt.js 主要关注的是应用的 UI渲染。</p><h4 id="Nuxt-流程"><a href="#Nuxt-流程" class="headerlink" title="Nuxt 流程"></a>Nuxt 流程</h4><p><img src="/2018/07/04/Nuxt.js踩坑实录/i7eo_0667f547016c7ce4a49e09b07b9b68fa.png" alt="Nuxt流程图"></p><h5 id="nuxtServerInit"><a href="#nuxtServerInit" class="headerlink" title="nuxtServerInit"></a>nuxtServerInit</h5><p>请求先到达 nuxtServerInit 方法，图中也表明了适用场景是对 store 的 action 操作即（vuex）：</p><p><img src="/2018/07/04/Nuxt.js踩坑实录/i7eo_702484477e28e35d0d7057ad05916493.png" alt=""></p><h5 id="middleware"><a href="#middleware" class="headerlink" title="middleware"></a>middleware</h5><p>下来请求到达 middleware 属性，虽然这里叫做中间件属性，但还是做着同中间件一样的事。官方给出的定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">中间件允许您定义一个自定义函数运行在一个页面或一组页面渲染之前。</span><br></pre></td></tr></table></figure></p><p>也就是说，定义 middleware 属性后你可以在 匹配布局（layout 组件）前执行某种操作，也可以在解析完 layout 之后，解析 page 组件前 执行某种操作。</p><h5 id="validate"><a href="#validate" class="headerlink" title="validate"></a>validate</h5><p>下来请求到达 validate 方法，在这里可以对 page 组件或者 page 中的子组件 component 进行动态路由对应的页面组件中动态路由参数的有效性。</p><h5 id="asyncData-amp-fetch"><a href="#asyncData-amp-fetch" class="headerlink" title="asyncData &amp; fetch"></a>asyncData &amp; fetch</h5><p>接下来达到 asyncData &amp; fetch 方法，asyncData() 适用于在渲染组件前获取异步数据，fetch() 适用于在渲染页面前填充 vuex 中维护的数据。</p><h5 id="render"><a href="#render" class="headerlink" title="render"></a>render</h5><p>最后进行渲染。将渲染后的页面返回给浏览器，用户在页面进行操作，<strong>如果再次请求新的页面，此时只会回到生命周期中的 middlerware 中，而非 nuxtServerInit ，所以如果不同页面间需要操作相同的数据请用 vuex 来维护</strong>。</p><h3 id="Nuxt-笔记"><a href="#Nuxt-笔记" class="headerlink" title="Nuxt 笔记"></a>Nuxt 笔记</h3><h4 id="Nuxt-项目结构"><a href="#Nuxt-项目结构" class="headerlink" title="Nuxt 项目结构"></a>Nuxt 项目结构</h4><p><img src="/2018/07/04/Nuxt.js踩坑实录/i7eo_2b5a004471f261f8a5a2b7af246c6c39.png" alt=""></p><p>通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install npx</span><br><span class="line">npx create-nuxt-app xxx</span><br></pre></td></tr></table></figure><p>生成如上结构，布局组件（layout）用来存放页面整体布局，在 layout 中我们可以放入一些每个页面都会以用到的组件，比如 header &amp; footer。当然如果你不想使用已生成的 layout 组件，你可以重新创建一个，比如 blank.vue 一般不需要引入 header&amp;footer 的页面可以使用 blank.vue 这个 layout 组件。代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">layout: &apos;blank&apos;</span><br></pre></td></tr></table></figure><p><strong>在 nuxt 中引入 layout 不用写路径，nuxt 已经帮我们做了映射，同理在 nuxt 中不用写路由，pages 中文件名映射为了路由</strong>。</p><h4 id="nuxt-中的钩子函数"><a href="#nuxt-中的钩子函数" class="headerlink" title="nuxt 中的钩子函数"></a>nuxt 中的钩子函数</h4><p>nuxt 中提供很多钩子函数，参考文档：<a href="https://zh.nuxtjs.org/api/internals/" target="_blank" rel="noopener">nuxt hooks</a></p><p>这里我们主要来看 vue 组件生命周期中钩子函数，服务器端的 vue 组件也是有生命周期的，只不过只有 beforeCreate 和 created 俩个。<strong>也就是说，我们把服务器端创建的 .vue 文件全部理解成组件，在服务器端环境（node）通过 beforeCreate 和 created 这俩个生命周期节点后服务器端 vue 组件生命周期结束。返回页面给浏览器，在客户端环境（v8）中这个 vue 组件实例创建后会在客户端再次拥有生命周期，此时生命周期中有 mounted 等钩子函数</strong>。</p><p><strong>需要特别注意的是 nuxt 中没有 mounted 钩子函数也没有组件实例，只有 beforeCreate/created 钩子与 context 对象</strong>。</p><h4 id="asyncData-传递服务器数据至客户端"><a href="#asyncData-传递服务器数据至客户端" class="headerlink" title="asyncData() 传递服务器数据至客户端"></a>asyncData() 传递服务器数据至客户端</h4><p><strong>在 asyncData() 中可以处理请求得来的数据，通过 return 将处理后的数据返回给当前 vue 组件的 data 。再次强调这里不能使用 this ，因为没有组件实例，asyncData() 默认的参数是 ctx 即 content 对象</strong>。</p><p>对于打开网页要立即显示的内容，如首页中的 geo 组件（显示当前位置）来说有俩种方式实现，如下：</p><ul><li>ssr<ul><li>nuxtServerInit 方法</li><li>middleware 属性</li></ul></li><li>vue 组件 mounted 函数发送请求</li></ul><p>no-ssr 即 mounted 函数方式实现相信大家都很熟悉。主要来说说 ssr 对应的俩种实现方式。</p><p>nuxtServerInit() 前面也说过，搭配 vuex 使用，所以顾名思义，在 nuxtServerInit 函数中准备好首页 geo 组件需要的数据存入 vuex，<strong>这样 vuex 实例化后的 store 会贯穿整个服务器端与客户端的生命周期</strong>。可能有的同学会问这是怎么传过去的？文末会截图说明。所以在首页返回客户端时数据存在 store 实例中可直接获取即可。获取方式如下：</p><ul><li>服务器端：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctx.store.state.xxx.xxx.xxx</span><br><span class="line"><span class="comment">// eg: ctx.store.state.home.position.city</span></span><br></pre></td></tr></table></figure><ul><li>客户端：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$store.state.xxx.xxx.xxx</span><br><span class="line"><span class="comment">// eg: this.$store.state.home.position.city</span></span><br></pre></td></tr></table></figure><p>middleware 属性是在 vue 组件中直接定义即可，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">middleware: async (ctx) =&gt; &#123;</span><br><span class="line">    let &#123;status, data: &#123;province, city&#125;&#125; = await ctx.$axios.get(&apos;/geo/getPosition&apos;)</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>问题来了，如何将获取的 data 赋值给组件中的 data 呢？上面在 nuxt流程图 部分我们分析过，渲染前的最后一步是 asyncData&amp;fetch ，这里我们还是需要用 asyncData 方法把 data 给组件 return 即可。具体做法见官方给出的 issue &amp; 例子：</p><p><a href="https://github.com/nuxt/nuxt.js/issues/1738" target="_blank" rel="noopener">issue：#1738</a></p><p><a href="https://github.com/nuxt/nuxt.js/blob/dev/test/fixtures/basic/pages/fn-midd.vue" target="_blank" rel="noopener">nuxt/fn-midd.vue</a></p><p>解答上面遗留的问题，ssr 生成的页面如何把 vuex 实例后的 store 传给客户端？</p><p>其实在服务器返回页面给浏览器时会传一个名为 __NUXT__ 的对象挂载在 window 上，这里面存储了 store 。如下：</p><p><img src="/2018/07/04/Nuxt.js踩坑实录/i7eo_728311f61451d0611502442c08197ff6.png" alt=""></p><p>如图可以找到 $store.state.home.position.city 这个数据。</p><p>参考文章：</p><p><a href="https://w3ctech.com/topic/2005" target="_blank" rel="noopener">The Benefits of Server Side Rendering Over Client Side Rendering</a></p><p><a href="https://nuxtjs.org/" target="_blank" rel="noopener">NUXT-Universal Vue.js Applications</a></p>]]></content>
      
      
      <categories>
          
          <category> Vuejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nuxt.js </tag>
            
            <tag> SSR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript面向对象笔记</title>
      <link href="/2018/03/25/Javascript%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AC%94%E8%AE%B0.html"/>
      <url>/2018/03/25/Javascript%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AC%94%E8%AE%B0.html</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;说到面向对象，大多数人都想到的是高级语言：c++、java，但是我认为对于一名coder来说不论什么语言，一定要有面向对象这种思想（封装、继承、多态），我们只需要用语言这个工具把思想表达出来即可。本文只讨论继承。</p><h3 id="Javascript-中创建对象"><a href="#Javascript-中创建对象" class="headerlink" title="Javascript 中创建对象"></a>Javascript 中创建对象</h3><h4 id="new-关键字做了什么？"><a href="#new-关键字做了什么？" class="headerlink" title="new 关键字做了什么？"></a>new 关键字做了什么？</h4><p>利用 new &amp; 构造函数 创建新的对象。这个创建新对象的过程分为三步：</p><ul><li>声明新的变量 basketball</li></ul><a id="more"></a><ul><li>new 将新变量的 _proto_ 属性指向了构造函数（Ball）的 prototype 属性，这时内存为 basketball 分配了内存，其成为了对象。<code>basketball._proto_ = ball.prototype</code></li><li>利用 call 函数将新产生的对象 basketball 的 this 指向 ball。即绑定 this。</li></ul><h4 id="prototype-proto-是什么？"><a href="#prototype-proto-是什么？" class="headerlink" title="prototype/_proto_ 是什么？"></a>prototype/_proto_ 是什么？</h4><p>有的书上别别用显示原型/隐示原型来分别代 prototype/_proto_ 还有的用原型对象/对象原型。其实不论哪一种说法，代表的东西都是一样的。这里我们使用第二种说法。俩者区别如下表：</p><table><thead><tr><th style="text-align:left"></th><th style="text-align:left">解释</th><th style="text-align:left">备注</th></tr></thead><tbody><tr><td style="text-align:left">prototype</td><td style="text-align:left">指向函数的原型对象（包括拥有的变量与方法，constructor ，_proto_）</td><td style="text-align:left">只有函数拥有此属性</td></tr><tr><td style="text-align:left">_proto_</td><td style="text-align:left">指向构造器的原型对象</td><td style="text-align:left">不论对象或者函数都有此属性</td></tr></tbody></table><p>来看下面代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ball</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">　　<span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> basketball = <span class="keyword">new</span> Ball(<span class="string">'basketball'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(basketball.__proto__);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  输出</span></span><br><span class="line"><span class="comment">    constructor: ƒ ball(name)</span></span><br><span class="line"><span class="comment">    arguments: null</span></span><br><span class="line"><span class="comment">    caller: null</span></span><br><span class="line"><span class="comment">    length: 1</span></span><br><span class="line"><span class="comment">    name: "ball"</span></span><br><span class="line"><span class="comment">    prototype: &#123;constructor: ƒ&#125;</span></span><br><span class="line"><span class="comment">    __proto__: ƒ ()</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(ball.prototype)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  输出</span></span><br><span class="line"><span class="comment">    constructor: ƒ ball(name)</span></span><br><span class="line"><span class="comment">    arguments: null</span></span><br><span class="line"><span class="comment">    caller: null</span></span><br><span class="line"><span class="comment">    length: 1</span></span><br><span class="line"><span class="comment">    name: "ball"</span></span><br><span class="line"><span class="comment">    prototype: &#123;constructor: ƒ&#125;</span></span><br><span class="line"><span class="comment">    __proto__: ƒ ()</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(basketball.__proto__ === ball.prototype)</span><br><span class="line"></span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>从结果来看确实跟我们上述的 new 创建对象过程一致。</p><h3 id="面向对象-—-继承"><a href="#面向对象-—-继承" class="headerlink" title="面向对象 — 继承"></a>面向对象 — 继承</h3><h4 id="1、call-apply"><a href="#1、call-apply" class="headerlink" title="1、call/apply"></a>1、call/apply</h4><p>该方式采取的办法是将父对象的构造函数绑定在子对象上。具体如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ball</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.general = <span class="string">"球类运动"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Basketball</span>(<span class="params">name, space</span>) </span>&#123;</span><br><span class="line">    Ball.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.space = space;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bb = <span class="keyword">new</span> Basketball(<span class="string">'耐克7号球'</span>, <span class="string">'室内'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bb.general)</span><br><span class="line"><span class="comment">// 球类运动</span></span><br></pre></td></tr></table></figure><h4 id="2、原型链继承"><a href="#2、原型链继承" class="headerlink" title="2、原型链继承"></a>2、原型链继承</h4><p>使子类原型对象指向父类的原型对象以实现继承。具体如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ball</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.general = <span class="string">"球类运动"</span>;</span><br><span class="line">    <span class="keyword">this</span>.ballprint = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ball'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Basketball</span>(<span class="params">name, space</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.space = space;</span><br><span class="line">    <span class="keyword">this</span>.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'basketball'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Basketball.prototype = <span class="keyword">new</span> Ball();</span><br><span class="line"><span class="keyword">let</span> bb = <span class="keyword">new</span> Basketball(<span class="string">'耐克7号球'</span>, <span class="string">'室内'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bb.general) <span class="comment">// 1、球类运动</span></span><br><span class="line"><span class="built_in">console</span>.log(bb.ballprint()) <span class="comment">// 2、ball</span></span><br><span class="line"><span class="built_in">console</span>.log(bb.name) <span class="comment">// 3、耐克7号球</span></span><br><span class="line"><span class="built_in">console</span>.log(bb.print()) <span class="comment">// 4、basketball</span></span><br><span class="line"><span class="built_in">console</span>.log(Basketball.prototype == Ball.prototype) <span class="comment">// 5、true</span></span><br><span class="line"><span class="built_in">console</span>.log(Basketball.prototype.__proto__ == Ball.prototype) <span class="comment">// 6、true</span></span><br></pre></td></tr></table></figure><p>调试语句5更深层次的意思是说:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Basketball.prototype.constuctor = Ball.prototype.constuctor</span><br></pre></td></tr></table></figure></p><p>因为前面说过每个函数特有 prototype 这个原型对象属性，而在这个原型对象中存有 constuctor ，所以<strong>要使俩函数的 prototype 相等，那么其中的 constuctor 必定也想等</strong>。所以 bb 作为子类才可以访问到 ball 中的属性与方法。语句1&amp;2证明了这一点。</p><p>语句6结果符合 new 操作符的操作。</p><p>如果子类与父类中的属性、方法同名那么结果怎样呢？结果如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ball</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">"球类运动"</span>;</span><br><span class="line">    <span class="keyword">this</span>.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ball'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Basketball</span>(<span class="params">name, space</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.space = space;</span><br><span class="line">    <span class="keyword">this</span>.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'basketball'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Basketball.prototype = <span class="keyword">new</span> Ball();</span><br><span class="line"><span class="keyword">let</span> bb = <span class="keyword">new</span> Basketball(<span class="string">'耐克7号球'</span>, <span class="string">'室内'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bb.name) <span class="comment">// 1、耐克7号球</span></span><br><span class="line"><span class="built_in">console</span>.log(bb.print()) <span class="comment">// 2、basketball</span></span><br><span class="line"><span class="built_in">console</span>.log(Basketball.prototype == Ball.prototype) <span class="comment">// 3、true</span></span><br><span class="line"><span class="built_in">console</span>.log(Basketball.prototype.__proto__ == Ball.prototype) <span class="comment">// 4、true</span></span><br></pre></td></tr></table></figure><p>此时虽然 <code>bb._proto_ = Basketball.prototype = Ball.prototype</code> 但是同名采取的<strong>就近访问的原则</strong>，所以执行 Basketball 中的语句。<strong>而不会通过 _proto_ 原型链去去上级父类寻找变量与方法</strong>。</p><h4 id="3、改进后的原型继承"><a href="#3、改进后的原型继承" class="headerlink" title="3、改进后的原型继承"></a>3、改进后的原型继承</h4><p>因为上述2中的方法会修改构造函数，所以我们应该手动置回。具体如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ball</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">"球类运动"</span>;</span><br><span class="line">    <span class="keyword">this</span>.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ball'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Basketball</span>(<span class="params">name, space</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.space = space;</span><br><span class="line">    <span class="keyword">this</span>.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'basketball'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Basketball.prototype = <span class="keyword">new</span> Ball();</span><br><span class="line">Basketball.prototype.constructor = Basketball;</span><br><span class="line"><span class="keyword">let</span> bb = <span class="keyword">new</span> Basketball(<span class="string">'耐克7号球'</span>, <span class="string">'室内'</span>);</span><br></pre></td></tr></table></figure><p>这样即可。当然这样的继承方式是多占用了些内存，<code>Basketball.prototype = new Ball();</code> ，<strong>当然还有不占内存的方式，比如利用空对象作为中介的方式</strong>。创建了一个临时的对象，理解起来不难。具体请参考：</p><p><a href="http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html" target="_blank" rel="noopener">Javascript面向对象编程（二）：构造函数的继承</a></p><p>阮老师这里介绍的空对象方法，没什么问题。但是我觉得没有把临时对象使用完后手动置空的操作，自己加上即可。</p><h4 id="4、class-extends-关键字实现继承"><a href="#4、class-extends-关键字实现继承" class="headerlink" title="4、class/extends 关键字实现继承"></a>4、class/extends 关键字实现继承</h4><p>es6中引入了类的概念，用 class 关键字声明的函数作为对象模版。具体如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ball</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(name) &#123;</span><br><span class="line"><span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line">play() &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Ball is: '</span>, <span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Basketball</span> <span class="keyword">extends</span> <span class="title">Ball</span> </span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(name) &#123;</span><br><span class="line"><span class="keyword">super</span>(name)</span><br><span class="line"><span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line">playb() &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Basketball is: '</span>, <span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bb = <span class="keyword">new</span> Basketball(<span class="string">'nikeball'</span>)</span><br><span class="line">bb.play(); <span class="comment">// Ball is: nikeball</span></span><br><span class="line">bb.playb(); <span class="comment">// Basketball is: nikeball</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> Ball) <span class="comment">// 1、function</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> Basketball) <span class="comment">// 2、function</span></span><br><span class="line"><span class="built_in">console</span>.log(bb.__proto__ == Basketball.prototype) <span class="comment">// 3、true</span></span><br><span class="line"><span class="built_in">console</span>.log(Basketball.prototype)</span><br><span class="line"><span class="comment">/* 4、</span></span><br><span class="line"><span class="comment">constructor: class Basketball</span></span><br><span class="line"><span class="comment">playb: ƒ playb()</span></span><br><span class="line"><span class="comment">__proto__: Object</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>由打印出的结果1&amp;2我们可以看出，class 好像是包在 function 上的语法糖；由3慢慢确定了这一点；由4我们更加确定了这一点，而且<strong>结合前面说的改进原型继承的方式，还可以尝试分析 class 继承的关键步骤</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Basketball.prototype = <span class="keyword">new</span> Ball()</span><br><span class="line"></span><br><span class="line">Basketball.prototype.constructor = Basketball</span><br><span class="line"></span><br><span class="line"><span class="comment">// playb() &#123;...&#125; 相当于:</span></span><br><span class="line">Basketball.prototype.playb = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;...&#125;</span><br></pre></td></tr></table></figure><p>使用 class 时一定要注意在使用 this 或者子类构造函数返回前，一定要在子类中使用 super 关键字调用父类的构造函数。说白了就是在子类中一定要使用 super 。</p><p>参考资料：</p><p><a href="http://www.cnblogs.com/cshi/p/5476416.html" target="_blank" rel="noopener">JS当中的new关键字都干了些什么？</a></p><p><a href="http://www.cnblogs.com/pssp/p/5204324.html" target="_blank" rel="noopener">作用域链与原型链</a></p><p><a href="http://louiszhai.github.io/2015/12/17/prototype/" target="_blank" rel="noopener">详解prototype与_proto_</a></p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> prototype/_proto_ </tag>
            
            <tag> 面向对象 </tag>
            
            <tag> 继承 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac下利用Alfred与七牛搭建markdown图床</title>
      <link href="/2018/01/13/Mac%E4%B8%8B%E5%88%A9%E7%94%A8Alfred%E4%B8%8E%E4%B8%83%E7%89%9B%E6%90%AD%E5%BB%BAmarkdown%E5%9B%BE%E5%BA%8A.html"/>
      <url>/2018/01/13/Mac%E4%B8%8B%E5%88%A9%E7%94%A8Alfred%E4%B8%8E%E4%B8%83%E7%89%9B%E6%90%AD%E5%BB%BAmarkdown%E5%9B%BE%E5%BA%8A.html</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在使用hexo与gitpage完成个人博客搭建后，在写博客时想插入图片总是需要外链，感觉很繁琐。刚好在利用alfred的workflow后觉得能不能把整套手动获取图片外链的动作变成自动化的动作，来用热键触发。搜了下相关的文章自己踩了不少坑最终还是完成了，总结出来避免大家后面踩坑。</p><h3 id="前期准备："><a href="#前期准备：" class="headerlink" title="前期准备："></a>前期准备：</h3><ul><li>可以使用workflow的alfred（能支持正版最好不过我还是准备了链接，位置在文章最后）</li></ul><a id="more"></a><ul><li>七牛账号&amp;七牛自动化工具qshell</li><li>截图工具（这个也可以没有，可以利用电脑自带的截图功能，只要保证截图动作后的结果处于剪切板中即可）</li></ul><h3 id="第一部分：（七牛操作）"><a href="#第一部分：（七牛操作）" class="headerlink" title="第一部分：（七牛操作）"></a>第一部分：（七牛操作）</h3><h4 id="第一步："><a href="#第一步：" class="headerlink" title="第一步："></a>第一步：</h4><p>注册成功登陆后，单击 管理控制台 -&gt; 对象存储 -&gt; 内容管理 找到外链默认域名，复制并保存。</p><h4 id="第二步："><a href="#第二步：" class="headerlink" title="第二步："></a>第二步：</h4><p>返回首页，单击 服务与支持 -&gt; 开发者中心 -&gt; sdk与工具 -&gt; 开发者工具 -&gt; qshell 进入后按照提示下载并安装。</p><h4 id="第三步："><a href="#第三步：" class="headerlink" title="第三步："></a>第三步：</h4><p>创建账户时，除了ak&amp;sk 现在还需要输入七牛账户名；配置upload.conf文件时需要注意如果本地新增文件七牛默认不会自动检查，你需要设置 rescan_local: true ;如果你在七牛空间（web页）中手动删除某个文件，再次上传该文件的时候七牛默认该文件已经存在空间中，不会再上传该文件，你需要配置 check_exists: true 。</p><h3 id="第二部分：（alfred-workflow操作）"><a href="#第二部分：（alfred-workflow操作）" class="headerlink" title="第二部分：（alfred workflow操作）"></a>第二部分：（alfred workflow操作）</h3><h4 id="第一步：-1"><a href="#第一步：-1" class="headerlink" title="第一步："></a>第一步：</h4><p><img src="/2018/01/13/Mac下利用Alfred与七牛搭建markdown图床/i7eo_6ae05412c45cd93d76aee7dfc829ee6d.png" alt=""></p><p>点击 + ，创建blank workflow即可，注意bundle id必填一个唯一值，能够在alfred中标示你这个workflow即可，其余选项正常填写，category默认选项即可。</p><h4 id="第二步：-1"><a href="#第二步：-1" class="headerlink" title="第二步："></a>第二步：</h4><p><img src="/2018/01/13/Mac下利用Alfred与七牛搭建markdown图床/i7eo_67ef692bcaa2e05863e0aed092834efd.png" alt=""></p><p>创建热键hotkey，其余默认选项不变，完成后save。</p><p><img src="/2018/01/13/Mac下利用Alfred与七牛搭建markdown图床/i7eo_959e803647132d100867bf95fd3f2b97.png" alt=""></p><p>创建热键触发后需要执行的脚本文件，当然run script创建的脚本是后台运行不需要先调出terminal（控制台），如果需要调出terminal（控制台），选择terminal command。<br>根据脚本语言对应选择language，这里提供一个as版本代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">property fileTypes : &#123;¬</span><br><span class="line">    &#123;«class PNGf», ".png"&#125;, ¬</span><br><span class="line">    &#123;JPEG picture, <span class="string">".jpg"</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">on getType() --判断剪贴板中的数据类型，暂时只支持png和jpg，优先用png</span><br><span class="line">    repeat <span class="keyword">with</span> aType <span class="keyword">in</span> fileTypes</span><br><span class="line">        repeat <span class="keyword">with</span> theInfo <span class="keyword">in</span> (clipboard info)</span><br><span class="line">            <span class="keyword">if</span> (first item <span class="keyword">of</span> theInfo) is equal to (first item <span class="keyword">of</span> aType) then <span class="keyword">return</span> aType</span><br><span class="line">        end repeat</span><br><span class="line">    end repeat</span><br><span class="line">    <span class="keyword">return</span> missing value</span><br><span class="line">end getType</span><br><span class="line"></span><br><span class="line">set theType to getType()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> theType is not missing value then</span><br><span class="line">    set filePath to <span class="string">"/Users/xxx/Documents/screenCaptures/"</span> --这里换成你自己放置图片的路径</span><br><span class="line">    set fileName to <span class="keyword">do</span> shell script <span class="string">"date \"+%Y%m%d%H%M%S\" | md5"</span> --用当前时间的md5值做文件名</span><br><span class="line">set prefix to <span class="string">"i7eo_"</span> -- 改成自己的前缀</span><br><span class="line">    <span class="keyword">if</span> fileName does not end <span class="keyword">with</span> (second item <span class="keyword">of</span> theType) then set fileName to (fileName &amp; second item <span class="keyword">of</span> theType <span class="keyword">as</span> text)</span><br><span class="line">    set markdownUrl to <span class="string">"![截图](http://xxx.com/i7eo_"</span> &amp; fileName &amp; <span class="string">")"</span> --这里如果没有用到图床，就把前面前缀去掉，用到的话换成你自己图床的url</span><br><span class="line">    set filePath to filePath &amp; prefix &amp; fileName</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">        set imageFile to (open <span class="keyword">for</span> access filePath <span class="keyword">with</span> write permission)</span><br><span class="line">        set eof imageFile to <span class="number">0</span></span><br><span class="line">        write (the clipboard <span class="keyword">as</span> (first item <span class="keyword">of</span> theType)) to imageFile -- <span class="keyword">as</span> whatever</span><br><span class="line">        close access imageFile</span><br><span class="line">        set the clipboard to markdownUrl</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">            tell application <span class="string">"System Events"</span></span><br><span class="line">                keystroke <span class="string">"v"</span> using command down</span><br><span class="line">            end tell</span><br><span class="line">        end <span class="keyword">try</span></span><br><span class="line">    on error</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">            close access imageFile</span><br><span class="line">        end <span class="keyword">try</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">    end <span class="keyword">try</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">end <span class="keyword">if</span></span><br></pre></td></tr></table></figure></p><p>把 <code>http://xxx.com/</code><br>改为之前从七牛默认外链处复制出来的地址。</p><h4 id="第三步：-1"><a href="#第三步：-1" class="headerlink" title="第三步："></a>第三步：</h4><p>再次创建一个blank workflow，热键自己设置；再次创建一个as脚本，具体代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> shell script <span class="string">"/usr/local/bin/qshell qupload ~/.qshell/upload.conf"</span></span><br></pre></td></tr></table></figure></p><p>把qupload前的路径换成自己存放七牛qshell文件的位置。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个方法适合写博客时，把该篇博客需要的图片都存放在同一个文件下，写完后一次性上传至七牛空间。然后在把博客推至gitpage即可。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果想每次插入一张图片就上传，可以使用插件 <a href="https://github.com/jiwenxing/qimage-mac" target="_blank" rel="noopener">Mac 版本的 Markdown 一键贴图工具</a></p><p><a href="https://www.jianshu.com/p/5b3f98b1f7b6" target="_blank" rel="noopener">alfred3 Powerpack</a></p>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Alfred3 workflow </tag>
            
            <tag> 图床 </tag>
            
            <tag> qshell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为git page开通https踩坑实录</title>
      <link href="/2017/10/01/%E4%B8%BAgitPages%E5%BC%80%E9%80%9Ahttps%E8%B8%A9%E5%9D%91%E5%AE%9E%E5%BD%95.html"/>
      <url>/2017/10/01/%E4%B8%BAgitPages%E5%BC%80%E9%80%9Ahttps%E8%B8%A9%E5%9D%91%E5%AE%9E%E5%BD%95.html</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;利用hexo与gitpage开通博客后，无论是pc&amp;mobile登陆时总会发现地址栏前有个感叹号。强迫症表示真的看不下去，所以就去了解了下https。</p><h3 id="HTTPS的优点"><a href="#HTTPS的优点" class="headerlink" title="HTTPS的优点"></a>HTTPS的优点</h3><ul><li>了解到https是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。</li><li>最重要的一点，https可以避免dns挟持，就是可以避免在浏览网页时出现一些小广告弹窗！</li></ul><a id="more"></a><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;结合自己的代码发现引用的图片全是http协议下的，而且在input（即使type≠keyword）输入内容时感叹号变成了红字叉。我所用的是阿里的域名所以去网站查询https的信息，发现有免费的赛门铁克（Symantec）证书试用。果断申请后，发现：</p><h3 id="gitPages注意事项"><a href="#gitPages注意事项" class="headerlink" title="gitPages注意事项"></a>gitPages注意事项</h3><ul><li>git page自带https，在对应rep的设置中，点击 Enforce HTTPS 即可。</li><li>git page绑定自定义域名后无法添加ssl证书。<br>这个时候有点懵了，不过检索多次相关关键字后，发现了cloudflare这个好东西。大概了解了下后就确定用它了，好处如下：</li></ul><h3 id="安利cloudflare的原因"><a href="#安利cloudflare的原因" class="headerlink" title="安利cloudflare的原因"></a>安利cloudflare的原因</h3><ul><li>有免费套</li><li>cloudflare的dns服务器风评还是不错的<br>-cloudflare提供 Universal SSL 服务，简单来说就是让任意http站点支持https。<br>  （具体原理指的是，用cloudflare的dns服务器，当你访问网页时，网页 -&gt; cloudflare 这个过程是加密的，而 cloudflare -&gt; git page这个过程是非加密（http））</li></ul><p>具体可参考官方文档：<a href="https://support.cloudflare.com/hc/en-us/articles/200170416" target="_blank" rel="noopener"> how Cloudflare’s servers connect to your origin for HTTPS requests</a></p><h3 id="cloudflare配置的具体步骤"><a href="#cloudflare配置的具体步骤" class="headerlink" title="cloudflare配置的具体步骤"></a>cloudflare配置的具体步骤</h3><h4 id="第一步：设置dns"><a href="#第一步：设置dns" class="headerlink" title="第一步：设置dns"></a>第一步：设置dns</h4><p>把自己对应的dns服务器改为cloudflare的，下面以阿里来举例。阿里云 -&gt; 域名 -&gt; 管理 -&gt; 修改dns，出现一下界面：</p><p><img src="为gitPages开通https踩坑实录/i7eo_4436910aa5b1e131037aa2f6007f7d23.png" alt=""></p><p>这是我已经修改后的，单击右边的修改dns服务器即可，把cloudflare给出的俩个dns地址换上来就好。cloudflare给出的dns地址位于：cloudflare -&gt; dns -&gt; Cloudflare Nameservers。</p><p>如何判断更换dns成功？<br>回到cloudflare后，单击overview，如果成功会出现：</p><p><img src="为gitPages开通https踩坑实录/i7eo_be5528c7b4f28ce887136746b5de2d03.png" alt=""></p><h4 id="第二步：设置dns信息"><a href="#第二步：设置dns信息" class="headerlink" title="第二步：设置dns信息"></a>第二步：设置dns信息</h4><p>cloudflare -&gt; dns -&gt; DNS Records 如果这里没设置时有记录先删除，新增一条记录:</p><p><img src="为gitPages开通https踩坑实录/i7eo_a726bae253f790060294d739a7ea706f.png" alt=""></p><h4 id="第三步：设置ssl-amp-强制跳转"><a href="#第三步：设置ssl-amp-强制跳转" class="headerlink" title="第三步：设置ssl&amp;强制跳转"></a>第三步：设置ssl&amp;强制跳转</h4><p>cloudflare -&gt; crypto -&gt; SSL 勾选flexible</p><p>cloudflare -&gt; crypto -&gt; Always Use HTTPS 勾选on</p><h4 id="第四步：坐等-amp-排错"><a href="#第四步：坐等-amp-排错" class="headerlink" title="第四步：坐等&amp;排错"></a>第四步：坐等&amp;排错</h4><p>大概10mins - 30mins左右就会生效，可以在等待的时候使用ping命令来ping个人的域名查看ip。</p><p>如果你的博客出现以下情况：</p><p><img src="为gitPages开通https踩坑实录/i7eo_65772c9053e1e9b5a941fa515bc3c3f5.png" alt=""></p><p>检查gitpage的设置，取消掉勾选的Enforce HTTPS选项，这个设置是有缓存的</p><p><img src="为gitPages开通https踩坑实录/i7eo_ee6b38aa59be590bd6736c90911683a4.png" alt=""></p><p>可以切换source或者theme chooser这样可以清理掉缓存的Enforce HTTPS选项信息。</p><p>参考文章：</p><p><a href="https://steffan.cn/2017/03/22/use-cloudflare-to-implement-HTTPS-for-GithubPages-with-custom-domain-names/" target="_blank" rel="noopener">使用Cloudflare为自定义域名的GithubPages实现HTTPS化</a></p><p><a href="https://www.heartnn.com/2018/11/17/resolve-err-too-many-redirects-on-cloudflare/" target="_blank" rel="noopener">解决Cloudflare产生的“ERR_TOO_MANY_REDIRECTS”错误</a></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cloudflare </tag>
            
            <tag> https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手撕值传递&amp;对象深浅拷贝</title>
      <link href="/2017/05/20/%E6%89%8B%E6%92%95%E5%80%BC%E4%BC%A0%E9%80%92.html"/>
      <url>/2017/05/20/%E6%89%8B%E6%92%95%E5%80%BC%E4%BC%A0%E9%80%92.html</url>
      
        <content type="html"><![CDATA[<h3 id="值传递"><a href="#值传递" class="headerlink" title="值传递"></a>值传递</h3><blockquote><ol><li>JS 中的基本类型&amp;引用类型分别是什么？</li><li>基本类型&amp;引用类型如何存储？</li><li>值传递的由来&amp;举例说明值传递的过程</li><li>扩展阅读（call-by-sharing）</li></ol></blockquote><h4 id="JS-中的基本类型"><a href="#JS-中的基本类型" class="headerlink" title="JS 中的基本类型"></a>JS 中的基本类型</h4><p>JS 中的基本类型分别是：Number、String、Boolean、undefined、null；引用类型分别是：Function、Object、Array 等。</p><h4 id="基本类型-amp-引用类型存储"><a href="#基本类型-amp-引用类型存储" class="headerlink" title="基本类型&amp;引用类型存储"></a>基本类型&amp;引用类型存储</h4><p>基本类型均存储在栈中而且</p><a id="more"></a><p>在栈中的大小是在引擎中固定的，所以基本类型的包装类型（Number&amp;String&amp;Boolean）的生命周期很短，因为一旦包装类型的生命周期变长，对应的栈中内存会发生变化，导致内存出现问题。而引用类型的存储分为俩部分，在栈中存储对应变量的引用（理解为地址好一点），堆中存放真正的数据。每次都是根据栈中的地址而找到对应的堆中存放的位置，进行读写。代码和图示如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pen = <span class="string">'hero'</span>;</span><br><span class="line"><span class="keyword">var</span> pencil = <span class="string">'zhonghua'</span>;</span><br><span class="line"><span class="keyword">var</span> pencil_box = &#123; <span class="attr">eraser</span>: <span class="string">'xiaoxiao'</span> &#125;;</span><br></pre></td></tr></table></figure><p><img src="/2017/05/20/手撕值传递/i7eo_13671635cc8398be0b9a302604ab2140.png" alt=""></p><p>这里补充一个关于包装对象的问题。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="string">'test'</span>;</span><br><span class="line">test.color = <span class="string">'red'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(test.color); <span class="comment">// test.color 输出什么？</span></span><br></pre></td></tr></table></figure><p>输出 undefined，引用类型与基本包装类型的主要区别就是对象的生命周期（在上述已经说明生命周期过长会发生什么）。自动创建的基本包装类型的对象只存在于执行代码后的瞬间，然后被销毁。</p><h4 id="值传递的过程"><a href="#值传递的过程" class="headerlink" title="值传递的过程"></a>值传递的过程</h4><p><strong>ECMAScript 中所有函数的参数都是按值传递</strong>。也就是说，把函数外部的值复制给函数内部的参数，就和把值从一个变量复制到另一个变量一样。基本类型值的传递如同基本类型变量的复制一样，而引用类型值的传递，则如同引用类型变量的复制一样。访问变量有按值和按引用俩种方式，而参数只能按值传递。值传递代码和图示如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTen</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">num += <span class="number">10</span>;</span><br><span class="line"><span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> count = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> result = addTen(count);</span><br><span class="line"><span class="built_in">console</span>.log(count); <span class="comment">// 20</span></span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 30</span></span><br></pre></td></tr></table></figure><p><img src="/2017/05/20/手撕值传递/i7eo_a75f9f1c713dcb5407001d3399033f27.png" alt=""></p><p>改为对象再试试看：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setName</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">obj.name = <span class="string">'Nicholas'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = &#123;&#125;;</span><br><span class="line">setName(person);</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// "Nicholas"</span></span><br></pre></td></tr></table></figure><p>因为 person 指向的对象在堆内存中只有一个，而且是全局的。有很多人错误地认为：在局部作用域中（setName 中）修改的对象会在全局作用域中（<code>console.log( person.name )</code>）反映出来就说明参数按引用传递。为了证明对象是按值传递，再来看下面的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setName</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">obj.name = <span class="string">'Nicholas'</span>;</span><br><span class="line">obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">obj.name = <span class="string">'Greg'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">setName(person);</span><br><span class="line"><span class="built_in">console</span>.log(person.name);</span><br></pre></td></tr></table></figure><p>这个时候输出的会是什么？是 “Nicholas”？还是 “Greg”？好吧，先来一个错误答案</p><p>“Greg”（即引用传递） 的图示：</p><p><img src="/2017/05/20/手撕值传递/i7eo_810dcfce80fafb90c2bddbf0e69fcb31.png" alt=""></p><p>调用 setName 执行到 <code>obj = new Object();</code> 时会断开 person 原先指向堆中的连接（图中红叉处）从而指向新开辟的内存空间（new Object()），然后设置 obj 的 name 属性。正确的结果应该是 “Nicholas” 图示如下：</p><p><img src="/2017/05/20/手撕值传递/i7eo_249d6356d297448af0ba9f77d8f90c12.png" alt=""></p><p>传入的 obj 只是对 person 对象的引用进行了复制，执行 obj = new Object(); 时只是让复制后的 person 对象的引用指向了 新开辟的空间（new Object()）。</p><h3 id="引用类型的深浅拷贝"><a href="#引用类型的深浅拷贝" class="headerlink" title="引用类型的深浅拷贝"></a>引用类型的深浅拷贝</h3><p>浅拷贝最简单的方法就是直接利用 <code>=</code> 赋值，这样的话改变一个值，另一个也跟着变化。原理就是因为这样简单地赋值结果共用的是同一块内存。这个不管是 Array 还是 Object都很简单就不举例了。在这里想着重说的一个知识点是关于 Array 的 slice&amp;concat 方法，很多很多网文都把这俩个方法说成了 Array 的深拷贝方法，其实这是错的。为什么？请看下例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>] ];</span><br><span class="line"><span class="keyword">var</span> arr2 = arr1.slice(); <span class="comment">// 换成 var arr2 = arr1.concat(); 结果不变</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1,arr2);</span><br><span class="line">arr1[<span class="number">2</span>][<span class="number">0</span>] = <span class="string">'ss'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr1,arr2); <span class="comment">// arr1[2][0] = 'ss' , arr2[2][0] = 'ss'</span></span><br></pre></td></tr></table></figure><p>如果是二维数组，如上代码。通过查看 <code>arr1[2][0]&amp;arr2[2][0]</code> 的结果我们可以发现这并不是深拷贝，因为改变了 <code>arr1[2][0]</code> 后 <code>arr2[2][0]</code> 也顺势改变。但如果是一维数组，则不会有任何问题。如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = arr1.slice();</span><br><span class="line"><span class="built_in">console</span>.log(arr1,arr2);</span><br><span class="line">arr1[<span class="number">0</span>] = <span class="string">'ss'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr1,arr2); <span class="comment">// arr1 = ['ss', 2, 3] , arr2 = [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>难道只是因为数组的维数不同吗？不是的，应该说是我们并没有深层次地明白什么叫浅拷贝？什么叫深拷贝？</p><p>浅拷贝只复制一层引用类型对象的属性。深拷贝不仅将原对象的各个属性逐个复制出去，而且将原对象各个属性所包含的对象也依次采用深复制的方法递归复制到新对象上。代码和图示，请查看知乎上关于这个问题的回答 <a href="https://www.zhihu.com/question/23031215" target="_blank" rel="noopener">javascript中的深拷贝和浅拷贝？</a><br>通吃数组与对象的深拷贝代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cloneObj = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> str, newobj = obj.constructor === <span class="built_in">Array</span> ? [] : &#123;&#125;;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> obj !== <span class="string">'object'</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">window</span>.JSON)&#123;</span><br><span class="line">    str = <span class="built_in">JSON</span>.stringify(obj), <span class="comment">//系列化对象</span></span><br><span class="line">    newobj = <span class="built_in">JSON</span>.parse(str); <span class="comment">//还原</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> obj)&#123;</span><br><span class="line">        newobj[i] = <span class="keyword">typeof</span> obj[i] === <span class="string">'object'</span> ?</span><br><span class="line">        cloneObj(obj[i]) : obj[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> newobj;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>JSON.stringify()&amp;JSON.parse()可以进行引用对象的拷贝，但是对古老浏览器（IE6—IE8）的兼容性问题即你得先查看（window.JSON）浏览器是否有 JSON 对象。如果没有可以引用 <a href="https://github.com/douglascrockford/JSON-js/blob/master/json2.js" target="_blank" rel="noopener">json2.js</a> 文件。如果数组值为函数，该方法也是不行的。</p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>　　<br>　　尽管 pass-by-reference（引用传递）与 pass-by-value （值传递）存在了很长一段时间，但是外国小哥提出了一种 pass-by-sharing 的说法，感兴趣的同学可以看看。<a href="http://stackoverflow.com/questions/518000/is-javascript-a-pass-by-reference-or-pass-by-value-language" target="_blank" rel="noopener">Is JavaScript a pass-by-reference or pass-by-value language?</a></p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 值传递 </tag>
            
            <tag> 深拷贝 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手撕闭包</title>
      <link href="/2017/05/12/%E6%89%8B%E6%92%95%E9%97%AD%E5%8C%85.html"/>
      <url>/2017/05/12/%E6%89%8B%E6%92%95%E9%97%AD%E5%8C%85.html</url>
      
        <content type="html"><![CDATA[<p>既然说到了手撕那么我们就按照下列顺序一步步来看。</p><blockquote><ol><li>闭包是什么?</li><li>闭包产生过程详解</li><li>闭包常用场景示例</li></ol></blockquote><h3 id="闭包是什么？"><a href="#闭包是什么？" class="headerlink" title="闭包是什么？"></a>闭包是什么？</h3><blockquote><ol><li>高程三：闭包是指有权访问另一个函数作用域中的变量的函数。</li><li>Javasript Ninja：闭包是一个函数在创建时允许该自身函数访问并操作该自身函数之外的变量时所创建的作用域。</li><li>…<br>总结一下，闭包是<strong>有权操作</strong>除自己外函数作用域中变量的函数。</li></ol></blockquote><a id="more"></a><p>这里对于上面的总结我们需要注意的有三点，也就是闭包的三个特点。首先闭包是一个 <strong>函数</strong>，其次闭包具有操作（读写）<strong>除自己外函数作用域</strong>的能力，最后闭包可以操作（读写）的是 <strong>变量</strong>。</p><h3 id="闭包产生过程详解"><a href="#闭包产生过程详解" class="headerlink" title="闭包产生过程详解"></a>闭包产生过程详解</h3><p>这里还是取大家常看的高程三上的例子来举例说明。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createComparisonFunction</span> (<span class="params">propertyName</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">obj1, obj2</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> val1 = obj1[propertyName];</span><br><span class="line"><span class="keyword">var</span> val2 = obj2[propertyName];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (val1 &lt; val2) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (val1 &gt; val2) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> compareNames = createComparisonFunction(<span class="string">"name"</span>);</span><br><span class="line"><span class="keyword">var</span> result = compareName(&#123; <span class="attr">name</span>: <span class="string">"Nicholas"</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">"Greg"</span> &#125;);</span><br></pre></td></tr></table></figure><p>下列 AO，代表执行环境中创建的 activity object，可以对应 variable object（VO） 来记忆。此时 js 引擎中的处理顺序如下图：</p><p><img src="/2017/05/12/手撕闭包/i7eo_c35262cc6520474fdd31c7c3a782e043.png" alt=""></p><p> <strong>此时匿名函数中的val1/val2 获得了 propertyName ，拥有了读的能力，所以形成了闭包。而且在匿名函数的执行环境中不仅包括了自己的 AO 还包括了 createComparsonFunction 执行环境的 AO（分别有 createComparson AO&amp;Global AO）</strong>，如下图：</p><p><img src="/2017/05/12/手撕闭包/i7eo_eaa71c1098d03e0eb1d93ad4614d94ef.png" alt=""></p><p>什么是 VO? 什么是执行环境？可以参考我的上一篇文章<a href="https://i7eo.com/2017/05/10/手撕作用域与上下文.html">手撕作用域&amp;上下文</a><br>由上我们知道了 <strong>闭包其实在形成的过程中携带了包含它的函数的作用域</strong>，正因为如此，所以闭包才有读写除自己外函数作用域中变量的能力。但这样<strong>拥有过多作用域会占用大量内存 </strong>，我们可以通过 <code>compareNames = null;</code>来手动释放内存。如果大量使用闭包的话，我们不可能一个个手动去释放内存，所以还是请大家慎用闭包。</p><h3 id="闭包应用场景"><a href="#闭包应用场景" class="headerlink" title="闭包应用场景"></a>闭包应用场景</h3><h4 id="私有变量-——-限制变量作用域"><a href="#私有变量-——-限制变量作用域" class="headerlink" title="私有变量 —— 限制变量作用域"></a>私有变量 —— 限制变量作用域</h4><p>说得简单点就是模拟其他面向对象语言中的变量修饰符 private，给变量增加权限控制。示例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ninja</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> feints = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">this</span>.getFeints = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> feints;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">this</span>.feint = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">feints++;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ninja = <span class="keyword">new</span> Ninja();</span><br><span class="line">ninja.feint();</span><br><span class="line"><span class="built_in">console</span>.log(ninja.getFeints() == <span class="number">1</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>使变量 feints 私有，让外部不能直接访问。如果想访问只能通过 getFeints 方法访问，这里的 getFeints 方法即形成了闭包，因为在这个函数中拥有访问 feints 变量的能力。这里如果将  <code>var feints = 0;</code> 改为 <code>this.feints = 0;</code> 外部即可访问 =。= 聪明的你一定一眼就看出了为什么吧？就是因为上下文！可以参考我的上一篇文章 <a href="https://i7eo.com/2017/05/10/手撕作用域与上下文.html">手撕作用域&amp;上下文</a></p><h4 id="回调（callback）与计时器（timer）"><a href="#回调（callback）与计时器（timer）" class="headerlink" title="回调（callback）与计时器（timer）"></a>回调（callback）与计时器（timer）</h4><p>来看一个回调的例子。如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#btn'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> elem = $(<span class="string">'btnObject'</span>);</span><br><span class="line">elem.html(<span class="string">"Loading ..."</span>);</span><br><span class="line"></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url: <span class="string">'test.html'</span>,</span><br><span class="line">success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">elem.html(data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在 success 回调中有能力操作 elem ，即形成了闭包。计时器类似，大家可以自己去写写类似的。</p><h4 id="即时函数与闭包的组合"><a href="#即时函数与闭包的组合" class="headerlink" title="即时函数与闭包的组合"></a>即时函数与闭包的组合</h4><p>　　由于即时函数是立即执行，<strong>其内部所有的函数、所有的变量都局限于其内部作用域&gt;。我们可以使用即时函数创建一个临时作用域，用于存储数据状态</strong><br>。想起一到经典的 JS题目。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFuntcions</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> result = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">result[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么 result 总是10？因为每个函数的作用域链中都保存着createFunction 的活动对象，所以他们引用的都是同一个变量 i 。当 createFunction 返回后 i 的值为 10 ，此时每个函数都引用着保存变量 i 的同一个变量对象，所以每个函数内部 i 的值都是10。(所有函数都拥有的是同一个词法作用域，要想使每一个闭包保留当时的对i的引用，我们需要对每一个闭包新建一个作用域。)可以使用立即执行函数&amp;let创建函数作用域&amp;块级作用域改进代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFuntcions</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> result = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">result[i] = (<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;)(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">result[i] = <span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闭包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手撕作用域与上下文</title>
      <link href="/2017/05/10/%E6%89%8B%E6%92%95%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E4%B8%8A%E4%B8%8B%E6%96%87.html"/>
      <url>/2017/05/10/%E6%89%8B%E6%92%95%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E4%B8%8A%E4%B8%8B%E6%96%87.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>　先来抛出结论：</p><ol><li>作用域与上下文肯定<strong>不是一回事</strong>。</li><li>作用域是<strong>由 function 进行声明的</strong>而非代码块（{ }）。</li><li>除了全局作用域，函数只要被声明（创建了），它就有了独立的作用域。</li><li>我们<strong>常说的上下文指的是 this</strong>，这里其实对 this 更准确的说法应该被称为<strong>函数上下文（function context）</strong>。</li><li>各大网文与部分书籍中所讲解的上下文，其实是<strong>执行环境（execution context）有的地方也称为执行上下文/执行上下文环境</strong>。这个执行环境<strong>不仅确定了 this （即我们常说的上下文对象），还确定了将各个作用域联系起来的作用域链</strong>。</li><li><strong>执行环境并不是我们常说的上下文</strong>，而是用来确定它的指向。</li><li>本文中将采用高程3的说法 — 执行环境。</li></ol></blockquote><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>在 Javascript 中，作用域是由 function 声明的，而不是代码块。声明的作用域创建于代码块，但不终于代码块（其他语言终于代码块）。查看以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>) &#123;</span><br><span class="line"> 　<span class="keyword">var</span> x = <span class="string">'123'</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> alert(x);</span><br></pre></td></tr></table></figure><p>在其它语言中，x 终结于大括号关闭处，alert 弹出 undefined。</p><a id="more"></a><p>但是这里还是会出现 123，这是因为<strong>Javascript 中并没有块级作用域的概念</strong>。这样看起来很简单，但是其中还是有一些细微的差别。如下：</p><blockquote><ol><li>变量声明的作用域开始于声明开始的地方，结束于所在函数的结尾。</li><li>函数可以在其作用域范围内被提前引用（被提升），但变量不行。</li><li>对于作用域声明，全局作用域就像一个包含页面所有代码的超大型函数。</li></ol></blockquote><p><strong>函数提升的详细原因参照下述的 </strong>三、执行环境<strong> 中的内容</strong>。</p><p>来看下面代码：</p><p><img src="/2017/05/10/手撕作用域与上下文/i7eo_8f9183aeaa7a8ac5b3d706776260afc3.png" alt=""></p><p>对于这段代码，执行调用 outer() 时，outer 函数中按照从上到下的顺序执行代码，<strong>当进入第2行时（在 outer 中，变量 a 声明前），inner 已经在作用域（scope）中，此时作用域中有 outer () 与 inner()</strong>。之后执行第 2 行，现在 a 也在 scope 中。当进入第 4 行时（在 outer 中，inner() 与 a 之后），由于函数声明提前这里第 3 行相当于已经提前执行，所以越过第 3 行，直接执行第 4 行。后面过程以此类推。</p><h3 id="上下文（即我们常说的-this）"><a href="#上下文（即我们常说的-this）" class="headerlink" title="上下文（即我们常说的 this）"></a>上下文（即我们常说的 this）</h3><p>在开始上下文之前我们需要明白我们研究的 <strong>this 是从哪里来的</strong>。其实这个问题很简单，在我们<strong>调用函数的时候关注点总是在可以看到的函数参数上面</strong>，而没有注意到俩个隐式（implicit）参数—— arguments 与 this。arguments 参数是传递给函数的一个所有参数的集合，它本质不是数组但是有 length 属性，所以我们更喜欢叫它类数组。<strong>this 参数引用了与该函数调用进行隐式关联的一个对象（这里需要注意，上下文是一个对象！），被称为函数上下文（function context）</strong>。</p><p><strong>不同的方法进行函数调用决定了函数上下文的不同</strong>。总结如下：</p><blockquote><ol><li>作为普通函数进行调用时，其上下文是全局对象（window）。</li><li>作为方法调用的时候，其上下文是拥有该方法的对象。</li><li>作为构造器进行调用时，其上下文是一个新分配的对象。</li><li>通过函数的 apply/call 方法进行调用时，上下文可以设置成任意值。</li></ol></blockquote><p>对于上述的 1、2 点我们来看以下代码：</p><p><img src="/2017/05/10/手撕作用域与上下文/i7eo_ca9ce4132a8ca343821d2a3e65aac5d5.png" alt=""></p><p>1-4 行代码，都是<strong>作为普通函数调用，上下文为window</strong>。6-12 行代码，都是<strong>做为方法调用，上下文是拥有该方法的对象（ninja1、ninja2）</strong>。对于第<br> 3 点我们来看下列代码：</p><p><img src="/2017/05/10/手撕作用域与上下文/i7eo_6e653440daf608d20a7651f8b5b26327.png" alt=""></p><p>这时的<strong>上下文指新创建的 ninja </strong>，通过第 8 行代码测试，我们发现 skulk 方法返回的是构造器对象本身。对于第 4 点我们来看下列代码：</p><p><img src="/2017/05/10/手撕作用域与上下文/i7eo_522ab435a82632051edcfa0d3b2f341e.png" alt=""></p><p><strong>通过 apply&amp;call 我们可以分别将上下文从 juggle 切换至 ninja1&amp;ninja2</strong>。</p><p>对于 apply&amp;call 我们很常用，所以扩展也很多。下面列出一个自定义 forEach 函数：</p><p><img src="/2017/05/10/手撕作用域与上下文/i7eo_7c74ee279add6ac0b6ebfaf081005452.png" alt=""></p><p>这个例子，列出了<strong>如何在回调中指定上下文</strong>，而在这里的9-12行我们也验证了如上所说的，this （上下文）是一个对象。因为在第 3 行代码处，我们传入的 <code>List[i]</code> 的类型是 string，但是经过 call 将其指定成上下文对象后在第 10 行我们比较时发现 <code>this === heroList[index]</code> 结果为 false，第 11 行验证了上下文确实是一个对象。这里是一个 String 对象具体信息就不再深究了，有兴趣的同学可以打印 this 出来看看。</p><h3 id="执行环境（执行上下文-执行上下文环境）"><a href="#执行环境（执行上下文-执行上下文环境）" class="headerlink" title="执行环境（执行上下文/执行上下文环境）"></a>执行环境（执行上下文/执行上下文环境）</h3><p>　　这里再次重新声明，执行环境并不是我们常说的上下文，我们常说的上下文指的是 this（函数上下文）。该执行环境确定了作用域链（scope chain）与 this 。来一段高程三中对于执行环境的介绍如下：</p><blockquote><ol><li>执行环境（execution context，为简单起见，有时也称为“环境”）是Javascript中最重要的一个概念。执行环境定义了变量和函数有权访问的其他数据，决定了它们各自的行为。每个执行环境都有一个与之关联的变量对象（variable object），环境中定义的所有变量和函数都保存在这个对象中。虽然我们编写的代码无法访问这个对象，但解析器在处理数据时会在后台使用它。</li><li>全局执行环境是最外围的一个执行环境。根据ECMAScript 实现所在宿主环境不同，表示执行环境的对象也不一样。在Web浏览器中，全局执行环境被认为是 window 对象，因此所有全局变量和函数都是作为 window 对象的属性和方法创建的。某个执行环境中的所有代码执行完毕后，该环境被销毁，保存在其中的所有变量和函数定义也随之销毁（全局执行环境直到应用程序退出——例如关闭网页或浏览器——时才会被销毁）。</li><li>每个函数都有自己的执行环境。当执行环境流入一个函数时，函数的环境就会被推入一个环境栈中。而在函数执行之后，栈将其环境弹出，把控制权返回给之前的执行环境。ECMAScript 程序中的执行流正在由这个方便的机制控制着。</li></ol></blockquote><p>简洁明了，这里对于纯文字看着可能比较苦涩。来个图片以及例子，大家可以结合着消化。下面先给出 js 引擎执行函数时的进出栈图。</p><p><img src="/2017/05/10/手撕作用域与上下文/i7eo_61842777393ab2c3694af41d4b8c35ad.png" alt=""></p><p>根据这幅图，大家结合下面代码与 executionContextAction.gif 可以很清楚的理解js线程工作的方式。代码片段：<br>　　<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (i === <span class="number">3</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">       foo(++i);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;(<span class="number">0</span>));</span><br></pre></td></tr></table></figure></p><p>这个代码对应引擎处理函数的过程如下：</p><p><img src="/2017/05/10/手撕作用域与上下文/excstack.gif" alt="executionContextAction.gif"></p><p>　　<br>在搞清楚了引擎工作的方式后，我们还得知道执行环境在建立的时候发生的详细过程。<strong>建立阶段以及代码执行阶段的详细分析如下</strong>：</p><p>确切地说，<strong>执行环境是在函数被调用时，但是在函数体被真正执行以前所创建的</strong>。函数被调用时，就处于第一个阶段——建立阶段。这个时刻，引擎会检查函数中的参数，声明的变量以及内部函数，然后基于这些信息建立执行环境中。在这个阶段，variableObject 对象，作用域链，以及 this 所指向的对象都会被确定。</p><p>具体过程如下：</p><ol><li>找到当前上下文中的调用函数的代码</li><li>在执行被调用的函数体中的代码以前（编译阶段），开始创建执行环境（执行上下文/执行上下文环境）</li><li>进入第一个阶段-建立阶段:</li></ol><ul><li><p>建立variableObject对象:</p><ul><li><p>建立arguments对象，检查当前上下文中的参数，建立该对象下的属性以及属性值</p></li><li><p>确定参数变量，若有重名，以已有的变量为准。用已有的变量去覆盖参数变量</p></li><li><p>检查当前执行环境中的函数声明：</p><ol><li>每找到一个函数声明，就在variableObject下面用函数名建立一个属性，属性值就是指向该函数在内存中的地址的一个引用。</li><li>如果上述函数名已经存在于variableObject下，那么对应的属性值会被新的引用所覆盖。</li></ol></li><li><p>检查当前执行环境中的变量声明：</p><ol><li>每找到一个变量的声明，就在variableObject下，用变量名建立一个属性，属性值为undefined。</li><li>如果该变量名已经存在于variableObject属性中，直接跳过（防止指向函数的属性的值被变量属性覆盖为undefined），原属性值不会被修改。</li></ol></li></ul></li><li><p>初始化作用域链</p></li><li>确定上下文 — this（确定指向）</li></ul><ol start="4"><li>代码执行阶段: 执行函数体中的代码，一行一行地运行代码，给variableObject中的变量属性赋值。</li></ol><p>来个例子来模拟引擎的执行过程。如下：</p><p><img src="/2017/05/10/手撕作用域与上下文/i7eo_67e7e6b9af04efbd55c44c864ef37a5c.png" alt=""></p><p>在调用 testEC(11) 时，真正执行 testEC(11) 之前，建立以下阶段：</p><p><img src="/2017/05/10/手撕作用域与上下文/i7eo_827811b5802a812ea11c7cd06053b9a1.png" alt=""></p><p>由此可见，在建立阶段，除了arguments，函数的声明，以及参数被赋予了具体的属性值，其它的变量属性默认的都是undefined。一旦上述建立阶段结束，引擎就会进入代码执行阶段。如下：</p><p><img src="/2017/05/10/手撕作用域与上下文/i7eo_e83d63e89160791e2682a63a27f83b3f.png" alt=""></p><p>那么通过上面例子中的三张图片我们能否发现在函数作用域中关于提升的一些秘密呢？答案是肯定的！在 testEC-prev.png 中 c 函数 是被提升的！因为在建立阶段<code>c: pointer to function c ()</code>，而 b 与 a 均是 undefined，由图上显而易见。</p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><h4 id="执行环境与作用域的关系"><a href="#执行环境与作用域的关系" class="headerlink" title="执行环境与作用域的关系"></a>执行环境与作用域的关系</h4><ul><li>在执行环境中首先我们将参数、变量等都存在 VO<br>（变量对象中），这是确确实实存在的，只能供内部使用。</li><li>执行环境只在函数被调用时创建</li><li>执行函数时 VO -&gt; AO（活动对象） 这时我们就可以使用了</li><li>一个作用域下可以没有执行环境（未被调用）；可以有1个；还可以有若干个（存在闭包）</li></ul><h4 id="如何在-callback-中绑定this"><a href="#如何在-callback-中绑定this" class="headerlink" title="如何在 callback 中绑定this"></a>如何在 callback 中绑定this</h4><p>在 div 节点事件函数内部，有一个局部的 callback 方法，callback 被作为普通函数调用时，callback 内部的 this 指向了 window，但我们往往想让它指向该 div 节点。如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span>I am a div!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.id = <span class="string">'window'</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'test'</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    alert(<span class="keyword">this</span>.id); <span class="comment">// test</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> callback = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    alert(<span class="keyword">this</span>.id); <span class="comment">// window</span></span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined">    callback();</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这种情况下我们需要一个变量保存 div 节点的引用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'test'</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>; <span class="comment">// 保存 div 节点引用</span></span><br><span class="line">    <span class="keyword">var</span> callback = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(that.id); <span class="comment">// test</span></span><br><span class="line">    &#125;;</span><br><span class="line">    callback();</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">utf-8</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Events in JavaScript: Removing event listeners<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"element"</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://code.jquery.com/jquery-1.10.2.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">//var element = document.getElementById('element');</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> element = $(<span class="string">'#element'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> user = &#123;</span></span><br><span class="line"><span class="javascript"> firstname: <span class="string">'Bob'</span>,</span></span><br><span class="line"><span class="javascript"> greeting: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">   alert(<span class="string">'My name is '</span> + <span class="keyword">this</span>.firstname);</span></span><br><span class="line"><span class="undefined"> &#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">bind</span> (<span class="params">obj, name</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">return</span> obj[name].apply(obj);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript"><span class="comment">// Attach user.greeting as a callback</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//element.addEventListener('click', bind(user, 'greeting'));</span></span></span><br><span class="line"><span class="javascript">element.on(<span class="string">'click'</span>, user.greeting.bind(user))</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个例子是告诉我们无论原生js还是jquery在使用事件函数调用执行方法时函数上下文（this）默认指当前获取的dom元素（jq对象）所以当我们希望当前函数上下文指向user时我们应该改变函数上下文即改变this的指向。改变的方法有三种apply/call/bind。</p><p>参考资料：</p><ul><li>Javascript高级程序设计（第3版）</li><li>Javascript Ninja</li><li><a href="http://blogread.cn/it/article/6178" target="_blank" rel="noopener">深入理解Javascript之执行上下文(Execution Context)</a></li><li><a href="http://www.cnblogs.com/wangfupeng1988/p/4000798.html" target="_blank" rel="noopener">深入理解javascript原型和闭包（18）——补充：上下文环境和作用域的关系</a></li><li><a href="http://www.igooda.cn/jzjl/20150322837.html" target="_blank" rel="noopener">最详细的JavaScript和事件解读</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作用域 </tag>
            
            <tag> 上下文 </tag>
            
            <tag> 执行环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css水平垂直居中</title>
      <link href="/2017/04/01/css%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD.html"/>
      <url>/2017/04/01/css%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD.html</url>
      
        <content type="html"><![CDATA[<h3 id="水平垂直居中"><a href="#水平垂直居中" class="headerlink" title="水平垂直居中"></a>水平垂直居中</h3><p>水平垂直居中是老生常谈的话题，也是面试官比较喜欢问的问题。下面我对在实际中常常运用的几种方式做总结。HTML结构如下(这里我默认wrapper水平垂直居中)：<br>　　<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">　　<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"goal"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    　<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><h4 id="有确定的宽高"><a href="#有确定的宽高" class="headerlink" title="有确定的宽高"></a>有确定的宽高</h4><p>一般常用在包含众多div的容器层(常称为wrapper，这里一般美工都会标注好宽高)。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">　　<span class="selector-class">.wrapper</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">margin</span>: -<span class="number">100px</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">100px</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.goal</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">margin</span>: -<span class="number">50px</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">50px</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">background-color</span>: deeppink;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>这样就实现了goal水平垂直居中。</p><h4 id="宽高不确定"><a href="#宽高不确定" class="headerlink" title="宽高不确定"></a>宽高不确定</h4><p>可能更多地时候我们并不知道div的宽高，我们还需要实现水平垂直居中。那么我们可以这样做：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">　　<span class="selector-class">.wrapper</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">margin</span>: -<span class="number">100px</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">100px</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.goal</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">background-color</span>: deeppink;</span><br><span class="line">　　　　　　<span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>而对于手机端来说我们更多的是采用flex布局的方式来实现水平垂直居中。代码如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">　　<span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">　　　　　　  <span class="attribute">display</span>: -webkit-flex;</span><br><span class="line">　　　　　　  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: -<span class="number">100px</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">100px</span>;</span><br><span class="line">　　　　　　  <span class="attribute">-webkit-align-items</span>: center;</span><br><span class="line">　　　　　　  <span class="attribute">align-items</span>: center;</span><br><span class="line">　　　　　　  <span class="attribute">-webkit-justify-content</span>: center;</span><br><span class="line">　　　　　　  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.goal</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">background-color</span>: deeppink;</span><br><span class="line">　　　　　　  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>也就是为.wrapper这个容器div设置水平/垂直(justify-content/align-items)的对齐方式，均设置为居中后容器中的.goal项目div自然水平垂直居中。(在flex布局中常把外层称为容器，内层div称为项目。)</p><h4 id="利用伪元素来实现"><a href="#利用伪元素来实现" class="headerlink" title="利用伪元素来实现"></a>利用伪元素来实现</h4><p>利用伪元素可以避免使用margin时在IE中的bug问题。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">　　<span class="selector-class">.wrapper</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">　　　　　　  <span class="attribute">text-align</span>: center;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.goal</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: inline-block;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">vertical-align</span>: middle;</span><br><span class="line"><span class="attribute">background-color</span>: deeppink;</span><br><span class="line"> &#125;</span><br><span class="line">　　 <span class="selector-class">.wrapper</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">' '</span>;</span><br><span class="line"><span class="attribute">display</span>: inline-block;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">vertical-align</span>: middle;</span><br><span class="line"><span class="attribute">background-color</span>: deeppink;</span><br><span class="line">　　 &#125;</span><br></pre></td></tr></table></figure><p>该方法的重点在于利用伪元素给goal这个div提供vertical-align所需的对齐中心点。详情可以参考我的上一篇微研究：<a href="http://www.jianshu.com/p/b45f4d8ca372" target="_blank" rel="noopener">CSS：使用伪元素做水平垂直居中的微深入研究</a></p><h3 id="常用技巧"><a href="#常用技巧" class="headerlink" title="常用技巧"></a>常用技巧</h3><h4 id="左边栏"><a href="#左边栏" class="headerlink" title="左边栏"></a>左边栏</h4><p>　　　　　   左边栏的常用实现方式有很多，这里我们介绍几种常用方式：</p><ul><li>边框法：<br><code>border-left: 5px solid blue;</code></li><li>伪元素法：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">　　　<span class="selector-tag">div</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">　　　　　<span class="attribute">content</span>: <span class="string">' '</span>;</span><br><span class="line">　　　　　<span class="attribute">position</span>: absolute;</span><br><span class="line">　　　　　<span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">　　　　　<span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">　　　　　<span class="attribute">width</span>: <span class="number">5px</span>;</span><br><span class="line">　　　　　<span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">　　　　　<span class="attribute">background-color</span>: blue;</span><br><span class="line">　　　&#125;</span><br></pre></td></tr></table></figure><h4 id="内-外-四周阴影法："><a href="#内-外-四周阴影法：" class="headerlink" title="内/外/四周阴影法："></a>内/外/四周阴影法：</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">box-shadow:-5px 0px 0 0 blue;/box-shadow:inset 5px 0px 0 0 blue;/ box-shadow: 0 0 5px blue</span><br><span class="line">(<span class="selector-tag">box-shaow</span> 不占用元素的宽高哦)</span><br></pre></td></tr></table></figure><h4 id="单行居中，俩行居左，超过俩行省略。"><a href="#单行居中，俩行居左，超过俩行省略。" class="headerlink" title="单行居中，俩行居左，超过俩行省略。"></a>单行居中，俩行居左，超过俩行省略。</h4><p>　　　<br>主要实现依靠：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">display: -webkit-box; // 设置display，将对象作为弹性伸缩盒子模型显示</span><br><span class="line">    　　　-webkit-line-clamp: 2; // 限制在一个块元素显示的文本的行数</span><br><span class="line">   　　　 -webkit-box-orient: vertical; // 规定框的子元素应该被水平或垂直排列</span><br></pre></td></tr></table></figure><p>具体实现可以参考这篇文章：<a href="http://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==&amp;mid=2651551367&amp;idx=2&amp;sn=8a158fcb2a983acd48f71423db76e4a0&amp;chksm=8025a146b7522850d6cccb959e8a9f32e9866379d2b75b1dad0625c752d57611400d85fa80e1&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">单行居中，两行居左，超过两行省略</a></p><h4 id="短小标题的快速水平垂直居中法"><a href="#短小标题的快速水平垂直居中法" class="headerlink" title="短小标题的快速水平垂直居中法"></a>短小标题的快速水平垂直居中法</h4><p>练手的项目中要实现一列菜单，菜单中的小标题需要水平垂直居中：</p><p><img src="/2017/04/01/css水平垂直居中/i7eo_0b0cbaa6b2efd538e476ecdf19514322.png" alt=""></p><p>对于这种情况常用table布局。如下：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">　　<span class="selector-class">.menu-item</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: table;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">56px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">49px</span>;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0</span> <span class="number">12px</span>;</span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line"><span class="selector-class">.text</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: table-cell;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">56px</span>;</span><br><span class="line"><span class="attribute">vertical-align</span>: middle;</span><br><span class="line"><span class="selector-class">.border_1px</span>(rgba(<span class="number">7</span>, <span class="number">17</span>, <span class="number">27</span>, .<span class="number">1</span>));</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只需要在父元素.menu-item中添加display:table，在子元素(需要水平垂直居中的元素)中添加display:table-cell;vertical-align:middle即可。</p>]]></content>
      
      
      <categories>
          
          <category> HTML&amp;CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 水平垂直居中 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack笔记</title>
      <link href="/2017/03/05/webpack%E7%AC%94%E8%AE%B0.html"/>
      <url>/2017/03/05/webpack%E7%AC%94%E8%AE%B0.html</url>
      
        <content type="html"><![CDATA[<p>　　<br>webpack 2.0 用了小一个月了，一直都是照猫画虎。这俩天开始细读官网的部分文章结合一些讲解视频，深入学习一下。小结一发来汇总知识点。　　</p><ol><li><strong>webpack 的由来?</strong></li></ol><p>已存在的模块打包器对于大型应用（大型的SPA）来说并不适合。发展另一个模块打包器最迫切的原因那就是代码分割（Code Splitting）并且可以让静态资源能够无缝的适用于模块化。</p><ol start="2"><li><strong>webpack 可以做的事情？</strong></li></ol><ul><li>将项目间的依赖分割成代码块并按需加载</li></ul><a id="more"></a><ul><li>将初始化载入时间保持在最低</li><li>每一个静态资源都应被作为一个模块</li><li>有将第三方的库整合为模块的能力</li><li>有定制模块的能力</li><li>适合大型的单页应用<br>-</li></ul><ol start="3"><li><strong>webpack 的特点有？</strong></li></ol><ul><li>代码分割：webapck 在它的依赖树中有俩种依赖关系，同步与异步！异步依赖可以分割成许多不同的点（部分）并且这些依赖来自于新的代码块。在块级树生效后，一个文件会被传递给每一个代码块。</li><li>加载器：webpack 是唯一的与生俱来就具有处理 JS 代码的能力，但是加载器被用来将其他源文件转换为 JS 文件。这样来做我们就可以处理来自不同模块的源文件。</li><li>智能解析：webpack 可以智能解析第三方库文件。它甚至允许在依赖中出现解释性的描述例如：<code>require(&quot;./templates/&quot; + name + &quot;.jade&quot;)</code>。具有 CMD&amp;AMD&amp;es6 三种处理模式。</li><li>插件系统：webpack 最有特点的就是它生态丰富的插件系统。许多内部的特性都建立在这个插件系统之上。它允许你定制你自己的需求并且可以将其开源。</li></ul><p>以上是我对 <a href="http://webpack.github.io/docs/what-is-webpack.html" target="_blank" rel="noopener">what-is-webpack</a> 的部分翻译，这些对于快速了解 webpack 来说足够了。</p><p>总所周知对于自动化构建这部分来说，我们可以使用的工具很多，比如：grunt 、gulp 等，那么这俩者与 webpack 有什么区别呢？</p><p>Grunt&amp;Gulp 是流程工具，其工作方式是在一个配置文件中，指明对某些文件进行的操作（诸如编译，组合，压缩等任务）的具体步骤，之后可以自动完成这些任务。流程如下：</p><p><img src="/2017/03/05/webpack笔记/i7eo_867ffbc27c7b3db65a925867724d7c40.png" alt=""></p><p>WebPack则是一个模块打包器，其工作方式通过主文件（index.js）找到全部依赖（自己设置的代码块、第三方库等）使用loaders 处理，最终打包为可执行的<br> Javascript 文件。流程如下：</p><p><img src="/2017/03/05/webpack笔记/i7eo_fa0ea7513b96c261794900a46ffb0d63.png" alt=""></p><p>下面通过实例来看看 webpack 的威力。</p><p>1&gt;  简单使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir webpack-1</span><br><span class="line">cd webpack-1</span><br><span class="line">npm init</span><br><span class="line">npm install -d webpack --save-dev</span><br></pre></td></tr></table></figure><p>安装完 webpack 2.0 后，新建 js&amp;html&amp;css 文件我的目录如下：</p><p><img src="/2017/03/05/webpack笔记/i7eo_904c91a6b30eb4c70866f1e6e1b01ea8.png" alt=""></p><p>hello.js 中的代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'./world.js'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./style.css'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'test!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hello();</span><br></pre></td></tr></table></figure><p>style.css 中的代码如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> , <span class="selector-tag">body</span>&#123;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line"><span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 webpack 能做的事情中我们了解到 webpack 具有识别 js 的能力，那<br> css 呢？答案是不能！那怎么解决呢？利用 loaders 来处理。对于 css 文件我们使用 css-loader&amp;style-loader  先利用 npm 分别安装。之后在当前目录下打开 cmd 键入以下命令：<code>webpack hello.js hello.bundle.js --module-bind css=style-loader!css-loader --watch</code> module-bind 命令用于启用 loader 处理主文件，watch 用来监视 hello.js 文件的变化，若变化则自动更新 hello.bundle.js 文件。</p><p>　　在项目中我们如果每次都要敲一长串命令的话很麻烦，我们只需要在package.json 的 script 中配上 webpack 命令。我得配置如下： <code>&quot;webpack&quot;: &quot;webpack --config webpack.config.js --progress --display-modules --colors --display-reasons&quot;</code> 其中 progress&amp;modules&amp;reasons分别代表过程百分比 / 各模块 / 打包原因。</p><p>　　我们可以将webpack的配置单独放在一个配置文件（webpack.config.js）中会自动读取该文件，如果该文件不存在或者名称不一致则需要通过命令行来运行（不存在的话通过 webpack 命令，名称不一致通过–config 来指定文件）。</p><p>　　对于 webpack 来说入口与出口肯定是必不可少的，那么在配置文件中我们这样写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">entry: <span class="string">'./src/index.js'</span>,   <span class="comment">// entry: ['./src/index-1.js' , './src/index-2.js'] 多入口</span></span><br><span class="line">output: &#123;                        <span class="comment">//配置文件输出位置</span></span><br><span class="line">  filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">  path: <span class="string">'./dist/js'</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>还有 entry 传入对象的形式入口：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">entry:&#123;</span><br><span class="line">main1: <span class="string">'./src/index1.js'</span>,</span><br><span class="line">main2: <span class="string">'./src/index2.js'</span></span><br><span class="line">&#125;,</span><br><span class="line">output: &#123;                        <span class="comment">//配置文件输出位置</span></span><br><span class="line">filename: <span class="string">'[name]-[chunkhash].js'</span>,  <span class="comment">// 这里如果还这样写filename: 'bundle.js'的结果是index2会把index1覆盖，所以我们利用内置的占位符 name &amp; chunkhash 来命名</span></span><br><span class="line">path: <span class="string">'./dist/js'</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样的话在 index.html中引入的 js 文件名我们不可能每次打包完都要手动修改，这样很麻烦。所以我们需要使用插件来自动帮我们设置。<code>npm install html-webpack-plugin</code> 安装后修改配置文件为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> htmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">entry: &#123;</span><br><span class="line">main: <span class="string">'./src/scripts/main.js'</span>,</span><br><span class="line">mainA: <span class="string">'./src/scripts/mainA.js'</span></span><br><span class="line">&#125;,</span><br><span class="line">output: &#123;                        <span class="comment">//配置文件输出位置</span></span><br><span class="line">filename: <span class="string">'[name]-[chunkhash]-bundle.js'</span>        <span class="comment">//打包的文件名称*/</span></span><br><span class="line">path : <span class="string">'./dist'</span>,</span><br><span class="line">filename: <span class="string">'js/[name]-[chunkhash].js'</span>,            <span class="comment">//把html与js分开存放</span></span><br><span class="line">publicPath: <span class="string">'http://bluespace/'</span>                  <span class="comment">//上线地址的绝对路径，自动替换当前项目中相对路径</span></span><br><span class="line">&#125;,</span><br><span class="line">plugins: [</span><br><span class="line"><span class="keyword">new</span> htmlWebpackPlugin(&#123;</span><br><span class="line"><span class="comment">//filename: '[hash].index.html',              //名称</span></span><br><span class="line">template: <span class="string">'index.html'</span>,<span class="comment">//以什么为模板，一般以配置文件下的index.html为模板</span></span><br><span class="line"><span class="comment">//inject: 'head'//scripts存放的位置</span></span><br><span class="line">title: <span class="string">'webpack is good!'</span>,</span><br><span class="line">inject: <span class="literal">false</span>,</span><br><span class="line">date: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">minify: &#123;                                    <span class="comment">//压缩html文件，去除空格，去除注释</span></span><br><span class="line">collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">removeComments: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>而 index.html 模板的代码如下（html-webpack-plugin支持ejs写法）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">htmlWebpackPlugin.options.title</span>%&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"&lt;%= htmlWebpackPlugin.files.chunks.main.entry%&gt;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  <span class="comment">&lt;!-- 把脚本分开放 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- htmlWebpackPlugin.options.date --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">htmlWebpackPlugin.options.date</span>%&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"&lt;%= htmlWebpackPlugin.files.chunks.mainA.entry%&gt;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="comment">&lt;!--如果想更加优化的话为了减少一次post请求，这里可以直接把script代码放进来，方法如下：</span></span><br><span class="line"><span class="comment">&lt;script&gt;</span></span><br><span class="line"><span class="comment">&lt;%=</span></span><br><span class="line"><span class="comment">compilation.assets[htmlWebpackPlugin.files.chunks.mainA.entry.substr(htmlWebpackPlugin.files.publicPath.length)].source()%&gt;</span></span><br><span class="line"><span class="comment">&lt;/script&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2&gt;  利用 htmlwebpackplugin 构建多页应用 （已上传至 <a href="https://github.com/i7eo/WebCodeHodgepodge/tree/master/webpack" target="_blank" rel="noopener">i7eo-github</a>）<br>3&gt;  配置常见的 loader</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> htmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line">    <span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">entry: <span class="string">'./src/app.js'</span>,</span><br><span class="line">output: &#123;</span><br><span class="line">path: <span class="string">'./dist'</span>,</span><br><span class="line">filename: <span class="string">'js/[name].bundle.js'</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">rules: [</span><br><span class="line">&#123;</span><br><span class="line">test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">use: [&#123;</span><br><span class="line">loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">options: &#123;</span><br><span class="line">presets: [<span class="string">'es2015'</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;],</span><br><span class="line">include: path.resolve(__dirname , <span class="string">'./src'</span>),</span><br><span class="line">exclude: path.resolve(__dirname , <span class="string">'./node_modules'</span>)                           <span class="comment">//尽量使用绝对路径会提高打包速度在configruation里面通过exclude和include来提高打包速度</span></span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">use: [</span><br><span class="line"><span class="string">'style-loader'</span>,</span><br><span class="line">&#123;</span><br><span class="line">            loader: <span class="string">'css-loader'</span>,</span><br><span class="line">            options: &#123; <span class="attr">importLoaders</span>: <span class="number">1</span> &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">&#123;</span><br><span class="line">loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">options: &#123;</span><br><span class="line">plugins: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)</span><br><span class="line">];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">test: <span class="regexp">/.\.less$/</span>,</span><br><span class="line">use: [</span><br><span class="line"><span class="string">'style-loader'</span>,</span><br><span class="line"><span class="string">'css-loader'</span>,</span><br><span class="line">&#123;</span><br><span class="line">loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">options: &#123;</span><br><span class="line">plugins: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)         <span class="comment">// postcss下的自动补全浏览器前缀的插件</span></span><br><span class="line">];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">'less-loader'</span>      <span class="comment">//使用less或者sass时不用为@import的less/sass添加importLoaders:1因为自动添加。因为less/sass支持import</span></span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">use: <span class="string">'html-loader'</span>      <span class="comment">// 将html当做字符串处理，对应innerhtml。坏处是不能使用for等模板语法</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">test: <span class="regexp">/\.ejs$/</span>,</span><br><span class="line">use: <span class="string">'ejs-loader'</span>       <span class="comment">// 把html当做模板处理</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">test: <span class="regexp">/\.(png|jpg|gif|svg)$/i</span>,            <span class="comment">//用包管理工具除了模板外的文件放置相对路径没有问题，但是在模板文件中应该![]($&#123;require('../../assets/George.jpg')&#125;)</span></span><br><span class="line">use: [</span><br><span class="line">&#123;</span><br><span class="line">loader: <span class="string">'url-loader'</span>,                       <span class="comment">//url-loader可以设置limit若图片体积小于limit的话则通过url-loader转化为base64代码，若大于则调用file-loader</span></span><br><span class="line">options: &#123;</span><br><span class="line">name: <span class="string">'assets/[name]-[hash:5].[ext]'</span>,</span><br><span class="line">limit: <span class="number">4000</span>                                         <span class="comment">//经常需要加载的图片利用http请求较好，因为可以享受到缓存，而base64则需每次读取</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">'image-webpack-loader'</span>                                      <span class="comment">//压缩图片体积</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">plugins: [</span><br><span class="line"><span class="keyword">new</span> htmlWebpackPlugin(&#123;</span><br><span class="line">filename: <span class="string">'index.html'</span>,</span><br><span class="line">template: <span class="string">'index.html'</span>,</span><br><span class="line">inject: <span class="string">'body'</span></span><br><span class="line">&#125;)</span><br><span class="line">]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>参考资料：</p><p><a href="http://webpack.github.io" target="_blank" rel="noopener">webpack</a></p><p><a href="http://www.jianshu.com/p/42e11515c10f" target="_blank" rel="noopener">入门webpack，看这篇就够了</a></p><p><a href="https://www.npmjs.com/package/html-webpack-plugin" target="_blank" rel="noopener">html-webpack-plugin</a></p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈响应式布局&amp;自适应布局</title>
      <link href="/2017/02/15/%E6%B5%85%E8%B0%88%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80-%E8%87%AA%E9%80%82%E5%BA%94%E5%B8%83%E5%B1%80.html"/>
      <url>/2017/02/15/%E6%B5%85%E8%B0%88%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80-%E8%87%AA%E9%80%82%E5%BA%94%E5%B8%83%E5%B1%80.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、响应式布局"><a href="#一、响应式布局" class="headerlink" title="一、响应式布局"></a>一、响应式布局</h3><p>1、什么是响应式页面？响应式布局可以一统pc&amp;mobile吗？响应式与自适应式布局的区别？</p><ul><li>响应式简单来说是一个网站的布局 <strong>能够兼容多个不同终端</strong>，  而并不是传统的pc端一套页面，移动端一套页面。</li><li>当初Ethan Marcotte在2010年5月份提出的这个概念的时候是希望响应式可以一统pc&amp;mobile页面，同时我们也做到了。但是这样带来的问题也越发让开发者心烦意乱，最重要的一点就是兼容各种设备会导致 <strong>大量累赘的代码</strong>，维护与重构较麻烦。</li><li>响应式布局讲究的是使用一套布局代码来在不同终端展示，<strong>根据屏幕尺寸的大小对页面的布局进行改造</strong>（即当屏幕变小时，开发者可能会让标题栏中原本显示10个子标题现在只显示5个，隐藏剩下的5个或者让其在第二行出现），而</li></ul><a id="more"></a><p>自适应布局则相反，它使用一套布局代码不会根据屏幕大小改变还改变布局结构，它只是会<strong>等比缩小或者放大对应内容的尺寸</strong>。</p><p>２、响应式布局采用的技术</p><ul><li>控制视口（viewport）</li></ul><p><strong>控制视口</strong>这一点不论是响应式、自适应还是移动端布局都是最重要的。我们常常会使用这一句：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,user-scalable=no"</span>"&gt;</span></span><br></pre></td></tr></table></figure><p>视口宽度等于设备宽度，初始缩放比最大缩放比与最小缩放比均为1，禁止用户缩放。详细描述可查看 <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta" target="_blank" rel="noopener">MDN-meta</a>。在这里可能有的朋友会见到设备像素比（dpr 即 deivcePixelRatio）也就是物理像素与设备独立像素的比值，常见的有retina屏等。详情可以参考张鑫旭老师的这篇 <a href="http://www.zhangxinxu.com/wordpress/2012/08/window-devicepixelratio/" target="_blank" rel="noopener">设备像素比devicePixelRatio简单介绍</a> 文章。</p><ul><li>CSS的媒体查询（media query）</li></ul><p>使用@media 查询，你可以<strong>针对不同的媒体类型定义不同的样式</strong>。请看下例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> only screen and (max-width: <span class="number">480px</span>)&#123;</span><br><span class="line">    <span class="selector-tag">header</span> <span class="selector-class">.top</span> <span class="selector-class">.tel</span>,</span><br><span class="line">    <span class="selector-tag">header</span> <span class="selector-class">.top</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(3)</span>,</span><br><span class="line">    <span class="selector-tag">header</span> <span class="selector-class">.top</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(4)</span>&#123;</span><br><span class="line">        <span class="attribute">display</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个代码片意思是当设备视口宽度达到480px时对 li 于.tel 进行处理。media query的详情可以查看 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media" target="_blank" rel="noopener">MDN-media</a> 。这里需要注意的一点是很多人编写响应式布局时都喜欢由pc大屏开始，慢慢到pad再到mobile，<strong>这里我建议设计的时候可以从小屏的mobile开始，先确定内容然后逐级向大屏设计。</strong>对于IE9以下浏览器我们需要引入一个关于media query 的 polyfill（可以理解为补丁包）， <em>css3-mediaqueries.js</em> 或者 <em>respond.js</em>。</p><ul><li>自适应图片等素材</li></ul><p>这里我们常对图片做处理，处理的方法有很多我们<strong>可以采用HTML5 picture 标签</strong>，利用该标签可以在不同设备中显示不同的图片。如下代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">picture</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">source</span> <span class="attr">media</span>=<span class="string">"(max-width: 36rem)"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">srcset</span>=<span class="string">"img/ad001-l-480w.png"</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">source</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">srcset</span>=<span class="string">"img/ad001-l-1600w.png"</span>/&gt;</span></span><br><span class="line">          ![](img/ad001-l.png)</span><br><span class="line"> <span class="tag">&lt;/<span class="name">picture</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>source 代表你要显示图片的源，media代表你需要什么条件下显示该图片，srcset 须填写图片路径d s代码片意思是当设备视口宽度大于36rem 时显示 ad001-l-480w.png 这张图片，若小于 36rem 则使用ad001-l-1600w.png 这张图片，要是浏览器不支持 picture 则使用 img 标签中的图片。picture 详细信息可查看 <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source" target="_blank" rel="noopener">MDN-picture</a> 同样的这里需要注意在 IE9&amp;IE9以下 浏览器想使用 picture 须导入 polyfill ，这里我使用的是 <em>html5shiv.js</em> 。</p><h3 id="二、自适应布局"><a href="#二、自适应布局" class="headerlink" title="二、自适应布局"></a>二、自适应布局</h3><p>１、自适应的布局的前世今生</p><p>很多人还是喜欢把自适应称为百分比布局，而我认为自适应是百分比的增强版，这个概念包括了很多新技术与小技巧而并非单纯的使用百分比实现页面布局。请看下图：</p><p><img src="/2017/02/15/浅谈响应式布局-自适应布局/i7eo_c36de4bcf866dcb8292128829f0c8625.png" alt=""></p><p>这个结构很简单，如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main about"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"aboutUs"</span>&gt;</span>关于我们<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mainText"</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"aboutUs"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span><br></pre></td></tr></table></figure><p>对应的样式为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.main</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">90%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.main</span> <span class="selector-class">.title</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">1.425rem</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.25rem</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(13,76,187);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.main</span> <span class="selector-class">.title</span> <span class="selector-class">.icon</span>&#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">1rem</span>;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.main</span> <span class="selector-class">.icon</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">width</span>: .<span class="number">25rem</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">1.3rem</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(../img/indexPage/mainBtn.png);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.main</span> <span class="selector-class">.mainText</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.main</span> <span class="selector-class">.content</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">1.2rem</span> <span class="number">0</span> <span class="number">1.425rem</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">1.7rem</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: .<span class="number">9rem</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.35rem</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#3d3d3d</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在项目中更多的使用的都是组合计，百分比控制各个容器的宽和少量的高度，用 rem 来控制 padding/margin/font/height 等。至此，利用百分比布局的方式即“前世”，而“今生”则是在不断的混合新的技术不断增强。对于今生，显然我们还有 web App 没有说，那我们就来看看移动端的 web 页面。</p><p>2、rem</p><p>上面出现了一个单位rem，那么rem到底是什么？</p><p>rem（font size of the root element）是指相对于根元素的字体大小的单位。简单的说它就是一个相对单位。看到rem大家一定会想起em单位，em（font size of the element）是指相对于父元素的字体大小的单位。它们之间其实很相似，只不过一个计算的规则是依赖根元素一个是依赖父元素计算。</p><p>对于一个网页来说，rem的初始值为 16px，当然这个值是可以根据当前项目中的需要来改变的，设置html的font-size即可。比如说：拿到了一份宽度为680px，rem为20px的设计稿其中某元素宽度为200px，但是如果要在宽度为375与414的屏幕上显示，那么我们应该设置为多少呢？</p><table><thead><tr><th style="text-align:left">宽度</th><th style="text-align:left">宽度比</th><th style="text-align:left">html(font-size)</th><th style="text-align:left">某元素宽度(px)</th><th style="text-align:left">某元素宽度(rem)</th></tr></thead><tbody><tr><td style="text-align:left">384</td><td style="text-align:left">384/640=0.6</td><td style="text-align:left">12px</td><td style="text-align:left">120px</td><td style="text-align:left">10rem</td></tr><tr><td style="text-align:left">480</td><td style="text-align:left">480/640=0.75</td><td style="text-align:left">15px</td><td style="text-align:left">150px</td><td style="text-align:left">10rem</td></tr></tbody></table><p>重点是要计算出html的font-size，如果是retina屏还需注意dpr。如果我们想快速上手不想计算的话可以引入flexible.js，这个脚本主要是根据媒体查询来动态设置html font-size，兼容性还不错。</p><p>3、webApp 中的自适应利器 - flex弹性布局</p><p>由于 media query的出现影响了很大一部分开发人员，所以在早些时候的 webApp 页面中还是会出现众多的 media query 。直到 flex 流行开来后我们逐步认识到 flex 的强大，因为 flex 上手简单，代码精简，一小段就可以完成我们常说的“圣杯布局”等，也可以完成常考的水平垂直问题。关于 flex 大家可以参考阮一峰老师的教程，讲解的十分详细。<a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool" target="_blank" rel="noopener">Flex 布局教程：语法篇</a>。请看下例：</p><p><img src="/2017/02/15/浅谈响应式布局-自适应布局/i7eo_2f5ab409ffc3f0d227e9d1b2b31bc25f.png" alt=""></p><p><img src="/2017/02/15/浅谈响应式布局-自适应布局/i7eo_bbdf296b4420ab30dbee2be7dc078519.png" alt=""></p><p>顺手拉来自己练手的 vue2 中用 flex 布局后的页面，可以看到 pc&amp;mobile 完美驾驭。因为目前各大浏览器对 flex 的支持度在增加所以 pc&amp;mobile 均可使用就在不久的将来 ，不过一般还是更多的用在移动端。</p>]]></content>
      
      
      <categories>
          
          <category> HTML&amp;CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flex </tag>
            
            <tag> rem </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>底部固定(sticky footer)</title>
      <link href="/2017/01/03/sticky-footer.html"/>
      <url>/2017/01/03/sticky-footer.html</url>
      
        <content type="html"><![CDATA[<p>　　滚动条的出现总是在浏览器的最右边和最下方，牢牢的 fixed在页面上。大多数时候我们看到的是这样的</p><a id="more"></a><p>　　<br><img src="/2017/01/03/sticky-footer/i7eo_be73ca4281babf1adf5e0dd4640a609f.png" alt=""></p><p>这样子很明显登录的小人按钮被挡住了，而且真的不太美观。这时我们就希望头部吸顶，滚动条出现在下方的div内。如下图：</p><p><img src="/2017/01/03/sticky-footer/i7eo_093d0bc28bd34ad0c7d2a3780af969ed.png" alt=""></p><p>其实实现很简单，在头部（header）和内容（section）外面再包裹一层（.wrapper），给 .wrapper 层高度 100%；然后让内层 section 绝对定位，设置 top/overflow-y 即可。HTML 结构如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">  　　<span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">　　　　<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>This is header!<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">　　　　这里添加超过页面高度的内容</span><br><span class="line">      <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>样式代码如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">overflow</span>: hidden;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">min-height</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">90px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">48px</span>;</span><br><span class="line">        <span class="attribute">background</span>: <span class="number">#efeff0</span>;</span><br><span class="line">        <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</span><br><span class="line">        <span class="attribute">text-align</span>: center;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">48px</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">overflow-y</span>: scroll;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这样显示section中的内容是显示不出来的。如下：</p><p><img src="/2017/01/03/sticky-footer/i7eo_8ae5b0de96a63d6da75c98af0c69148a.png" alt=""></p><p>这里的原因是因为我们在 .wrapper 中设置 height: 100%，而设置高度百分比时这个百分比时根据父元素的高度来计算的，这里的父元素是 body&amp;html，没有设置 height 时父元素 body&amp;html 的 height: auto，这时要求浏览器根据这样一个缺省值来计算百分比高度时，只能得到 undefined 的结果。也就是一个 null 值，浏览器不会对这个值有任何的反应（详情见下面链接）。所以我们需要在将样式修改为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span> &#123;</span><br><span class="line">　　<span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">　　&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">overflow</span>: hidden;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">min-height</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">90px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">48px</span>;</span><br><span class="line">        <span class="attribute">background</span>: <span class="number">#efeff0</span>;</span><br><span class="line">        <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</span><br><span class="line">        <span class="attribute">text-align</span>: center;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">48px</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">overflow-y</span>: scroll;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/2017/01/03/sticky-footer/i7eo_8a0c59f7626496da0256f90cbe1a466a.png" alt=""></p><p>　　底部固定又叫 css sticky footer，网上的实现方式有很多。下来介绍一个简单实用的方式，对应的 HTML 结构如下：<br>　　<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content-wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>This is header!<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">        ×</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>CSS 代码如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span> &#123;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.content-wrapper</span> &#123;</span><br><span class="line">            <span class="attribute">position</span>: fixed;</span><br><span class="line">            <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">            <span class="attribute">min-height</span>: <span class="number">100%</span>;</span><br><span class="line">            <span class="attribute">overflow</span>: auto;</span><br><span class="line">            <span class="attribute">background</span>: <span class="built_in">rgba</span>(7, 17, 27, .8);</span><br><span class="line">            <span class="attribute">z-index</span>: <span class="number">100</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">header</span> &#123;</span><br><span class="line">            <span class="attribute">position</span>: relative;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">48px</span>;</span><br><span class="line">            <span class="attribute">background</span>: <span class="number">#efeff0</span>;</span><br><span class="line">            <span class="attribute">text-align</span>: center;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.content</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">90%</span>;</span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">            <span class="attribute">padding-bottom</span>: <span class="number">64px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.close</span> &#123;</span><br><span class="line">            <span class="attribute">position</span>: relative;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">64px</span>;</span><br><span class="line">            <span class="attribute">margin</span>: -<span class="number">64px</span> auto <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">padding-top</span>: <span class="number">16px</span>;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">32px</span>;</span><br><span class="line">            <span class="attribute">clear</span>: both;</span><br><span class="line">            <span class="attribute">text-align</span>: center;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/2017/01/03/sticky-footer/i7eo_31a0b8b3dcd05308cbdf02335ffea2ee.png" alt=""></p><p><img src="/2017/01/03/sticky-footer/i7eo_058f4f302688d0234b4191f8af842e00.png" alt=""></p><p>我们的关闭 icon 均在文字的最下方，根据内容的高度变化而改变。显然这并不是我们想要的效果，我们想要的是不论内容是否撑满屏幕高度这个关闭的 icon 都要固定在最下方，而 exhibition-1.png 中的现象是出现在了内容的底部而不是屏幕的底部。所以我们应该对为这个整体再包裹一层，然后把 .close 这个 div 放出去与 content-wrapper 同级即可。修改后的 HTML/CSS 代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content-wrapper"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>This is header!<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">            ×</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">            <span class="attribute">position</span>: fixed;</span><br><span class="line">            <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">            <span class="attribute">overflow</span>: hidden;</span><br><span class="line">            <span class="attribute">background</span>: <span class="built_in">rgba</span>(7, 17, 27, .8);</span><br><span class="line">            <span class="attribute">z-index</span>: <span class="number">100</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.content-wrapper</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">            <span class="attribute">min-height</span>: <span class="number">100%</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">header</span> &#123;</span><br><span class="line">            <span class="attribute">position</span>: relative;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">48px</span>;</span><br><span class="line">            <span class="attribute">background</span>: <span class="number">#efeff0</span>;</span><br><span class="line">            <span class="attribute">text-align</span>: center;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.content</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">90%</span>;</span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">            <span class="attribute">padding-bottom</span>: <span class="number">64px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.close</span> &#123;</span><br><span class="line">            <span class="attribute">position</span>: relative;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">64px</span>;</span><br><span class="line">            <span class="attribute">margin</span>: -<span class="number">64px</span> auto <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">padding-top</span>: <span class="number">16px</span>;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">32px</span>;</span><br><span class="line">            <span class="attribute">clear</span>: both;</span><br><span class="line">            <span class="attribute">text-align</span>: center;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>最终效果如下：</p><p><img src="/2017/01/03/sticky-footer/i7eo_6e64eb748af948e4fb5f1e01424952d8.png" alt=""></p><p>完成效果。<br>　　最后我们来总结一下 css sticky footer 的步骤。第一步需要一个大容器（.content-wrapper）设置 min-height 为100%，撑满整个可视区域，不然你需要 sticky 的 footer 就不会出现在你的视线里;第二步在 content-wrapper 中创建你的内容区域，在内容区内建立了一个 content ，这时的内容区域（content）一定要设置 padding-bottom 来为你的 footer（.close） 占位;第三步在 content-wrapper 同级下创建你的 footer（.close），然后相对定位（相对于content-wrapper）然后这里的 margin-top 必须为负（填充你在第二步中所占的空间这里的负值必须与第二步中设置的值相同，锁死 footer 的位置）。</p>]]></content>
      
      
      <categories>
          
          <category> HTML&amp;CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sticky footer </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
