<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mac下利用Alfred与七牛搭建markdown图床</title>
      <link href="/2018/07/04/Mac%E4%B8%8B%E5%88%A9%E7%94%A8Alfred%E4%B8%8E%E4%B8%83%E7%89%9B%E6%90%AD%E5%BB%BAmarkdown%E5%9B%BE%E5%BA%8A.html"/>
      <url>/2018/07/04/Mac%E4%B8%8B%E5%88%A9%E7%94%A8Alfred%E4%B8%8E%E4%B8%83%E7%89%9B%E6%90%AD%E5%BB%BAmarkdown%E5%9B%BE%E5%BA%8A.html</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在使用hexo与gitpage完成个人博客搭建后，在写博客时想插入图片总是需要外链，感觉很繁琐。刚好在利用alfred的workflow后觉得能不能把整套手动获取图片外链的动作变成自动化的动作，来用热键触发。搜了下相关的文章自己踩了不少坑最终还是完成了，总结出来避免大家后面踩坑。</p><h3 id="前期准备："><a href="#前期准备：" class="headerlink" title="前期准备："></a>前期准备：</h3><ul><li>可以使用workflow的alfred（能支持正版最好不过我还是准备了链接，位置在文章最后）</li><li>七牛账号&amp;七牛自动化工具qshell</li><li>截图工具（这个也可以没有，可以利用电脑自带的截图功能，只要保证截图动作后的结果处于剪切板中即可）</li></ul><h3 id="第一部分：（七牛操作）"><a href="#第一部分：（七牛操作）" class="headerlink" title="第一部分：（七牛操作）"></a>第一部分：（七牛操作）</h3><a id="more"></a><h4 id="第一步："><a href="#第一步：" class="headerlink" title="第一步："></a>第一步：</h4><p>注册成功登陆后，单击 管理控制台 -&gt; 对象存储 -&gt; 内容管理 找到外链默认域名，复制并保存。</p><h4 id="第二步："><a href="#第二步：" class="headerlink" title="第二步："></a>第二步：</h4><p>返回首页，单击 服务与支持 -&gt; 开发者中心 -&gt; sdk与工具 -&gt; 开发者工具 -&gt; qshell 进入后按照提示下载并安装。</p><h4 id="第三步："><a href="#第三步：" class="headerlink" title="第三步："></a>第三步：</h4><p>创建账户时，除了ak&amp;sk 现在还需要输入七牛账户名；配置upload.conf文件时需要注意如果本地新增文件七牛默认不会自动检查，你需要设置 rescan_local: true ;如果你在七牛空间（web页）中手动删除某个文件，再次上传该文件的时候七牛默认该文件已经存在空间中，不会再上传该文件，你需要配置 check_exists: true 。</p><h3 id="第二部分：（alfred-workflow操作）"><a href="#第二部分：（alfred-workflow操作）" class="headerlink" title="第二部分：（alfred workflow操作）"></a>第二部分：（alfred workflow操作）</h3><h4 id="第一步：-1"><a href="#第一步：-1" class="headerlink" title="第一步："></a>第一步：</h4><p><img src="/2018/07/04/Mac下利用Alfred与七牛搭建markdown图床/i7eo_6ae05412c45cd93d76aee7dfc829ee6d.png" alt=""></p><p>点击 + ，创建blank workflow即可，注意bundle id必填一个唯一值，能够在alfred中标示你这个workflow即可，其余选项正常填写，category默认选项即可。</p><h4 id="第二步：-1"><a href="#第二步：-1" class="headerlink" title="第二步："></a>第二步：</h4><p><img src="/2018/07/04/Mac下利用Alfred与七牛搭建markdown图床/i7eo_67ef692bcaa2e05863e0aed092834efd.png" alt=""></p><p>创建热键hotkey，其余默认选项不变，完成后save。</p><p><img src="/2018/07/04/Mac下利用Alfred与七牛搭建markdown图床/i7eo_959e803647132d100867bf95fd3f2b97.png" alt=""></p><p>创建热键触发后需要执行的脚本文件，当然run script创建的脚本是后台运行不需要先调出terminal（控制台），如果需要调出terminal（控制台），选择terminal command。<br>根据脚本语言对应选择language，这里提供一个as版本代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">property fileTypes : &#123;¬</span><br><span class="line">    &#123;«class PNGf», ".png"&#125;, ¬</span><br><span class="line">    &#123;JPEG picture, <span class="string">".jpg"</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">on getType() --判断剪贴板中的数据类型，暂时只支持png和jpg，优先用png</span><br><span class="line">    repeat <span class="keyword">with</span> aType <span class="keyword">in</span> fileTypes</span><br><span class="line">        repeat <span class="keyword">with</span> theInfo <span class="keyword">in</span> (clipboard info)</span><br><span class="line">            <span class="keyword">if</span> (first item <span class="keyword">of</span> theInfo) is equal to (first item <span class="keyword">of</span> aType) then <span class="keyword">return</span> aType</span><br><span class="line">        end repeat</span><br><span class="line">    end repeat</span><br><span class="line">    <span class="keyword">return</span> missing value</span><br><span class="line">end getType</span><br><span class="line"></span><br><span class="line">set theType to getType()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> theType is not missing value then</span><br><span class="line">    set filePath to <span class="string">"/Users/xxx/Documents/screenCaptures/"</span> --这里换成你自己放置图片的路径</span><br><span class="line">    set fileName to <span class="keyword">do</span> shell script <span class="string">"date \"+%Y%m%d%H%M%S\" | md5"</span> --用当前时间的md5值做文件名</span><br><span class="line">set prefix to <span class="string">"i7eo_"</span> -- 改成自己的前缀</span><br><span class="line">    <span class="keyword">if</span> fileName does not end <span class="keyword">with</span> (second item <span class="keyword">of</span> theType) then set fileName to (fileName &amp; second item <span class="keyword">of</span> theType <span class="keyword">as</span> text)</span><br><span class="line">    set markdownUrl to <span class="string">"![截图](http://xxx.com/i7eo_"</span> &amp; fileName &amp; <span class="string">")"</span> --这里如果没有用到图床，就把前面前缀去掉，用到的话换成你自己图床的url</span><br><span class="line">    set filePath to filePath &amp; prefix &amp; fileName</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">        set imageFile to (open <span class="keyword">for</span> access filePath <span class="keyword">with</span> write permission)</span><br><span class="line">        set eof imageFile to <span class="number">0</span></span><br><span class="line">        write (the clipboard <span class="keyword">as</span> (first item <span class="keyword">of</span> theType)) to imageFile -- <span class="keyword">as</span> whatever</span><br><span class="line">        close access imageFile</span><br><span class="line">        set the clipboard to markdownUrl</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">            tell application <span class="string">"System Events"</span></span><br><span class="line">                keystroke <span class="string">"v"</span> using command down</span><br><span class="line">            end tell</span><br><span class="line">        end <span class="keyword">try</span></span><br><span class="line">    on error</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">            close access imageFile</span><br><span class="line">        end <span class="keyword">try</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">    end <span class="keyword">try</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">end <span class="keyword">if</span></span><br></pre></td></tr></table></figure></p><p>把 <code>http://xxx.com/</code><br>改为之前从七牛默认外链处复制出来的地址。</p><h4 id="第三步：-1"><a href="#第三步：-1" class="headerlink" title="第三步："></a>第三步：</h4><p>再次创建一个blank workflow，热键自己设置；再次创建一个as脚本，具体代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> shell script <span class="string">"/usr/local/bin/qshell qupload ~/.qshell/upload.conf"</span></span><br></pre></td></tr></table></figure></p><p>把qupload前的路径换成自己存放七牛qshell文件的位置。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个方法适合写博客时，把该篇博客需要的图片都存放在同一个文件下，写完后一次性上传至七牛空间。然后在把博客推至gitpage即可。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果想每次插入一张图片就上传，可以使用插件 <a href="https://github.com/jiwenxing/qimage-mac" target="_blank" rel="noopener">Mac 版本的 Markdown 一键贴图工具</a></p><p><a href="https://www.jianshu.com/p/5b3f98b1f7b6" target="_blank" rel="noopener">alfred3 Powerpack</a></p>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Alfred3 workflow </tag>
            
            <tag> 图床 </tag>
            
            <tag> qshell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nuxt.js踩坑实录</title>
      <link href="/2018/05/01/Nuxt.js%E8%B8%A9%E5%9D%91%E5%AE%9E%E5%BD%95.html"/>
      <url>/2018/05/01/Nuxt.js%E8%B8%A9%E5%9D%91%E5%AE%9E%E5%BD%95.html</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前一阵子接触一个新项目，用了vue中的ssr解决方案 — Nuxt.js。也算是小有感受，记录一些经验留后备用。</p><h3 id="CSR-amp-SSR"><a href="#CSR-amp-SSR" class="headerlink" title="CSR &amp; SSR"></a>CSR &amp; SSR</h3><h4 id="什么是-CSR"><a href="#什么是-CSR" class="headerlink" title="什么是 CSR ?"></a>什么是 CSR ?</h4><p>CSR =&gt; client-side-reder，即客户端渲染。具体过程如下：</p><ul><li>用户请求页面，返回页面。此时页面只是模版页面</li><li>浏览器解析页面代码，读到js代码时，会根据我们所写的接口去请求数据</li><li>得到返回数据后使用模版（vue/react/ng/art-template）进行渲染<h4 id="什么是-SSR"><a href="#什么是-SSR" class="headerlink" title="什么是 SSR ?"></a>什么是 SSR ?</h4></li></ul><a id="more"></a><p>SSR =&gt; server-side-render，即服务器端渲染。具体过程如下：</p><ul><li>用户请求页面</li><li>后端取到准备好的数据，渲染到我们自己写的服务器模版（next/nuxt/ejs）中，准备好html结构与相应数据后返回给浏览器</li></ul><h4 id="CSR-amp-SSR-优缺点对比"><a href="#CSR-amp-SSR-优缺点对比" class="headerlink" title="CSR &amp; SSR 优缺点对比"></a>CSR &amp; SSR 优缺点对比</h4><table><thead><tr><th style="text-align:left"></th><th style="text-align:left">优点</th><th style="text-align:left">缺点</th></tr></thead><tbody><tr><td style="text-align:left">CSR</td><td style="text-align:left">减轻服务器压力，前后端分离</td><td style="text-align:left">对seo不友（不利于爬虫爬取），首页渲染存在白屏问题</td></tr><tr><td style="text-align:left">SSR</td><td style="text-align:left">对seo友好，首页渲染完美无白屏问题</td><td style="text-align:left">对服务器性能有一定要求，不利于前后端分离</td></tr></tbody></table><p>其实在真正开发中通常是 csr 与 ssr 相结合使用，前端使用cdn缓存，后端使用nginx缓存。这样是最优的解决方案。上两张图大家对比理解：</p><p><img src="/2018/05/01/Nuxt.js踩坑实录/i7eo_1687e50bff1dbae80b0211d67d9dbde4.png" alt="csr"></p><p><img src="/2018/05/01/Nuxt.js踩坑实录/i7eo_910d2d75c2c87a237bfa316a4ed5ea26.png" alt="ssr"></p>]]></content>
      
      
      <categories>
          
          <category> Vue SSR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nuxt.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为git page开通https踩坑实录</title>
      <link href="/2017/10/01/%E4%B8%BAgitPages%E5%BC%80%E9%80%9Ahttps%E8%B8%A9%E5%9D%91%E5%AE%9E%E5%BD%95.html"/>
      <url>/2017/10/01/%E4%B8%BAgitPages%E5%BC%80%E9%80%9Ahttps%E8%B8%A9%E5%9D%91%E5%AE%9E%E5%BD%95.html</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;利用hexo与gitpage开通博客后，无论是pc&amp;mobile登陆时总会发现地址栏前有个感叹号。强迫症表示真的看不下去，所以就去了解了下https。</p><h3 id="HTTPS的优点"><a href="#HTTPS的优点" class="headerlink" title="HTTPS的优点"></a>HTTPS的优点</h3><ul><li>了解到https是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。</li><li>最重要的一点，https可以避免dns挟持，就是可以避免在浏览网页时出现一些小广告弹窗！</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;结合自己的代码发现引用的图片全是http协议下的，而且在input（即使type≠keyword）输入内容时感叹号变成了红字叉。我所用的是阿里的域名所以去网站查询https的信息，发现有免费的赛门铁克（Symantec）证书试用。果断申请后，发现：</p><a id="more"></a><h3 id="gitPages注意事项"><a href="#gitPages注意事项" class="headerlink" title="gitPages注意事项"></a>gitPages注意事项</h3><ul><li>git page自带https，在对应rep的设置中，点击 Enforce HTTPS 即可。</li><li>git page绑定自定义域名后无法添加ssl证书。<br>这个时候有点懵了，不过检索多次相关关键字后，发现了cloudflare这个好东西。大概了解了下后就确定用它了，好处如下：</li></ul><h3 id="安利cloudflare的原因"><a href="#安利cloudflare的原因" class="headerlink" title="安利cloudflare的原因"></a>安利cloudflare的原因</h3><ul><li>有免费套</li><li>cloudflare的dns服务器风评还是不错的<br>-cloudflare提供 Universal SSL 服务，简单来说就是让任意http站点支持https。<br>  （具体原理指的是，用cloudflare的dns服务器，当你访问网页时，网页 -&gt; cloudflare 这个过程是加密的，而 cloudflare -&gt; git page这个过程是非加密（http））</li></ul><p>具体可参考官方文档：<a href="https://support.cloudflare.com/hc/en-us/articles/200170416" target="_blank" rel="noopener"> how Cloudflare’s servers connect to your origin for HTTPS requests</a></p><h3 id="cloudflare配置的具体步骤"><a href="#cloudflare配置的具体步骤" class="headerlink" title="cloudflare配置的具体步骤"></a>cloudflare配置的具体步骤</h3><h4 id="第一步：设置dns"><a href="#第一步：设置dns" class="headerlink" title="第一步：设置dns"></a>第一步：设置dns</h4><p>把自己对应的dns服务器改为cloudflare的，下面以阿里来举例。阿里云 -&gt; 域名 -&gt; 管理 -&gt; 修改dns，出现一下界面：</p><p><img src="为gitPages开通https踩坑实录/i7eo_4436910aa5b1e131037aa2f6007f7d23.png" alt=""></p><p>这是我已经修改后的，单击右边的修改dns服务器即可，把cloudflare给出的俩个dns地址换上来就好。cloudflare给出的dns地址位于：cloudflare -&gt; dns -&gt; Cloudflare Nameservers。</p><p>如何判断更换dns成功？<br>回到cloudflare后，单击overview，如果成功会出现：</p><p><img src="为gitPages开通https踩坑实录/i7eo_be5528c7b4f28ce887136746b5de2d03.png" alt=""></p><h4 id="第二步：设置dns信息"><a href="#第二步：设置dns信息" class="headerlink" title="第二步：设置dns信息"></a>第二步：设置dns信息</h4><p>cloudflare -&gt; dns -&gt; DNS Records 如果这里没设置时有记录先删除，新增一条记录:</p><p><img src="为gitPages开通https踩坑实录/i7eo_a726bae253f790060294d739a7ea706f.png" alt=""></p><h4 id="第三步：设置ssl-amp-强制跳转"><a href="#第三步：设置ssl-amp-强制跳转" class="headerlink" title="第三步：设置ssl&amp;强制跳转"></a>第三步：设置ssl&amp;强制跳转</h4><p>cloudflare -&gt; crypto -&gt; SSL 勾选flexible</p><p>cloudflare -&gt; crypto -&gt; Always Use HTTPS 勾选on</p><h4 id="第四步：坐等-amp-排错"><a href="#第四步：坐等-amp-排错" class="headerlink" title="第四步：坐等&amp;排错"></a>第四步：坐等&amp;排错</h4><p>大概10mins - 30mins左右就会生效，可以在等待的时候使用ping命令来ping个人的域名查看ip。</p><p>如果你的博客出现以下情况：</p><p><img src="为gitPages开通https踩坑实录/i7eo_65772c9053e1e9b5a941fa515bc3c3f5.png" alt=""></p><p>检查gitpage的设置，取消掉勾选的Enforce HTTPS选项，这个设置是有缓存的</p><p><img src="为gitPages开通https踩坑实录/i7eo_ee6b38aa59be590bd6736c90911683a4.png" alt=""></p><p>可以切换source或者theme chooser这样可以清理掉缓存的Enforce HTTPS选项信息。</p><p>参考文章：</p><p><a href="https://steffan.cn/2017/03/22/use-cloudflare-to-implement-HTTPS-for-GithubPages-with-custom-domain-names/" target="_blank" rel="noopener">使用Cloudflare为自定义域名的GithubPages实现HTTPS化</a></p><p><a href="https://www.heartnn.com/2018/11/17/resolve-err-too-many-redirects-on-cloudflare/" target="_blank" rel="noopener">解决Cloudflare产生的“ERR_TOO_MANY_REDIRECTS”错误</a></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cloudflare </tag>
            
            <tag> https </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
